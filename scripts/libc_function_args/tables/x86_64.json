{"strerror": {"$rdi": "int ERRNUM"}, "strerror_r": {"$rdi": "int ERRNUM", "$rsi": "char *BUF", "$rdx": "size_t N"}, "perror": {"$rdi": "const char *MESSAGE"}, "strerrorname_np": {"$rdi": "int ERRNUM"}, "strerrordesc_np": {"$rdi": "int ERRNUM"}, "error": {"$rdi": "int STATUS", "$rsi": "int ERRNUM", "$rdx": "const char *FORMAT", "$r10": "..."}, "error_at_line": {"$rdi": "int STATUS", "$rsi": "int ERRNUM", "$rdx": "const char *FNAME", "$r10": "unsigned int LINENO", "$r8": "const char *FORMAT", "$r9": "..."}, "warn": {"$rdi": "const char *FORMAT", "$rsi": "..."}, "vwarn": {"$rdi": "const char *FORMAT", "$rsi": "va_list AP"}, "warnx": {"$rdi": "const char *FORMAT", "$rsi": "..."}, "vwarnx": {"$rdi": "const char *FORMAT", "$rsi": "va_list AP"}, "err": {"$rdi": "int STATUS", "$rsi": "const char *FORMAT", "$rdx": "..."}, "verr": {"$rdi": "int STATUS", "$rsi": "const char *FORMAT", "$rdx": "va_list AP"}, "errx": {"$rdi": "int STATUS", "$rsi": "const char *FORMAT", "$rdx": "..."}, "verrx": {"$rdi": "int STATUS", "$rsi": "const char *FORMAT", "$rdx": "va_list AP"}, "malloc": {"$rdi": "size_t SIZE"}, "free": {"$rdi": "void *PTR"}, "realloc": {"$rdi": "void *PTR", "$rsi": "size_t NEWSIZE"}, "reallocarray": {"$rdi": "void *PTR", "$rsi": "size_t NMEMB", "$rdx": "size_t SIZE"}, "calloc": {"$rdi": "size_t COUNT", "$rsi": "size_t ELTSIZE"}, "aligned_alloc": {"$rdi": "size_t ALIGNMENT", "$rsi": "size_t SIZE"}, "memalign": {"$rdi": "size_t BOUNDARY", "$rsi": "size_t SIZE"}, "posix_memalign": {"$rdi": "void **MEMPTR", "$rsi": "size_t ALIGNMENT", "$rdx": "size_t SIZE"}, "valloc": {"$rdi": "size_t SIZE"}, "mallopt": {"$rdi": "int PARAM", "$rsi": "int VALUE"}, "mcheck": {"$rdi": "void (*ABORTFN) (enum mcheck_status STATUS)"}, "mprobe": {"$rdi": "void *POINTER"}, "mallinfo": {"$rdi": "void"}, "mtrace": {"$rdi": "void"}, "muntrace": {"$rdi": "void"}, "obstack_init": {"$rdi": "struct obstack *OBSTACK-PTR"}, "obstack_alloc": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "int SIZE"}, "obstack_copy": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "void *ADDRESS", "$rdx": "int SIZE"}, "obstack_copy0": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "void *ADDRESS", "$rdx": "int SIZE"}, "obstack_free": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "void *OBJECT"}, "obstack_blank": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "int SIZE"}, "obstack_grow": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "void *DATA", "$rdx": "int SIZE"}, "obstack_grow0": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "void *DATA", "$rdx": "int SIZE"}, "obstack_1grow": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "char C"}, "obstack_ptr_grow": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "void *DATA"}, "obstack_int_grow": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "int DATA"}, "obstack_finish": {"$rdi": "struct obstack *OBSTACK-PTR"}, "obstack_object_size": {"$rdi": "struct obstack *OBSTACK-PTR"}, "obstack_room": {"$rdi": "struct obstack *OBSTACK-PTR"}, "obstack_1grow_fast": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "char C"}, "obstack_ptr_grow_fast": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "void *DATA"}, "obstack_int_grow_fast": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "int DATA"}, "obstack_blank_fast": {"$rdi": "struct obstack *OBSTACK-PTR", "$rsi": "int SIZE"}, "obstack_base": {"$rdi": "struct obstack *OBSTACK-PTR"}, "obstack_next_free": {"$rdi": "struct obstack *OBSTACK-PTR"}, "alloca": {"$rdi": "size_t SIZE"}, "brk": {"$rdi": "void *ADDR"}, "*sbrk": {"$rdi": "ptrdiff_t DELTA"}, "mprotect": {"$rdi": "void *ADDRESS", "$rsi": "size_t LENGTH", "$rdx": "int PROTECTION"}, "pkey_alloc": {"$rdi": "unsigned int FLAGS", "$rsi": "unsigned int RESTRICTIONS"}, "pkey_free": {"$rdi": "int KEY"}, "pkey_mprotect": {"$rdi": "void *ADDRESS", "$rsi": "size_t LENGTH", "$rdx": "int PROTECTION", "$r10": "int KEY"}, "pkey_set": {"$rdi": "int KEY", "$rsi": "unsigned int RIGHTS"}, "pkey_get": {"$rdi": "int KEY"}, "mlock": {"$rdi": "const void *ADDR", "$rsi": "size_t LEN"}, "mlock2": {"$rdi": "const void *ADDR", "$rsi": "size_t LEN", "$rdx": "unsigned int FLAGS"}, "munlock": {"$rdi": "const void *ADDR", "$rsi": "size_t LEN"}, "mlockall": {"$rdi": "int FLAGS"}, "munlockall": {"$rdi": "void"}, "islower": {"$rdi": "int C"}, "isupper": {"$rdi": "int C"}, "isalpha": {"$rdi": "int C"}, "isdigit": {"$rdi": "int C"}, "isalnum": {"$rdi": "int C"}, "isxdigit": {"$rdi": "int C"}, "ispunct": {"$rdi": "int C"}, "isspace": {"$rdi": "int C"}, "isblank": {"$rdi": "int C"}, "isgraph": {"$rdi": "int C"}, "isprint": {"$rdi": "int C"}, "iscntrl": {"$rdi": "int C"}, "isascii": {"$rdi": "int C"}, "tolower": {"$rdi": "int C"}, "toupper": {"$rdi": "int C"}, "toascii": {"$rdi": "int C"}, "_tolower": {"$rdi": "int C"}, "_toupper": {"$rdi": "int C"}, "wctype": {"$rdi": "const char *PROPERTY"}, "iswctype": {"$rdi": "wint_t WC", "$rsi": "wctype_t DESC"}, "iswalnum": {"$rdi": "wint_t WC"}, "iswalpha": {"$rdi": "wint_t WC"}, "iswcntrl": {"$rdi": "wint_t WC"}, "iswdigit": {"$rdi": "wint_t WC"}, "iswgraph": {"$rdi": "wint_t WC"}, "iswlower": {"$rdi": "wint_t WC"}, "iswprint": {"$rdi": "wint_t WC"}, "iswpunct": {"$rdi": "wint_t WC"}, "iswspace": {"$rdi": "wint_t WC"}, "iswupper": {"$rdi": "wint_t WC"}, "iswxdigit": {"$rdi": "wint_t WC"}, "iswblank": {"$rdi": "wint_t WC"}, "wctrans": {"$rdi": "const char *PROPERTY"}, "towctrans": {"$rdi": "wint_t WC", "$rsi": "wctrans_t DESC"}, "towlower": {"$rdi": "wint_t WC"}, "towupper": {"$rdi": "wint_t WC"}, "strlen": {"$rdi": "const char *S"}, "wcslen": {"$rdi": "const wchar_t *WS"}, "strnlen": {"$rdi": "const char *S", "$rsi": "size_t MAXLEN"}, "wcsnlen": {"$rdi": "const wchar_t *WS", "$rsi": "size_t MAXLEN"}, "memcpy": {"$rdi": "void *restrict TO", "$rsi": "const void *restrict FROM", "$rdx": "size_t SIZE"}, "wmemcpy": {"$rdi": "wchar_t *restrict WTO", "$rsi": "const wchar_t *restrict WFROM", "$rdx": "size_t SIZE"}, "mempcpy": {"$rdi": "void *restrict TO", "$rsi": "const void *restrict FROM", "$rdx": "size_t SIZE"}, "wmempcpy": {"$rdi": "wchar_t *restrict WTO", "$rsi": "const wchar_t *restrict WFROM", "$rdx": "size_t SIZE"}, "memmove": {"$rdi": "void *TO", "$rsi": "const void *FROM", "$rdx": "size_t SIZE"}, "wmemmove": {"$rdi": "wchar_t *WTO", "$rsi": "const wchar_t *WFROM", "$rdx": "size_t SIZE"}, "memccpy": {"$rdi": "void *restrict TO", "$rsi": "const void *restrict FROM", "$rdx": "int C", "$r10": "size_t SIZE"}, "memset": {"$rdi": "void *BLOCK", "$rsi": "int C", "$rdx": "size_t SIZE"}, "wmemset": {"$rdi": "wchar_t *BLOCK", "$rsi": "wchar_t WC", "$rdx": "size_t SIZE"}, "strcpy": {"$rdi": "char *restrict TO", "$rsi": "const char *restrict FROM"}, "wcscpy": {"$rdi": "wchar_t *restrict WTO", "$rsi": "const wchar_t *restrict WFROM"}, "strdup": {"$rdi": "const char *S"}, "wcsdup": {"$rdi": "const wchar_t *WS"}, "stpcpy": {"$rdi": "char *restrict TO", "$rsi": "const char *restrict FROM"}, "wcpcpy": {"$rdi": "wchar_t *restrict WTO", "$rsi": "const wchar_t *restrict WFROM"}, "bcopy": {"$rdi": "const void *FROM", "$rsi": "void *TO", "$rdx": "size_t SIZE"}, "bzero": {"$rdi": "void *BLOCK", "$rsi": "size_t SIZE"}, "strcat": {"$rdi": "char *restrict TO", "$rsi": "const char *restrict FROM"}, "wcscat": {"$rdi": "wchar_t *restrict WTO", "$rsi": "const wchar_t *restrict WFROM"}, "strncpy": {"$rdi": "char *restrict TO", "$rsi": "const char *restrict FROM", "$rdx": "size_t SIZE"}, "wcsncpy": {"$rdi": "wchar_t *restrict WTO", "$rsi": "const wchar_t *restrict WFROM", "$rdx": "size_t SIZE"}, "strndup": {"$rdi": "const char *S", "$rsi": "size_t SIZE"}, "stpncpy": {"$rdi": "char *restrict TO", "$rsi": "const char *restrict FROM", "$rdx": "size_t SIZE"}, "wcpncpy": {"$rdi": "wchar_t *restrict WTO", "$rsi": "const wchar_t *restrict WFROM", "$rdx": "size_t SIZE"}, "strncat": {"$rdi": "char *restrict TO", "$rsi": "const char *restrict FROM", "$rdx": "size_t SIZE"}, "wcsncat": {"$rdi": "wchar_t *restrict WTO", "$rsi": "const wchar_t *restrict WFROM", "$rdx": "size_t SIZE"}, "memcmp": {"$rdi": "const void *A1", "$rsi": "const void *A2", "$rdx": "size_t SIZE"}, "wmemcmp": {"$rdi": "const wchar_t *A1", "$rsi": "const wchar_t *A2", "$rdx": "size_t SIZE"}, "strcmp": {"$rdi": "const char *S1", "$rsi": "const char *S2"}, "wcscmp": {"$rdi": "const wchar_t *WS1", "$rsi": "const wchar_t *WS2"}, "strcasecmp": {"$rdi": "const char *S1", "$rsi": "const char *S2"}, "wcscasecmp": {"$rdi": "const wchar_t *WS1", "$rsi": "const wchar_t *WS2"}, "strncmp": {"$rdi": "const char *S1", "$rsi": "const char *S2", "$rdx": "size_t SIZE"}, "wcsncmp": {"$rdi": "const wchar_t *WS1", "$rsi": "const wchar_t *WS2", "$rdx": "size_t SIZE"}, "strncasecmp": {"$rdi": "const char *S1", "$rsi": "const char *S2", "$rdx": "size_t N"}, "wcsncasecmp": {"$rdi": "const wchar_t *WS1", "$rsi": "const wchar_t *S2", "$rdx": "size_t N"}, "strverscmp": {"$rdi": "const char *S1", "$rsi": "const char *S2"}, "bcmp": {"$rdi": "const void *A1", "$rsi": "const void *A2", "$rdx": "size_t SIZE"}, "strcoll": {"$rdi": "const char *S1", "$rsi": "const char *S2"}, "wcscoll": {"$rdi": "const wchar_t *WS1", "$rsi": "const wchar_t *WS2"}, "strxfrm": {"$rdi": "char *restrict TO", "$rsi": "const char *restrict FROM", "$rdx": "size_t SIZE"}, "wcsxfrm": {"$rdi": "wchar_t *restrict WTO", "$rsi": "const wchar_t *WFROM", "$rdx": "size_t SIZE"}, "memchr": {"$rdi": "const void *BLOCK", "$rsi": "int C", "$rdx": "size_t SIZE"}, "wmemchr": {"$rdi": "const wchar_t *BLOCK", "$rsi": "wchar_t WC", "$rdx": "size_t SIZE"}, "rawmemchr": {"$rdi": "const void *BLOCK", "$rsi": "int C"}, "memrchr": {"$rdi": "const void *BLOCK", "$rsi": "int C", "$rdx": "size_t SIZE"}, "strchr": {"$rdi": "const char *STRING", "$rsi": "int C"}, "wcschr": {"$rdi": "const wchar_t *WSTRING", "$rsi": "wchar_t WC"}, "strchrnul": {"$rdi": "const char *STRING", "$rsi": "int C"}, "wcschrnul": {"$rdi": "const wchar_t *WSTRING", "$rsi": "wchar_t WC"}, "strrchr": {"$rdi": "const char *STRING", "$rsi": "int C"}, "wcsrchr": {"$rdi": "const wchar_t *WSTRING", "$rsi": "wchar_t WC"}, "strstr": {"$rdi": "const char *HAYSTACK", "$rsi": "const char *NEEDLE"}, "wcsstr": {"$rdi": "const wchar_t *HAYSTACK", "$rsi": "const wchar_t *NEEDLE"}, "wcswcs": {"$rdi": "const wchar_t *HAYSTACK", "$rsi": "const wchar_t *NEEDLE"}, "strcasestr": {"$rdi": "const char *HAYSTACK", "$rsi": "const char *NEEDLE"}, "memmem": {"$rdi": "const void *HAYSTACK", "$rsi": "size_t HAYSTACK-LEN", "$rdx": "const void *NEEDLE", "$r10": "size_t NEEDLE-LEN"}, "strspn": {"$rdi": "const char *STRING", "$rsi": "const char *SKIPSET"}, "wcsspn": {"$rdi": "const wchar_t *WSTRING", "$rsi": "const wchar_t *SKIPSET"}, "strcspn": {"$rdi": "const char *STRING", "$rsi": "const char *STOPSET"}, "wcscspn": {"$rdi": "const wchar_t *WSTRING", "$rsi": "const wchar_t *STOPSET"}, "strpbrk": {"$rdi": "const char *STRING", "$rsi": "const char *STOPSET"}, "wcspbrk": {"$rdi": "const wchar_t *WSTRING", "$rsi": "const wchar_t *STOPSET"}, "index": {"$rdi": "const char *STRING", "$rsi": "int C"}, "rindex": {"$rdi": "const char *STRING", "$rsi": "int C"}, "strtok": {"$rdi": "char *restrict NEWSTRING", "$rsi": "const char *restrict DELIMITERS"}, "wcstok": {"$rdi": "wchar_t *NEWSTRING", "$rsi": "const wchar_t *DELIMITERS", "$rdx": "wchar_t **SAVE_PTR"}, "strtok_r": {"$rdi": "char *NEWSTRING", "$rsi": "const char *DELIMITERS", "$rdx": "char **SAVE_PTR"}, "strsep": {"$rdi": "char **STRING_PTR", "$rsi": "const char *DELIMITER"}, "basename": {"$rdi": "char *PATH"}, "dirname": {"$rdi": "char *PATH"}, "explicit_bzero": {"$rdi": "void *BLOCK", "$rsi": "size_t LEN"}, "strfry": {"$rdi": "char *STRING"}, "memfrob": {"$rdi": "void *MEM", "$rsi": "size_t LENGTH"}, "l64a": {"$rdi": "long int N"}, "a64l": {"$rdi": "const char *STRING"}, "argz_create": {"$rdi": "char *const ARGV[]", "$rsi": "char **ARGZ", "$rdx": "size_t *ARGZ_LEN"}, "argz_create_sep": {"$rdi": "const char *STRING", "$rsi": "int SEP", "$rdx": "char **ARGZ", "$r10": "size_t *ARGZ_LEN"}, "argz_count": {"$rdi": "const char *ARGZ", "$rsi": "size_t ARGZ_LEN"}, "argz_extract": {"$rdi": "const char *ARGZ", "$rsi": "size_t ARGZ_LEN", "$rdx": "char **ARGV"}, "argz_stringify": {"$rdi": "char *ARGZ", "$rsi": "size_t LEN", "$rdx": "int SEP"}, "argz_add": {"$rdi": "char **ARGZ", "$rsi": "size_t *ARGZ_LEN", "$rdx": "const char *STR"}, "argz_add_sep": {"$rdi": "char **ARGZ", "$rsi": "size_t *ARGZ_LEN", "$rdx": "const char *STR", "$r10": "int DELIM"}, "argz_append": {"$rdi": "char **ARGZ", "$rsi": "size_t *ARGZ_LEN", "$rdx": "const char *BUF", "$r10": "size_t BUF_LEN"}, "argz_delete": {"$rdi": "char **ARGZ", "$rsi": "size_t *ARGZ_LEN", "$rdx": "char *ENTRY"}, "argz_insert": {"$rdi": "char **ARGZ", "$rsi": "size_t *ARGZ_LEN", "$rdx": "char *BEFORE", "$r10": "const char *ENTRY"}, "argz_next": {"$rdi": "const char *ARGZ", "$rsi": "size_t ARGZ_LEN", "$rdx": "const char *ENTRY"}, "argz_replace": {"$rdi": "char **ARGZ", "$rsi": "size_t *ARGZ_LEN", "$rdx": "const char *STR", "$r10": "const char *WITH", "$r8": "unsigned *REPLACE_COUNT"}, "envz_entry": {"$rdi": "const char *ENVZ", "$rsi": "size_t ENVZ_LEN", "$rdx": "const char *NAME"}, "envz_get": {"$rdi": "const char *ENVZ", "$rsi": "size_t ENVZ_LEN", "$rdx": "const char *NAME"}, "envz_add": {"$rdi": "char **ENVZ", "$rsi": "size_t *ENVZ_LEN", "$rdx": "const char *NAME", "$r10": "const char *VALUE"}, "envz_merge": {"$rdi": "char **ENVZ", "$rsi": "size_t *ENVZ_LEN", "$rdx": "const char *ENVZ2", "$r10": "size_t ENVZ2_LEN", "$r8": "int OVERRIDE"}, "envz_strip": {"$rdi": "char **ENVZ", "$rsi": "size_t *ENVZ_LEN"}, "envz_remove": {"$rdi": "char **ENVZ", "$rsi": "size_t *ENVZ_LEN", "$rdx": "const char *NAME"}, "mbsinit": {"$rdi": "const mbstate_t *PS"}, "btowc": {"$rdi": "int C"}, "wctob": {"$rdi": "wint_t C"}, "mbrtowc": {"$rdi": "wchar_t *restrict PWC", "$rsi": "const char *restrict S", "$rdx": "size_t N", "$r10": "mbstate_t *restrict PS"}, "mbrlen": {"$rdi": "const char *restrict S", "$rsi": "size_t N", "$rdx": "mbstate_t *PS"}, "wcrtomb": {"$rdi": "char *restrict S", "$rsi": "wchar_t WC", "$rdx": "mbstate_t *restrict PS"}, "mbsrtowcs": {"$rdi": "wchar_t *restrict DST", "$rsi": "const char **restrict SRC", "$rdx": "size_t LEN", "$r10": "mbstate_t *restrict PS"}, "wcsrtombs": {"$rdi": "char *restrict DST", "$rsi": "const wchar_t **restrict SRC", "$rdx": "size_t LEN", "$r10": "mbstate_t *restrict PS"}, "mbsnrtowcs": {"$rdi": ""}, "wcsnrtombs": {"$rdi": ""}, "mbtowc": {"$rdi": "wchar_t *restrict RESULT", "$rsi": "const char *restrict STRING", "$rdx": "size_t SIZE"}, "wctomb": {"$rdi": "char *STRING", "$rsi": "wchar_t WCHAR"}, "mblen": {"$rdi": "const char *STRING", "$rsi": "size_t SIZE"}, "mbstowcs": {"$rdi": "wchar_t *WSTRING", "$rsi": "const char *STRING", "$rdx": "size_t SIZE"}, "wcstombs": {"$rdi": "char *STRING", "$rsi": "const wchar_t *WSTRING", "$rdx": "size_t SIZE"}, "iconv_open": {"$rdi": "const char *TOCODE", "$rsi": "const char *FROMCODE"}, "iconv_close": {"$rdi": "iconv_t CD"}, "iconv": {"$rdi": "iconv_t CD", "$rsi": "char **INBUF", "$rdx": "size_t *INBYTESLEFT", "$r10": "char **OUTBUF", "$r8": "size_t *OUTBYTESLEFT"}, "setlocale": {"$rdi": "int CATEGORY", "$rsi": "const char *LOCALE"}, "localeconv": {"$rdi": "void"}, "nl_langinfo": {"$rdi": "nl_item ITEM"}, "strfmon": {"$rdi": "char *S", "$rsi": "size_t MAXSIZE", "$rdx": "const char *FORMAT", "$r10": "..."}, "rpmatch": {"$rdi": "const char *RESPONSE"}, "catopen": {"$rdi": "const char *CAT_NAME", "$rsi": "int FLAG"}, "catgets": {"$rdi": "nl_catd CATALOG_DESC", "$rsi": "int SET", "$rdx": "int MESSAGE", "$r10": "const char *STRING"}, "catclose": {"$rdi": "nl_catd CATALOG_DESC"}, "gettext": {"$rdi": "const char *MSGID"}, "dgettext": {"$rdi": "const char *DOMAINNAME", "$rsi": "const char *MSGID"}, "dcgettext": {"$rdi": "const char *DOMAINNAME", "$rsi": "const char *MSGID", "$rdx": "int CATEGORY"}, "textdomain": {"$rdi": "const char *DOMAINNAME"}, "bindtextdomain": {"$rdi": "const char *DOMAINNAME", "$rsi": "const char *DIRNAME"}, "ngettext": {"$rdi": "const char *MSGID1", "$rsi": "const char *MSGID2", "$rdx": "unsigned long int N"}, "dngettext": {"$rdi": "const char *DOMAIN", "$rsi": "const char *MSGID1", "$rdx": "const char *MSGID2", "$r10": "unsigned long int N"}, "dcngettext": {"$rdi": "const char *DOMAIN", "$rsi": "const char *MSGID1", "$rdx": "const char *MSGID2", "$r10": "unsigned long int N", "$r8": "int CATEGORY"}, "bind_textdomain_codeset": {"$rdi": "const char *DOMAINNAME", "$rsi": "const char *CODESET"}, "lfind": {"$rdi": "const void *KEY", "$rsi": "const void *BASE", "$rdx": "size_t *NMEMB", "$r10": "size_t SIZE", "$r8": "comparison_fn_t COMPAR"}, "lsearch": {"$rdi": "const void *KEY", "$rsi": "void *BASE", "$rdx": "size_t *NMEMB", "$r10": "size_t SIZE", "$r8": "comparison_fn_t COMPAR"}, "bsearch": {"$rdi": "const void *KEY", "$rsi": "const void *ARRAY", "$rdx": "size_t COUNT", "$r10": "size_t SIZE", "$r8": "comparison_fn_t COMPARE"}, "qsort": {"$rdi": "void *ARRAY", "$rsi": "size_t COUNT", "$rdx": "size_t SIZE", "$r10": "comparison_fn_t COMPARE"}, "hcreate": {"$rdi": "size_t NEL"}, "hdestroy": {"$rdi": "void"}, "hsearch": {"$rdi": "ENTRY ITEM", "$rsi": "ACTION ACTION"}, "hcreate_r": {"$rdi": "size_t NEL", "$rsi": "struct hsearch_data *HTAB"}, "hdestroy_r": {"$rdi": "struct hsearch_data *HTAB"}, "hsearch_r": {"$rdi": "ENTRY ITEM", "$rsi": "ACTION ACTION", "$rdx": "ENTRY **RETVAL", "$r10": "struct hsearch_data *HTAB"}, "tsearch": {"$rdi": "const void *KEY", "$rsi": "void **ROOTP", "$rdx": "comparison_fn_t COMPAR"}, "tfind": {"$rdi": "const void *KEY", "$rsi": "void *const *ROOTP", "$rdx": "comparison_fn_t COMPAR"}, "tdelete": {"$rdi": "const void *KEY", "$rsi": "void **ROOTP", "$rdx": "comparison_fn_t COMPAR"}, "tdestroy": {"$rdi": "void *VROOT", "$rsi": "__free_fn_t FREEFCT"}, "twalk": {"$rdi": "const void *ROOT", "$rsi": "__action_fn_t ACTION"}, "twalk_r": {"$rdi": "const void *ROOT", "$rsi": "void (*ACTION) (const void *KEY", "$rdx": "VISIT WHICH", "$r10": "void *CLOSURE)", "$r8": "void *CLOSURE"}, "fnmatch": {"$rdi": "const char *PATTERN", "$rsi": "const char *STRING", "$rdx": "int FLAGS"}, "glob": {"$rdi": "const char *PATTERN", "$rsi": "int FLAGS", "$rdx": "int (*ERRFUNC"}, "glob64": {"$rdi": "const char *PATTERN", "$rsi": "int FLAGS", "$rdx": "int (*ERRFUNC"}, "globfree": {"$rdi": "glob_t *PGLOB"}, "globfree64": {"$rdi": "glob64_t *PGLOB"}, "regcomp": {"$rdi": "regex_t *restrict COMPILED", "$rsi": "const char *restrict PATTERN", "$rdx": "int CFLAGS"}, "regexec": {"$rdi": ""}, "regfree": {"$rdi": "regex_t *COMPILED"}, "regerror": {"$rdi": "int ERRCODE", "$rsi": "const regex_t *restrict COMPILED", "$rdx": "char *restrict BUFFER", "$r10": "size_t LENGTH"}, "wordexp": {"$rdi": "const char *WORDS", "$rsi": "wordexp_t *WORD-VECTOR-PTR", "$rdx": "int FLAGS"}, "wordfree": {"$rdi": "wordexp_t *WORD-VECTOR-PTR"}, "fopen": {"$rdi": "const char *FILENAME", "$rsi": "const char *OPENTYPE"}, "fopen64": {"$rdi": "const char *FILENAME", "$rsi": "const char *OPENTYPE"}, "freopen": {"$rdi": "const char *FILENAME", "$rsi": "const char *OPENTYPE", "$rdx": "FILE *STREAM"}, "freopen64": {"$rdi": "const char *FILENAME", "$rsi": "const char *OPENTYPE", "$rdx": "FILE *STREAM"}, "__freadable": {"$rdi": "FILE *STREAM"}, "__fwritable": {"$rdi": "FILE *STREAM"}, "__freading": {"$rdi": "FILE *STREAM"}, "__fwriting": {"$rdi": "FILE *STREAM"}, "fclose": {"$rdi": "FILE *STREAM"}, "fcloseall": {"$rdi": "void"}, "flockfile": {"$rdi": "FILE *STREAM"}, "ftrylockfile": {"$rdi": "FILE *STREAM"}, "funlockfile": {"$rdi": "FILE *STREAM"}, "__fsetlocking": {"$rdi": "FILE *STREAM", "$rsi": "int TYPE"}, "fwide": {"$rdi": "FILE *STREAM", "$rsi": "int MODE"}, "fputc": {"$rdi": "int C", "$rsi": "FILE *STREAM"}, "fputwc": {"$rdi": "wchar_t WC", "$rsi": "FILE *STREAM"}, "fputc_unlocked": {"$rdi": "int C", "$rsi": "FILE *STREAM"}, "fputwc_unlocked": {"$rdi": "wchar_t WC", "$rsi": "FILE *STREAM"}, "putc": {"$rdi": "int C", "$rsi": "FILE *STREAM"}, "putwc": {"$rdi": "wchar_t WC", "$rsi": "FILE *STREAM"}, "putc_unlocked": {"$rdi": "int C", "$rsi": "FILE *STREAM"}, "putwc_unlocked": {"$rdi": "wchar_t WC", "$rsi": "FILE *STREAM"}, "putchar": {"$rdi": "int C"}, "putwchar": {"$rdi": "wchar_t WC"}, "putchar_unlocked": {"$rdi": "int C"}, "putwchar_unlocked": {"$rdi": "wchar_t WC"}, "fputs": {"$rdi": "const char *S", "$rsi": "FILE *STREAM"}, "fputws": {"$rdi": "const wchar_t *WS", "$rsi": "FILE *STREAM"}, "fputs_unlocked": {"$rdi": "const char *S", "$rsi": "FILE *STREAM"}, "fputws_unlocked": {"$rdi": "const wchar_t *WS", "$rsi": "FILE *STREAM"}, "puts": {"$rdi": "const char *S"}, "putw": {"$rdi": "int W", "$rsi": "FILE *STREAM"}, "fgetc": {"$rdi": "FILE *STREAM"}, "fgetwc": {"$rdi": "FILE *STREAM"}, "fgetc_unlocked": {"$rdi": "FILE *STREAM"}, "fgetwc_unlocked": {"$rdi": "FILE *STREAM"}, "getc": {"$rdi": "FILE *STREAM"}, "getwc": {"$rdi": "FILE *STREAM"}, "getc_unlocked": {"$rdi": "FILE *STREAM"}, "getwc_unlocked": {"$rdi": "FILE *STREAM"}, "getchar": {"$rdi": "void"}, "getwchar": {"$rdi": "void"}, "getchar_unlocked": {"$rdi": "void"}, "getwchar_unlocked": {"$rdi": "void"}, "getw": {"$rdi": "FILE *STREAM"}, "getline": {"$rdi": "char **LINEPTR", "$rsi": "size_t *N", "$rdx": "FILE *STREAM"}, "getdelim": {"$rdi": "char **LINEPTR", "$rsi": "size_t *N", "$rdx": "int DELIMITER", "$r10": "FILE *STREAM"}, "fgets": {"$rdi": "char *S", "$rsi": "int COUNT", "$rdx": "FILE *STREAM"}, "fgetws": {"$rdi": "wchar_t *WS", "$rsi": "int COUNT", "$rdx": "FILE *STREAM"}, "fgets_unlocked": {"$rdi": "char *S", "$rsi": "int COUNT", "$rdx": "FILE *STREAM"}, "fgetws_unlocked": {"$rdi": "wchar_t *WS", "$rsi": "int COUNT", "$rdx": "FILE *STREAM"}, "ungetc": {"$rdi": "int C", "$rsi": "FILE *STREAM"}, "ungetwc": {"$rdi": "wint_t WC", "$rsi": "FILE *STREAM"}, "fread": {"$rdi": "void *DATA", "$rsi": "size_t SIZE", "$rdx": "size_t COUNT", "$r10": "FILE *STREAM"}, "fread_unlocked": {"$rdi": "void *DATA", "$rsi": "size_t SIZE", "$rdx": "size_t COUNT", "$r10": "FILE *STREAM"}, "fwrite": {"$rdi": "const void *DATA", "$rsi": "size_t SIZE", "$rdx": "size_t COUNT", "$r10": "FILE *STREAM"}, "fwrite_unlocked": {"$rdi": "const void *DATA", "$rsi": "size_t SIZE", "$rdx": "size_t COUNT", "$r10": "FILE *STREAM"}, "printf": {"$rdi": "const char *TEMPLATE", "$rsi": "..."}, "wprintf": {"$rdi": "const wchar_t *TEMPLATE", "$rsi": "..."}, "fprintf": {"$rdi": "FILE *STREAM", "$rsi": "const char *TEMPLATE", "$rdx": "..."}, "fwprintf": {"$rdi": "FILE *STREAM", "$rsi": "const wchar_t *TEMPLATE", "$rdx": "..."}, "sprintf": {"$rdi": "char *S", "$rsi": "const char *TEMPLATE", "$rdx": "..."}, "swprintf": {"$rdi": "wchar_t *WS", "$rsi": "size_t SIZE", "$rdx": "const wchar_t *TEMPLATE", "$r10": "..."}, "snprintf": {"$rdi": "char *S", "$rsi": "size_t SIZE", "$rdx": "const char *TEMPLATE", "$r10": "..."}, "asprintf": {"$rdi": "char **PTR", "$rsi": "const char *TEMPLATE", "$rdx": "..."}, "obstack_printf": {"$rdi": "struct obstack *OBSTACK", "$rsi": "const char *TEMPLATE", "$rdx": "..."}, "vprintf": {"$rdi": "const char *TEMPLATE", "$rsi": "va_list AP"}, "vwprintf": {"$rdi": "const wchar_t *TEMPLATE", "$rsi": "va_list AP"}, "vfprintf": {"$rdi": "FILE *STREAM", "$rsi": "const char *TEMPLATE", "$rdx": "va_list AP"}, "vfwprintf": {"$rdi": "FILE *STREAM", "$rsi": "const wchar_t *TEMPLATE", "$rdx": "va_list AP"}, "vsprintf": {"$rdi": "char *S", "$rsi": "const char *TEMPLATE", "$rdx": "va_list AP"}, "vswprintf": {"$rdi": "wchar_t *WS", "$rsi": "size_t SIZE", "$rdx": "const wchar_t *TEMPLATE", "$r10": "va_list AP"}, "vsnprintf": {"$rdi": "char *S", "$rsi": "size_t SIZE", "$rdx": "const char *TEMPLATE", "$r10": "va_list AP"}, "vasprintf": {"$rdi": "char **PTR", "$rsi": "const char *TEMPLATE", "$rdx": "va_list AP"}, "obstack_vprintf": {"$rdi": "struct obstack *OBSTACK", "$rsi": "const char *TEMPLATE", "$rdx": "va_list AP"}, "parse_printf_format": {"$rdi": "const char *TEMPLATE", "$rsi": "size_t N", "$rdx": "int *ARGTYPES"}, "register_printf_function": {"$rdi": "int SPEC", "$rsi": "printf_function HANDLER-FUNCTION", "$rdx": "printf_arginfo_function ARGINFO-FUNCTION"}, "printf_size": {"$rdi": "FILE *FP", "$rsi": "const struct printf_info *INFO", "$rdx": "const void *const *ARGS"}, "printf_size_info": {"$rdi": "const struct printf_info *INFO", "$rsi": "size_t N", "$rdx": "int *ARGTYPES"}, "scanf": {"$rdi": "const char *TEMPLATE", "$rsi": "..."}, "wscanf": {"$rdi": "const wchar_t *TEMPLATE", "$rsi": "..."}, "fscanf": {"$rdi": "FILE *STREAM", "$rsi": "const char *TEMPLATE", "$rdx": "..."}, "fwscanf": {"$rdi": "FILE *STREAM", "$rsi": "const wchar_t *TEMPLATE", "$rdx": "..."}, "sscanf": {"$rdi": "const char *S", "$rsi": "const char *TEMPLATE", "$rdx": "..."}, "swscanf": {"$rdi": "const wchar_t *WS", "$rsi": "const wchar_t *TEMPLATE", "$rdx": "..."}, "vscanf": {"$rdi": "const char *TEMPLATE", "$rsi": "va_list AP"}, "vwscanf": {"$rdi": "const wchar_t *TEMPLATE", "$rsi": "va_list AP"}, "vfscanf": {"$rdi": "FILE *STREAM", "$rsi": "const char *TEMPLATE", "$rdx": "va_list AP"}, "vfwscanf": {"$rdi": "FILE *STREAM", "$rsi": "const wchar_t *TEMPLATE", "$rdx": "va_list AP"}, "vsscanf": {"$rdi": "const char *S", "$rsi": "const char *TEMPLATE", "$rdx": "va_list AP"}, "vswscanf": {"$rdi": "const wchar_t *S", "$rsi": "const wchar_t *TEMPLATE", "$rdx": "va_list AP"}, "feof": {"$rdi": "FILE *STREAM"}, "feof_unlocked": {"$rdi": "FILE *STREAM"}, "ferror": {"$rdi": "FILE *STREAM"}, "ferror_unlocked": {"$rdi": "FILE *STREAM"}, "clearerr": {"$rdi": "FILE *STREAM"}, "clearerr_unlocked": {"$rdi": "FILE *STREAM"}, "ftell": {"$rdi": "FILE *STREAM"}, "ftello": {"$rdi": "FILE *STREAM"}, "ftello64": {"$rdi": "FILE *STREAM"}, "fseek": {"$rdi": "FILE *STREAM", "$rsi": "long int OFFSET", "$rdx": "int WHENCE"}, "fseeko": {"$rdi": "FILE *STREAM", "$rsi": "off_t OFFSET", "$rdx": "int WHENCE"}, "fseeko64": {"$rdi": "FILE *STREAM", "$rsi": "off64_t OFFSET", "$rdx": "int WHENCE"}, "rewind": {"$rdi": "FILE *STREAM"}, "fgetpos": {"$rdi": "FILE *STREAM", "$rsi": "fpos_t *POSITION"}, "fgetpos64": {"$rdi": "FILE *STREAM", "$rsi": "fpos64_t *POSITION"}, "fsetpos": {"$rdi": "FILE *STREAM", "$rsi": "const fpos_t *POSITION"}, "fsetpos64": {"$rdi": "FILE *STREAM", "$rsi": "const fpos64_t *POSITION"}, "fflush": {"$rdi": "FILE *STREAM"}, "fflush_unlocked": {"$rdi": "FILE *STREAM"}, "_flushlbf": {"$rdi": "void"}, "__fpurge": {"$rdi": "FILE *STREAM"}, "setvbuf": {"$rdi": "FILE *STREAM", "$rsi": "char *BUF", "$rdx": "int MODE", "$r10": "size_t SIZE"}, "setbuf": {"$rdi": "FILE *STREAM", "$rsi": "char *BUF"}, "setbuffer": {"$rdi": "FILE *STREAM", "$rsi": "char *BUF", "$rdx": "size_t SIZE"}, "setlinebuf": {"$rdi": "FILE *STREAM"}, "__flbf": {"$rdi": "FILE *STREAM"}, "__fbufsize": {"$rdi": "FILE *STREAM"}, "__fpending": {"$rdi": "FILE *STREAM"}, "fmemopen": {"$rdi": "void *BUF", "$rsi": "size_t SIZE", "$rdx": "const char *OPENTYPE"}, "open_memstream": {"$rdi": "char **PTR", "$rsi": "size_t *SIZELOC"}, "fopencookie": {"$rdi": "void *COOKIE", "$rsi": "const char *OPENTYPE", "$rdx": "cookie_io_functions_t IO-FUNCTIONS"}, "fmtmsg": {"$rdi": ""}, "addseverity": {"$rdi": "int SEVERITY", "$rsi": "const char *STRING"}, "open": {"$rdi": "const char *FILENAME", "$rsi": "int FLAGS[", "$rdx": "mode_t MODE]"}, "open64": {"$rdi": "const char *FILENAME", "$rsi": "int FLAGS[", "$rdx": "mode_t MODE]"}, "close": {"$rdi": "int FILEDES"}, "read": {"$rdi": "int FILEDES", "$rsi": "void *BUFFER", "$rdx": "size_t SIZE"}, "pread": {"$rdi": "int FILEDES", "$rsi": "void *BUFFER", "$rdx": "size_t SIZE", "$r10": "off_t OFFSET"}, "pread64": {"$rdi": "int FILEDES", "$rsi": "void *BUFFER", "$rdx": "size_t SIZE", "$r10": "off64_t OFFSET"}, "write": {"$rdi": "int FILEDES", "$rsi": "const void *BUFFER", "$rdx": "size_t SIZE"}, "pwrite": {"$rdi": "int FILEDES", "$rsi": "const void *BUFFER", "$rdx": "size_t SIZE", "$r10": "off_t OFFSET"}, "pwrite64": {"$rdi": "int FILEDES", "$rsi": "const void *BUFFER", "$rdx": "size_t SIZE", "$r10": "off64_t OFFSET"}, "lseek": {"$rdi": "int FILEDES", "$rsi": "off_t OFFSET", "$rdx": "int WHENCE"}, "lseek64": {"$rdi": "int FILEDES", "$rsi": "off64_t OFFSET", "$rdx": "int WHENCE"}, "fdopen": {"$rdi": "int FILEDES", "$rsi": "const char *OPENTYPE"}, "fileno": {"$rdi": "FILE *STREAM"}, "fileno_unlocked": {"$rdi": "FILE *STREAM"}, "readv": {"$rdi": "int FILEDES", "$rsi": "const struct iovec *VECTOR", "$rdx": "int COUNT"}, "writev": {"$rdi": "int FILEDES", "$rsi": "const struct iovec *VECTOR", "$rdx": "int COUNT"}, "preadv": {"$rdi": "int FD", "$rsi": "const struct iovec *IOV", "$rdx": "int IOVCNT", "$r10": "off_t OFFSET"}, "preadv64": {"$rdi": "int FD", "$rsi": "const struct iovec *IOV", "$rdx": "int IOVCNT", "$r10": "off64_t OFFSET"}, "pwritev": {"$rdi": "int FD", "$rsi": "const struct iovec *IOV", "$rdx": "int IOVCNT", "$r10": "off_t OFFSET"}, "pwritev64": {"$rdi": "int FD", "$rsi": "const struct iovec *IOV", "$rdx": "int IOVCNT", "$r10": "off64_t OFFSET"}, "preadv2": {"$rdi": "int FD", "$rsi": "const struct iovec *IOV", "$rdx": "int IOVCNT", "$r10": "off_t OFFSET", "$r8": "int FLAGS"}, "preadv64v2": {"$rdi": "int FD", "$rsi": "const struct iovec *IOV", "$rdx": "int IOVCNT", "$r10": "off64_t OFFSET", "$r8": "int FLAGS"}, "pwritev2": {"$rdi": "int FD", "$rsi": "const struct iovec *IOV", "$rdx": "int IOVCNT", "$r10": "off_t OFFSET", "$r8": "int FLAGS"}, "pwritev64v2": {"$rdi": "int FD", "$rsi": "const struct iovec *IOV", "$rdx": "int IOVCNT", "$r10": "off64_t OFFSET", "$r8": "int FLAGS"}, "copy_file_range": {"$rdi": ""}, "mmap": {"$rdi": "void *ADDRESS", "$rsi": "size_t LENGTH", "$rdx": "int PROTECT", "$r10": "int FLAGS", "$r8": "int FILEDES", "$r9": "off_t OFFSET"}, "mmap64": {"$rdi": "void *ADDRESS", "$rsi": "size_t LENGTH", "$rdx": "int PROTECT", "$r10": "int FLAGS", "$r8": "int FILEDES", "$r9": "off64_t OFFSET"}, "munmap": {"$rdi": "void *ADDR", "$rsi": "size_t LENGTH"}, "msync": {"$rdi": "void *ADDRESS", "$rsi": "size_t LENGTH", "$rdx": "int FLAGS"}, "mremap": {"$rdi": "void *ADDRESS", "$rsi": "size_t LENGTH", "$rdx": "size_t NEW_LENGTH", "$r10": "int FLAG"}, "madvise": {"$rdi": "void *ADDR", "$rsi": "size_t LENGTH", "$rdx": "int ADVICE"}, "shm_open": {"$rdi": "const char *NAME", "$rsi": "int OFLAG", "$rdx": "mode_t MODE"}, "shm_unlink": {"$rdi": "const char *NAME"}, "memfd_create": {"$rdi": "const char *NAME", "$rsi": "unsigned int FLAGS"}, "select": {"$rdi": "int NFDS", "$rsi": "fd_set *READ-FDS", "$rdx": "fd_set *WRITE-FDS", "$r10": "fd_set *EXCEPT-FDS", "$r8": "struct timeval *TIMEOUT"}, "sync": {"$rdi": "void"}, "fsync": {"$rdi": "int FILDES"}, "fdatasync": {"$rdi": "int FILDES"}, "aio_read": {"$rdi": "struct aiocb *AIOCBP"}, "aio_read64": {"$rdi": "struct aiocb64 *AIOCBP"}, "aio_write": {"$rdi": "struct aiocb *AIOCBP"}, "aio_write64": {"$rdi": "struct aiocb64 *AIOCBP"}, "lio_listio": {"$rdi": "int MODE", "$rsi": "struct aiocb *const LIST[]", "$rdx": "int NENT", "$r10": "struct sigevent *SIG"}, "lio_listio64": {"$rdi": "int MODE", "$rsi": "struct aiocb64 *const LIST[]", "$rdx": "int NENT", "$r10": "struct sigevent *SIG"}, "aio_error": {"$rdi": "const struct aiocb *AIOCBP"}, "aio_error64": {"$rdi": "const struct aiocb64 *AIOCBP"}, "aio_return": {"$rdi": "struct aiocb *AIOCBP"}, "aio_return64": {"$rdi": "struct aiocb64 *AIOCBP"}, "aio_fsync": {"$rdi": "int OP", "$rsi": "struct aiocb *AIOCBP"}, "aio_fsync64": {"$rdi": "int OP", "$rsi": "struct aiocb64 *AIOCBP"}, "aio_suspend": {"$rdi": "const struct aiocb *const LIST[]", "$rsi": "int NENT", "$rdx": "const struct timespec *TIMEOUT"}, "aio_suspend64": {"$rdi": "const struct aiocb64 *const LIST[]", "$rsi": "int NENT", "$rdx": "const struct timespec *TIMEOUT"}, "aio_cancel": {"$rdi": "int FILDES", "$rsi": "struct aiocb *AIOCBP"}, "aio_cancel64": {"$rdi": "int FILDES", "$rsi": "struct aiocb64 *AIOCBP"}, "aio_init": {"$rdi": "const struct aioinit *INIT"}, "fcntl": {"$rdi": "int FILEDES", "$rsi": "int COMMAND", "$rdx": "..."}, "dup": {"$rdi": "int OLD"}, "dup2": {"$rdi": "int OLD", "$rsi": "int NEW"}, "ioctl": {"$rdi": "int FILEDES", "$rsi": "int COMMAND", "$rdx": "..."}, "getcwd": {"$rdi": "char *BUFFER", "$rsi": "size_t SIZE"}, "get_current_dir_name": {"$rdi": "void"}, "chdir": {"$rdi": "const char *FILENAME"}, "fchdir": {"$rdi": "int FILEDES"}, "IFTODT": {"$rdi": "mode_t MODE"}, "DTTOIF": {"$rdi": "int DTYPE"}, "opendir": {"$rdi": "const char *DIRNAME"}, "fdopendir": {"$rdi": "int FD"}, "dirfd": {"$rdi": "DIR *DIRSTREAM"}, "readdir": {"$rdi": "DIR *DIRSTREAM"}, "readdir_r": {"$rdi": "DIR *DIRSTREAM", "$rsi": "struct dirent *ENTRY", "$rdx": "struct dirent **RESULT"}, "readdir64": {"$rdi": "DIR *DIRSTREAM"}, "readdir64_r": {"$rdi": "DIR *DIRSTREAM", "$rsi": "struct dirent64 *ENTRY", "$rdx": "struct dirent64 **RESULT"}, "closedir": {"$rdi": "DIR *DIRSTREAM"}, "rewinddir": {"$rdi": "DIR *DIRSTREAM"}, "telldir": {"$rdi": "DIR *DIRSTREAM"}, "seekdir": {"$rdi": "DIR *DIRSTREAM", "$rsi": "long int POS"}, "scandir": {"$rdi": "const char *DIR", "$rsi": "struct dirent ***NAMELIST", "$rdx": "int (*SELECTOR) (const struct dirent *)", "$r10": "int (*CMP"}, "alphasort": {"$rdi": "const struct dirent **A", "$rsi": "const struct dirent **B"}, "versionsort": {"$rdi": "const struct dirent **A", "$rsi": "const struct dirent **B"}, "scandir64": {"$rdi": "const char *DIR", "$rsi": "struct dirent64 ***NAMELIST", "$rdx": "int (*SELECTOR) (const struct dirent64 *"}, "alphasort64": {"$rdi": "const struct dirent64 **A", "$rsi": "const struct dirent **B"}, "versionsort64": {"$rdi": "const struct dirent64 **A", "$rsi": "const struct dirent64 **B"}, "getdents64": {"$rdi": "int FD", "$rsi": "void *BUFFER", "$rdx": "size_t LENGTH"}, "ftw": {"$rdi": "const char *FILENAME", "$rsi": "__ftw_func_t FUNC", "$rdx": "int DESCRIPTORS"}, "ftw64": {"$rdi": "const char *FILENAME", "$rsi": "__ftw64_func_t FUNC", "$rdx": "int DESCRIPTORS"}, "nftw": {"$rdi": "const char *FILENAME", "$rsi": "__nftw_func_t FUNC", "$rdx": "int DESCRIPTORS", "$r10": "int FLAG"}, "nftw64": {"$rdi": "const char *FILENAME", "$rsi": "__nftw64_func_t FUNC", "$rdx": "int DESCRIPTORS", "$r10": "int FLAG"}, "link": {"$rdi": "const char *OLDNAME", "$rsi": "const char *NEWNAME"}, "linkat": {"$rdi": "int oldfd", "$rsi": "const char *OLDNAME", "$rdx": "int newfd", "$r10": "const char *NEWNAME", "$r8": "int flags"}, "symlink": {"$rdi": "const char *OLDNAME", "$rsi": "const char *NEWNAME"}, "readlink": {"$rdi": "const char *FILENAME", "$rsi": "char *BUFFER", "$rdx": "size_t SIZE"}, "canonicalize_file_name": {"$rdi": "const char *NAME"}, "realpath": {"$rdi": "const char *restrict NAME", "$rsi": "char *restrict RESOLVED"}, "unlink": {"$rdi": "const char *FILENAME"}, "rmdir": {"$rdi": "const char *FILENAME"}, "remove": {"$rdi": "const char *FILENAME"}, "rename": {"$rdi": "const char *OLDNAME", "$rsi": "const char *NEWNAME"}, "mkdir": {"$rdi": "const char *FILENAME", "$rsi": "mode_t MODE"}, "stat": {"$rdi": "const char *FILENAME", "$rsi": "struct stat *BUF"}, "stat64": {"$rdi": "const char *FILENAME", "$rsi": "struct stat64 *BUF"}, "fstat": {"$rdi": "int FILEDES", "$rsi": "struct stat *BUF"}, "fstat64": {"$rdi": "int FILEDES", "$rsi": "struct stat64 *BUF"}, "lstat": {"$rdi": "const char *FILENAME", "$rsi": "struct stat *BUF"}, "lstat64": {"$rdi": "const char *FILENAME", "$rsi": "struct stat64 *BUF"}, "chown": {"$rdi": "const char *FILENAME", "$rsi": "uid_t OWNER", "$rdx": "gid_t GROUP"}, "fchown": {"$rdi": "int FILEDES", "$rsi": "uid_t OWNER", "$rdx": "gid_t GROUP"}, "umask": {"$rdi": "mode_t MASK"}, "getumask": {"$rdi": "void"}, "chmod": {"$rdi": "const char *FILENAME", "$rsi": "mode_t MODE"}, "fchmod": {"$rdi": "int FILEDES", "$rsi": "mode_t MODE"}, "access": {"$rdi": "const char *FILENAME", "$rsi": "int HOW"}, "utime": {"$rdi": "const char *FILENAME", "$rsi": "const struct utimbuf *TIMES"}, "utimes": {"$rdi": "const char *FILENAME", "$rsi": "const struct timeval TVP[2]"}, "lutimes": {"$rdi": "const char *FILENAME", "$rsi": "const struct timeval TVP[2]"}, "futimes": {"$rdi": "int FD", "$rsi": "const struct timeval TVP[2]"}, "truncate": {"$rdi": "const char *FILENAME", "$rsi": "off_t LENGTH"}, "truncate64": {"$rdi": "const char *NAME", "$rsi": "off64_t LENGTH"}, "ftruncate": {"$rdi": "int FD", "$rsi": "off_t LENGTH"}, "ftruncate64": {"$rdi": "int ID", "$rsi": "off64_t LENGTH"}, "posix_fallocate": {"$rdi": "int FD", "$rsi": "off_t OFFSET", "$rdx": "off_t LENGTH"}, "posix_fallocate64": {"$rdi": "int FD", "$rsi": "off64_t OFFSET", "$rdx": "off64_t LENGTH"}, "mknod": {"$rdi": "const char *FILENAME", "$rsi": "mode_t MODE", "$rdx": "dev_t DEV"}, "tmpfile": {"$rdi": "void"}, "tmpfile64": {"$rdi": "void"}, "tmpnam": {"$rdi": "char *RESULT"}, "tmpnam_r": {"$rdi": "char *RESULT"}, "tempnam": {"$rdi": "const char *DIR", "$rsi": "const char *PREFIX"}, "mktemp": {"$rdi": "char *TEMPLATE"}, "mkstemp": {"$rdi": "char *TEMPLATE"}, "mkdtemp": {"$rdi": "char *TEMPLATE"}, "pipe": {"$rdi": "int FILEDES[2]"}, "popen": {"$rdi": "const char *COMMAND", "$rsi": "const char *MODE"}, "pclose": {"$rdi": "FILE *STREAM"}, "mkfifo": {"$rdi": "const char *FILENAME", "$rsi": "mode_t MODE"}, "bind": {"$rdi": "int SOCKET", "$rsi": "struct sockaddr *ADDR", "$rdx": "socklen_t LENGTH"}, "getsockname": {"$rdi": "int SOCKET", "$rsi": "struct sockaddr *ADDR", "$rdx": "socklen_t *LENGTH-PTR"}, "if_nametoindex": {"$rdi": "const char *IFNAME"}, "if_indextoname": {"$rdi": "unsigned int IFINDEX", "$rsi": "char *IFNAME"}, "if_nameindex": {"$rdi": "void"}, "if_freenameindex": {"$rdi": "struct if_nameindex *PTR"}, "inet_aton": {"$rdi": "const char *NAME", "$rsi": "struct in_addr *ADDR"}, "inet_addr": {"$rdi": "const char *NAME"}, "inet_network": {"$rdi": "const char *NAME"}, "inet_ntoa": {"$rdi": "struct in_addr ADDR"}, "inet_makeaddr": {"$rdi": "uint32_t NET", "$rsi": "uint32_t LOCAL"}, "inet_lnaof": {"$rdi": "struct in_addr ADDR"}, "inet_netof": {"$rdi": "struct in_addr ADDR"}, "inet_pton": {"$rdi": "int AF", "$rsi": "const char *CP", "$rdx": "void *BUF"}, "inet_ntop": {"$rdi": "int AF", "$rsi": "const void *CP", "$rdx": "char *BUF", "$r10": "socklen_t LEN"}, "gethostbyname": {"$rdi": "const char *NAME"}, "gethostbyname2": {"$rdi": "const char *NAME", "$rsi": "int AF"}, "gethostbyaddr": {"$rdi": "const void *ADDR", "$rsi": "socklen_t LENGTH", "$rdx": "int FORMAT"}, "gethostbyname_r": {"$rdi": ""}, "gethostbyname2_r": {"$rdi": ""}, "gethostbyaddr_r": {"$rdi": ""}, "sethostent": {"$rdi": "int STAYOPEN"}, "gethostent": {"$rdi": "void"}, "endhostent": {"$rdi": "void"}, "getservbyname": {"$rdi": "const char *NAME", "$rsi": "const char *PROTO"}, "getservbyport": {"$rdi": "int PORT", "$rsi": "const char *PROTO"}, "setservent": {"$rdi": "int STAYOPEN"}, "getservent": {"$rdi": "void"}, "endservent": {"$rdi": "void"}, "htons": {"$rdi": "uint16_t HOSTSHORT"}, "ntohs": {"$rdi": "uint16_t NETSHORT"}, "htonl": {"$rdi": "uint32_t HOSTLONG"}, "ntohl": {"$rdi": "uint32_t NETLONG"}, "getprotobyname": {"$rdi": "const char *NAME"}, "getprotobynumber": {"$rdi": "int PROTOCOL"}, "setprotoent": {"$rdi": "int STAYOPEN"}, "getprotoent": {"$rdi": "void"}, "endprotoent": {"$rdi": "void"}, "socket": {"$rdi": "int NAMESPACE", "$rsi": "int STYLE", "$rdx": "int PROTOCOL"}, "shutdown": {"$rdi": "int SOCKET", "$rsi": "int HOW"}, "socketpair": {"$rdi": "int NAMESPACE", "$rsi": "int STYLE", "$rdx": "int PROTOCOL", "$r10": "int FILEDES[2]"}, "connect": {"$rdi": "int SOCKET", "$rsi": "struct sockaddr *ADDR", "$rdx": "socklen_t LENGTH"}, "listen": {"$rdi": "int SOCKET", "$rsi": "int N"}, "accept": {"$rdi": "int SOCKET", "$rsi": "struct sockaddr *ADDR", "$rdx": "socklen_t *LENGTH_PTR"}, "getpeername": {"$rdi": "int SOCKET", "$rsi": "struct sockaddr *ADDR", "$rdx": "socklen_t *LENGTH-PTR"}, "send": {"$rdi": "int SOCKET", "$rsi": "const void *BUFFER", "$rdx": "size_t SIZE", "$r10": "int FLAGS"}, "recv": {"$rdi": "int SOCKET", "$rsi": "void *BUFFER", "$rdx": "size_t SIZE", "$r10": "int FLAGS"}, "sendto": {"$rdi": "int SOCKET", "$rsi": "const void *BUFFER", "$rdx": "size_t SIZE", "$r10": "int FLAGS", "$r8": "struct sockaddr *ADDR", "$r9": "socklen_t LENGTH"}, "recvfrom": {"$rdi": "int SOCKET", "$rsi": "void *BUFFER", "$rdx": "size_t SIZE", "$r10": "int FLAGS", "$r8": "struct sockaddr *ADDR", "$r9": "socklen_t *LENGTH-PTR"}, "getsockopt": {"$rdi": "int SOCKET", "$rsi": "int LEVEL", "$rdx": "int OPTNAME", "$r10": "void *OPTVAL", "$r8": "socklen_t *OPTLEN-PTR"}, "setsockopt": {"$rdi": "int SOCKET", "$rsi": "int LEVEL", "$rdx": "int OPTNAME", "$r10": "const void *OPTVAL", "$r8": "socklen_t OPTLEN"}, "getnetbyname": {"$rdi": "const char *NAME"}, "getnetbyaddr": {"$rdi": "uint32_t NET", "$rsi": "int TYPE"}, "setnetent": {"$rdi": "int STAYOPEN"}, "getnetent": {"$rdi": "void"}, "endnetent": {"$rdi": "void"}, "isatty": {"$rdi": "int FILEDES"}, "ttyname": {"$rdi": "int FILEDES"}, "ttyname_r": {"$rdi": "int FILEDES", "$rsi": "char *BUF", "$rdx": "size_t LEN"}, "tcgetattr": {"$rdi": "int FILEDES", "$rsi": "struct termios *TERMIOS-P"}, "tcsetattr": {"$rdi": "int FILEDES", "$rsi": "int WHEN", "$rdx": "const struct termios *TERMIOS-P"}, "cfgetospeed": {"$rdi": "const struct termios *TERMIOS-P"}, "cfgetispeed": {"$rdi": "const struct termios *TERMIOS-P"}, "cfsetospeed": {"$rdi": "struct termios *TERMIOS-P", "$rsi": "speed_t SPEED"}, "cfsetispeed": {"$rdi": "struct termios *TERMIOS-P", "$rsi": "speed_t SPEED"}, "cfsetspeed": {"$rdi": "struct termios *TERMIOS-P", "$rsi": "speed_t SPEED"}, "cfmakeraw": {"$rdi": "struct termios *TERMIOS-P"}, "gtty": {"$rdi": "int FILEDES", "$rsi": "struct sgttyb *ATTRIBUTES"}, "stty": {"$rdi": "int FILEDES", "$rsi": "const struct sgttyb *ATTRIBUTES"}, "tcsendbreak": {"$rdi": "int FILEDES", "$rsi": "int DURATION"}, "tcdrain": {"$rdi": "int FILEDES"}, "tcflush": {"$rdi": "int FILEDES", "$rsi": "int QUEUE"}, "tcflow": {"$rdi": "int FILEDES", "$rsi": "int ACTION"}, "getpass": {"$rdi": "const char *PROMPT"}, "getpt": {"$rdi": "void"}, "grantpt": {"$rdi": "int FILEDES"}, "unlockpt": {"$rdi": "int FILEDES"}, "ptsname": {"$rdi": "int FILEDES"}, "ptsname_r": {"$rdi": "int FILEDES", "$rsi": "char *BUF", "$rdx": "size_t LEN"}, "openpty": {"$rdi": "int *AMASTER", "$rsi": "int *ASLAVE", "$rdx": "char *NAME", "$r10": "const struct termios *TERMP", "$r8": "const struct winsize *WINP"}, "forkpty": {"$rdi": "int *AMASTER", "$rsi": "char *NAME", "$rdx": "const struct termios *TERMP", "$r10": "const struct winsize *WINP"}, "openlog": {"$rdi": "const char *IDENT", "$rsi": "int OPTION", "$rdx": "int FACILITY"}, "syslog": {"$rdi": "int FACILITY_PRIORITY", "$rsi": "const char *FORMAT", "$rdx": "..."}, "vsyslog": {"$rdi": "int FACILITY_PRIORITY", "$rsi": "const char *FORMAT", "$rdx": "va_list ARGLIST"}, "closelog": {"$rdi": "void"}, "setlogmask": {"$rdi": "int MASK"}, "sin": {"$rdi": "double X"}, "sinf": {"$rdi": "float X"}, "sinl": {"$rdi": "long double X"}, "sinfN": {"$rdi": "_FloatN X"}, "sinfNx": {"$rdi": "_FloatNx X"}, "cos": {"$rdi": "double X"}, "cosf": {"$rdi": "float X"}, "cosl": {"$rdi": "long double X"}, "cosfN": {"$rdi": "_FloatN X"}, "cosfNx": {"$rdi": "_FloatNx X"}, "tan": {"$rdi": "double X"}, "tanf": {"$rdi": "float X"}, "tanl": {"$rdi": "long double X"}, "tanfN": {"$rdi": "_FloatN X"}, "tanfNx": {"$rdi": "_FloatNx X"}, "sincos": {"$rdi": "double X", "$rsi": "double *SINX", "$rdx": "double *COSX"}, "sincosf": {"$rdi": "float X", "$rsi": "float *SINX", "$rdx": "float *COSX"}, "sincosl": {"$rdi": "long double X", "$rsi": "long double *SINX", "$rdx": "long double *COSX"}, "sincosfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN *SINX", "$rdx": "_FloatN *COSX"}, "sincosfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx *SINX", "$rdx": "_FloatNx *COSX"}, "csin": {"$rdi": "complex double Z"}, "csinf": {"$rdi": "complex float Z"}, "csinl": {"$rdi": "complex long double Z"}, "csinfN": {"$rdi": "complex _FloatN Z"}, "csinfNx": {"$rdi": "complex _FloatNx Z"}, "ccos": {"$rdi": "complex double Z"}, "ccosf": {"$rdi": "complex float Z"}, "ccosl": {"$rdi": "complex long double Z"}, "ccosfN": {"$rdi": "complex _FloatN Z"}, "ccosfNx": {"$rdi": "complex _FloatNx Z"}, "ctan": {"$rdi": "complex double Z"}, "ctanf": {"$rdi": "complex float Z"}, "ctanl": {"$rdi": "complex long double Z"}, "ctanfN": {"$rdi": "complex _FloatN Z"}, "ctanfNx": {"$rdi": "complex _FloatNx Z"}, "asin": {"$rdi": "double X"}, "asinf": {"$rdi": "float X"}, "asinl": {"$rdi": "long double X"}, "asinfN": {"$rdi": "_FloatN X"}, "asinfNx": {"$rdi": "_FloatNx X"}, "acos": {"$rdi": "double X"}, "acosf": {"$rdi": "float X"}, "acosl": {"$rdi": "long double X"}, "acosfN": {"$rdi": "_FloatN X"}, "acosfNx": {"$rdi": "_FloatNx X"}, "atan": {"$rdi": "double X"}, "atanf": {"$rdi": "float X"}, "atanl": {"$rdi": "long double X"}, "atanfN": {"$rdi": "_FloatN X"}, "atanfNx": {"$rdi": "_FloatNx X"}, "atan2": {"$rdi": "double Y", "$rsi": "double X"}, "atan2f": {"$rdi": "float Y", "$rsi": "float X"}, "atan2l": {"$rdi": "long double Y", "$rsi": "long double X"}, "atan2fN": {"$rdi": "_FloatN Y", "$rsi": "_FloatN X"}, "atan2fNx": {"$rdi": "_FloatNx Y", "$rsi": "_FloatNx X"}, "casin": {"$rdi": "complex double Z"}, "casinf": {"$rdi": "complex float Z"}, "casinl": {"$rdi": "complex long double Z"}, "casinfN": {"$rdi": "complex _FloatN Z"}, "casinfNx": {"$rdi": "complex _FloatNx Z"}, "cacos": {"$rdi": "complex double Z"}, "cacosf": {"$rdi": "complex float Z"}, "cacosl": {"$rdi": "complex long double Z"}, "cacosfN": {"$rdi": "complex _FloatN Z"}, "cacosfNx": {"$rdi": "complex _FloatNx Z"}, "catan": {"$rdi": "complex double Z"}, "catanf": {"$rdi": "complex float Z"}, "catanl": {"$rdi": "complex long double Z"}, "catanfN": {"$rdi": "complex _FloatN Z"}, "catanfNx": {"$rdi": "complex _FloatNx Z"}, "exp": {"$rdi": "double X"}, "expf": {"$rdi": "float X"}, "expl": {"$rdi": "long double X"}, "expfN": {"$rdi": "_FloatN X"}, "expfNx": {"$rdi": "_FloatNx X"}, "exp2": {"$rdi": "double X"}, "exp2f": {"$rdi": "float X"}, "exp2l": {"$rdi": "long double X"}, "exp2fN": {"$rdi": "_FloatN X"}, "exp2fNx": {"$rdi": "_FloatNx X"}, "exp10": {"$rdi": "double X"}, "exp10f": {"$rdi": "float X"}, "exp10l": {"$rdi": "long double X"}, "exp10fN": {"$rdi": "_FloatN X"}, "exp10fNx": {"$rdi": "_FloatNx X"}, "log": {"$rdi": "double X"}, "logf": {"$rdi": "float X"}, "logl": {"$rdi": "long double X"}, "logfN": {"$rdi": "_FloatN X"}, "logfNx": {"$rdi": "_FloatNx X"}, "log10": {"$rdi": "double X"}, "log10f": {"$rdi": "float X"}, "log10l": {"$rdi": "long double X"}, "log10fN": {"$rdi": "_FloatN X"}, "log10fNx": {"$rdi": "_FloatNx X"}, "log2": {"$rdi": "double X"}, "log2f": {"$rdi": "float X"}, "log2l": {"$rdi": "long double X"}, "log2fN": {"$rdi": "_FloatN X"}, "log2fNx": {"$rdi": "_FloatNx X"}, "logb": {"$rdi": "double X"}, "logbf": {"$rdi": "float X"}, "logbl": {"$rdi": "long double X"}, "logbfN": {"$rdi": "_FloatN X"}, "logbfNx": {"$rdi": "_FloatNx X"}, "ilogb": {"$rdi": "double X"}, "ilogbf": {"$rdi": "float X"}, "ilogbl": {"$rdi": "long double X"}, "ilogbfN": {"$rdi": "_FloatN X"}, "ilogbfNx": {"$rdi": "_FloatNx X"}, "llogb": {"$rdi": "double X"}, "llogbf": {"$rdi": "float X"}, "llogbl": {"$rdi": "long double X"}, "llogbfN": {"$rdi": "_FloatN X"}, "llogbfNx": {"$rdi": "_FloatNx X"}, "pow": {"$rdi": "double BASE", "$rsi": "double POWER"}, "powf": {"$rdi": "float BASE", "$rsi": "float POWER"}, "powl": {"$rdi": "long double BASE", "$rsi": "long double POWER"}, "powfN": {"$rdi": "_FloatN BASE", "$rsi": "_FloatN POWER"}, "powfNx": {"$rdi": "_FloatNx BASE", "$rsi": "_FloatNx POWER"}, "sqrt": {"$rdi": "double X"}, "sqrtf": {"$rdi": "float X"}, "sqrtl": {"$rdi": "long double X"}, "sqrtfN": {"$rdi": "_FloatN X"}, "sqrtfNx": {"$rdi": "_FloatNx X"}, "cbrt": {"$rdi": "double X"}, "cbrtf": {"$rdi": "float X"}, "cbrtl": {"$rdi": "long double X"}, "cbrtfN": {"$rdi": "_FloatN X"}, "cbrtfNx": {"$rdi": "_FloatNx X"}, "hypot": {"$rdi": "double X", "$rsi": "double Y"}, "hypotf": {"$rdi": "float X", "$rsi": "float Y"}, "hypotl": {"$rdi": "long double X", "$rsi": "long double Y"}, "hypotfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "hypotfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "expm1": {"$rdi": "double X"}, "expm1f": {"$rdi": "float X"}, "expm1l": {"$rdi": "long double X"}, "expm1fN": {"$rdi": "_FloatN X"}, "expm1fNx": {"$rdi": "_FloatNx X"}, "log1p": {"$rdi": "double X"}, "log1pf": {"$rdi": "float X"}, "log1pl": {"$rdi": "long double X"}, "log1pfN": {"$rdi": "_FloatN X"}, "log1pfNx": {"$rdi": "_FloatNx X"}, "cexp": {"$rdi": "complex double Z"}, "cexpf": {"$rdi": "complex float Z"}, "cexpl": {"$rdi": "complex long double Z"}, "cexpfN": {"$rdi": "complex _FloatN Z"}, "cexpfNx": {"$rdi": "complex _FloatNx Z"}, "clog": {"$rdi": "complex double Z"}, "clogf": {"$rdi": "complex float Z"}, "clogl": {"$rdi": "complex long double Z"}, "clogfN": {"$rdi": "complex _FloatN Z"}, "clogfNx": {"$rdi": "complex _FloatNx Z"}, "clog10": {"$rdi": "complex double Z"}, "clog10f": {"$rdi": "complex float Z"}, "clog10l": {"$rdi": "complex long double Z"}, "clog10fN": {"$rdi": "complex _FloatN Z"}, "clog10fNx": {"$rdi": "complex _FloatNx Z"}, "csqrt": {"$rdi": "complex double Z"}, "csqrtf": {"$rdi": "complex float Z"}, "csqrtl": {"$rdi": "complex long double Z"}, "csqrtfN": {"$rdi": "_FloatN Z"}, "csqrtfNx": {"$rdi": "complex _FloatNx Z"}, "cpow": {"$rdi": "complex double BASE", "$rsi": "complex double POWER"}, "cpowf": {"$rdi": "complex float BASE", "$rsi": "complex float POWER"}, "cpowl": {"$rdi": "complex long double BASE", "$rsi": "complex long double POWER"}, "cpowfN": {"$rdi": "complex _FloatN BASE", "$rsi": "complex _FloatN POWER"}, "cpowfNx": {"$rdi": "complex _FloatNx BASE", "$rsi": "complex _FloatNx POWER"}, "sinh": {"$rdi": "double X"}, "sinhf": {"$rdi": "float X"}, "sinhl": {"$rdi": "long double X"}, "sinhfN": {"$rdi": "_FloatN X"}, "sinhfNx": {"$rdi": "_FloatNx X"}, "cosh": {"$rdi": "double X"}, "coshf": {"$rdi": "float X"}, "coshl": {"$rdi": "long double X"}, "coshfN": {"$rdi": "_FloatN X"}, "coshfNx": {"$rdi": "_FloatNx X"}, "tanh": {"$rdi": "double X"}, "tanhf": {"$rdi": "float X"}, "tanhl": {"$rdi": "long double X"}, "tanhfN": {"$rdi": "_FloatN X"}, "tanhfNx": {"$rdi": "_FloatNx X"}, "csinh": {"$rdi": "complex double Z"}, "csinhf": {"$rdi": "complex float Z"}, "csinhl": {"$rdi": "complex long double Z"}, "csinhfN": {"$rdi": "complex _FloatN Z"}, "csinhfNx": {"$rdi": "complex _FloatNx Z"}, "ccosh": {"$rdi": "complex double Z"}, "ccoshf": {"$rdi": "complex float Z"}, "ccoshl": {"$rdi": "complex long double Z"}, "ccoshfN": {"$rdi": "complex _FloatN Z"}, "ccoshfNx": {"$rdi": "complex _FloatNx Z"}, "ctanh": {"$rdi": "complex double Z"}, "ctanhf": {"$rdi": "complex float Z"}, "ctanhl": {"$rdi": "complex long double Z"}, "ctanhfN": {"$rdi": "complex _FloatN Z"}, "ctanhfNx": {"$rdi": "complex _FloatNx Z"}, "asinh": {"$rdi": "double X"}, "asinhf": {"$rdi": "float X"}, "asinhl": {"$rdi": "long double X"}, "asinhfN": {"$rdi": "_FloatN X"}, "asinhfNx": {"$rdi": "_FloatNx X"}, "acosh": {"$rdi": "double X"}, "acoshf": {"$rdi": "float X"}, "acoshl": {"$rdi": "long double X"}, "acoshfN": {"$rdi": "_FloatN X"}, "acoshfNx": {"$rdi": "_FloatNx X"}, "atanh": {"$rdi": "double X"}, "atanhf": {"$rdi": "float X"}, "atanhl": {"$rdi": "long double X"}, "atanhfN": {"$rdi": "_FloatN X"}, "atanhfNx": {"$rdi": "_FloatNx X"}, "casinh": {"$rdi": "complex double Z"}, "casinhf": {"$rdi": "complex float Z"}, "casinhl": {"$rdi": "complex long double Z"}, "casinhfN": {"$rdi": "complex _FloatN Z"}, "casinhfNx": {"$rdi": "complex _FloatNx Z"}, "cacosh": {"$rdi": "complex double Z"}, "cacoshf": {"$rdi": "complex float Z"}, "cacoshl": {"$rdi": "complex long double Z"}, "cacoshfN": {"$rdi": "complex _FloatN Z"}, "cacoshfNx": {"$rdi": "complex _FloatNx Z"}, "catanh": {"$rdi": "complex double Z"}, "catanhf": {"$rdi": "complex float Z"}, "catanhl": {"$rdi": "complex long double Z"}, "catanhfN": {"$rdi": "complex _FloatN Z"}, "catanhfNx": {"$rdi": "complex _FloatNx Z"}, "erf": {"$rdi": "double X"}, "erff": {"$rdi": "float X"}, "erfl": {"$rdi": "long double X"}, "erffN": {"$rdi": "_FloatN X"}, "erffNx": {"$rdi": "_FloatNx X"}, "erfc": {"$rdi": "double X"}, "erfcf": {"$rdi": "float X"}, "erfcl": {"$rdi": "long double X"}, "erfcfN": {"$rdi": "_FloatN X"}, "erfcfNx": {"$rdi": "_FloatNx X"}, "lgamma": {"$rdi": "double X"}, "lgammaf": {"$rdi": "float X"}, "lgammal": {"$rdi": "long double X"}, "lgammafN": {"$rdi": "_FloatN X"}, "lgammafNx": {"$rdi": "_FloatNx X"}, "lgamma_r": {"$rdi": "double X", "$rsi": "int *SIGNP"}, "lgammaf_r": {"$rdi": "float X", "$rsi": "int *SIGNP"}, "lgammal_r": {"$rdi": "long double X", "$rsi": "int *SIGNP"}, "lgammafN_r": {"$rdi": "_FloatN X", "$rsi": "int *SIGNP"}, "lgammafNx_r": {"$rdi": "_FloatNx X", "$rsi": "int *SIGNP"}, "gamma": {"$rdi": "double X"}, "gammaf": {"$rdi": "float X"}, "gammal": {"$rdi": "long double X"}, "tgamma": {"$rdi": "double X"}, "tgammaf": {"$rdi": "float X"}, "tgammal": {"$rdi": "long double X"}, "tgammafN": {"$rdi": "_FloatN X"}, "tgammafNx": {"$rdi": "_FloatNx X"}, "j0": {"$rdi": "double X"}, "j0f": {"$rdi": "float X"}, "j0l": {"$rdi": "long double X"}, "j0fN": {"$rdi": "_FloatN X"}, "j0fNx": {"$rdi": "_FloatNx X"}, "j1": {"$rdi": "double X"}, "j1f": {"$rdi": "float X"}, "j1l": {"$rdi": "long double X"}, "j1fN": {"$rdi": "_FloatN X"}, "j1fNx": {"$rdi": "_FloatNx X"}, "jn": {"$rdi": "int N", "$rsi": "double X"}, "jnf": {"$rdi": "int N", "$rsi": "float X"}, "jnl": {"$rdi": "int N", "$rsi": "long double X"}, "jnfN": {"$rdi": "int N", "$rsi": "_FloatN X"}, "jnfNx": {"$rdi": "int N", "$rsi": "_FloatNx X"}, "y0": {"$rdi": "double X"}, "y0f": {"$rdi": "float X"}, "y0l": {"$rdi": "long double X"}, "y0fN": {"$rdi": "_FloatN X"}, "y0fNx": {"$rdi": "_FloatNx X"}, "y1": {"$rdi": "double X"}, "y1f": {"$rdi": "float X"}, "y1l": {"$rdi": "long double X"}, "y1fN": {"$rdi": "_FloatN X"}, "y1fNx": {"$rdi": "_FloatNx X"}, "yn": {"$rdi": "int N", "$rsi": "double X"}, "ynf": {"$rdi": "int N", "$rsi": "float X"}, "ynl": {"$rdi": "int N", "$rsi": "long double X"}, "ynfN": {"$rdi": "int N", "$rsi": "_FloatN X"}, "ynfNx": {"$rdi": "int N", "$rsi": "_FloatNx X"}, "rand": {"$rdi": "void"}, "srand": {"$rdi": "unsigned int SEED"}, "rand_r": {"$rdi": "unsigned int *SEED"}, "random": {"$rdi": "void"}, "srandom": {"$rdi": "unsigned int SEED"}, "initstate": {"$rdi": "unsigned int SEED", "$rsi": "char *STATE", "$rdx": "size_t SIZE"}, "setstate": {"$rdi": "char *STATE"}, "random_r": {"$rdi": "struct random_data *restrict BUF", "$rsi": "int32_t *restrict RESULT"}, "srandom_r": {"$rdi": "unsigned int SEED", "$rsi": "struct random_data *BUF"}, "initstate_r": {"$rdi": "unsigned int SEED", "$rsi": "char *restrict STATEBUF", "$rdx": "size_t STATELEN", "$r10": "struct random_data *restrict BUF"}, "setstate_r": {"$rdi": "char *restrict STATEBUF", "$rsi": "struct random_data *restrict BUF"}, "drand48": {"$rdi": "void"}, "erand48": {"$rdi": "unsigned short int XSUBI[3]"}, "lrand48": {"$rdi": "void"}, "nrand48": {"$rdi": "unsigned short int XSUBI[3]"}, "mrand48": {"$rdi": "void"}, "jrand48": {"$rdi": "unsigned short int XSUBI[3]"}, "srand48": {"$rdi": "long int SEEDVAL"}, "seed48": {"$rdi": "unsigned short int SEED16V[3]"}, "lcong48": {"$rdi": "unsigned short int PARAM[7]"}, "drand48_r": {"$rdi": "struct drand48_data *BUFFER", "$rsi": "double *RESULT"}, "erand48_r": {"$rdi": "unsigned short int XSUBI[3]", "$rsi": "struct drand48_data *BUFFER", "$rdx": "double *RESULT"}, "lrand48_r": {"$rdi": "struct drand48_data *BUFFER", "$rsi": "long int *RESULT"}, "nrand48_r": {"$rdi": "unsigned short int XSUBI[3]", "$rsi": "struct drand48_data *BUFFER", "$rdx": "long int *RESULT"}, "mrand48_r": {"$rdi": "struct drand48_data *BUFFER", "$rsi": "long int *RESULT"}, "jrand48_r": {"$rdi": "unsigned short int XSUBI[3]", "$rsi": "struct drand48_data *BUFFER", "$rdx": "long int *RESULT"}, "srand48_r": {"$rdi": "long int SEEDVAL", "$rsi": "struct drand48_data *BUFFER"}, "seed48_r": {"$rdi": "unsigned short int SEED16V[3]", "$rsi": "struct drand48_data *BUFFER"}, "lcong48_r": {"$rdi": "unsigned short int PARAM[7]", "$rsi": "struct drand48_data *BUFFER"}, "div": {"$rdi": "int NUMERATOR", "$rsi": "int DENOMINATOR"}, "ldiv": {"$rdi": "long int NUMERATOR", "$rsi": "long int DENOMINATOR"}, "lldiv": {"$rdi": "long long int NUMERATOR", "$rsi": "long long int DENOMINATOR"}, "imaxdiv": {"$rdi": "intmax_t NUMERATOR", "$rsi": "intmax_t DENOMINATOR"}, "isinf": {"$rdi": "double X"}, "isinff": {"$rdi": "float X"}, "isinfl": {"$rdi": "long double X"}, "isnan": {"$rdi": "double X"}, "isnanf": {"$rdi": "float X"}, "isnanl": {"$rdi": "long double X"}, "finite": {"$rdi": "double X"}, "finitef": {"$rdi": "float X"}, "finitel": {"$rdi": "long double X"}, "feclearexcept": {"$rdi": "int EXCEPTS"}, "feraiseexcept": {"$rdi": "int EXCEPTS"}, "fesetexcept": {"$rdi": "int EXCEPTS"}, "fetestexcept": {"$rdi": "int EXCEPTS"}, "fegetexceptflag": {"$rdi": "fexcept_t *FLAGP", "$rsi": "int EXCEPTS"}, "fesetexceptflag": {"$rdi": "const fexcept_t *FLAGP", "$rsi": "int EXCEPTS"}, "fetestexceptflag": {"$rdi": "const fexcept_t *FLAGP", "$rsi": "int EXCEPTS"}, "fegetround": {"$rdi": "void"}, "fesetround": {"$rdi": "int ROUND"}, "fegetenv": {"$rdi": "fenv_t *ENVP"}, "feholdexcept": {"$rdi": "fenv_t *ENVP"}, "fesetenv": {"$rdi": "const fenv_t *ENVP"}, "feupdateenv": {"$rdi": "const fenv_t *ENVP"}, "fegetmode": {"$rdi": "femode_t *MODEP"}, "fesetmode": {"$rdi": "const femode_t *MODEP"}, "feenableexcept": {"$rdi": "int EXCEPTS"}, "fedisableexcept": {"$rdi": "int EXCEPTS"}, "fegetexcept": {"$rdi": "void"}, "abs": {"$rdi": "int NUMBER"}, "labs": {"$rdi": "long int NUMBER"}, "llabs": {"$rdi": "long long int NUMBER"}, "imaxabs": {"$rdi": "intmax_t NUMBER"}, "fabs": {"$rdi": "double NUMBER"}, "fabsf": {"$rdi": "float NUMBER"}, "fabsl": {"$rdi": "long double NUMBER"}, "fabsfN": {"$rdi": "_FloatN NUMBER"}, "fabsfNx": {"$rdi": "_FloatNx NUMBER"}, "cabs": {"$rdi": "complex double Z"}, "cabsf": {"$rdi": "complex float Z"}, "cabsl": {"$rdi": "complex long double Z"}, "cabsfN": {"$rdi": "complex _FloatN Z"}, "cabsfNx": {"$rdi": "complex _FloatNx Z"}, "frexp": {"$rdi": "double VALUE", "$rsi": "int *EXPONENT"}, "frexpf": {"$rdi": "float VALUE", "$rsi": "int *EXPONENT"}, "frexpl": {"$rdi": "long double VALUE", "$rsi": "int *EXPONENT"}, "frexpfN": {"$rdi": "_FloatN VALUE", "$rsi": "int *EXPONENT"}, "frexpfNx": {"$rdi": "_FloatNx VALUE", "$rsi": "int *EXPONENT"}, "ldexp": {"$rdi": "double VALUE", "$rsi": "int EXPONENT"}, "ldexpf": {"$rdi": "float VALUE", "$rsi": "int EXPONENT"}, "ldexpl": {"$rdi": "long double VALUE", "$rsi": "int EXPONENT"}, "ldexpfN": {"$rdi": "_FloatN VALUE", "$rsi": "int EXPONENT"}, "ldexpfNx": {"$rdi": "_FloatNx VALUE", "$rsi": "int EXPONENT"}, "scalb": {"$rdi": "double VALUE", "$rsi": "double EXPONENT"}, "scalbf": {"$rdi": "float VALUE", "$rsi": "float EXPONENT"}, "scalbl": {"$rdi": "long double VALUE", "$rsi": "long double EXPONENT"}, "scalbn": {"$rdi": "double X", "$rsi": "int N"}, "scalbnf": {"$rdi": "float X", "$rsi": "int N"}, "scalbnl": {"$rdi": "long double X", "$rsi": "int N"}, "scalbnfN": {"$rdi": "_FloatN X", "$rsi": "int N"}, "scalbnfNx": {"$rdi": "_FloatNx X", "$rsi": "int N"}, "scalbln": {"$rdi": "double X", "$rsi": "long int N"}, "scalblnf": {"$rdi": "float X", "$rsi": "long int N"}, "scalblnl": {"$rdi": "long double X", "$rsi": "long int N"}, "scalblnfN": {"$rdi": "_FloatN X", "$rsi": "long int N"}, "scalblnfNx": {"$rdi": "_FloatNx X", "$rsi": "long int N"}, "significand": {"$rdi": "double X"}, "significandf": {"$rdi": "float X"}, "significandl": {"$rdi": "long double X"}, "ceil": {"$rdi": "double X"}, "ceilf": {"$rdi": "float X"}, "ceill": {"$rdi": "long double X"}, "ceilfN": {"$rdi": "_FloatN X"}, "ceilfNx": {"$rdi": "_FloatNx X"}, "floor": {"$rdi": "double X"}, "floorf": {"$rdi": "float X"}, "floorl": {"$rdi": "long double X"}, "floorfN": {"$rdi": "_FloatN X"}, "floorfNx": {"$rdi": "_FloatNx X"}, "trunc": {"$rdi": "double X"}, "truncf": {"$rdi": "float X"}, "truncl": {"$rdi": "long double X"}, "truncfN": {"$rdi": "_FloatN X"}, "truncfNx": {"$rdi": "_FloatNx X"}, "rint": {"$rdi": "double X"}, "rintf": {"$rdi": "float X"}, "rintl": {"$rdi": "long double X"}, "rintfN": {"$rdi": "_FloatN X"}, "rintfNx": {"$rdi": "_FloatNx X"}, "nearbyint": {"$rdi": "double X"}, "nearbyintf": {"$rdi": "float X"}, "nearbyintl": {"$rdi": "long double X"}, "nearbyintfN": {"$rdi": "_FloatN X"}, "nearbyintfNx": {"$rdi": "_FloatNx X"}, "round": {"$rdi": "double X"}, "roundf": {"$rdi": "float X"}, "roundl": {"$rdi": "long double X"}, "roundfN": {"$rdi": "_FloatN X"}, "roundfNx": {"$rdi": "_FloatNx X"}, "roundeven": {"$rdi": "double X"}, "roundevenf": {"$rdi": "float X"}, "roundevenl": {"$rdi": "long double X"}, "roundevenfN": {"$rdi": "_FloatN X"}, "roundevenfNx": {"$rdi": "_FloatNx X"}, "lrint": {"$rdi": "double X"}, "lrintf": {"$rdi": "float X"}, "lrintl": {"$rdi": "long double X"}, "lrintfN": {"$rdi": "_FloatN X"}, "lrintfNx": {"$rdi": "_FloatNx X"}, "llrint": {"$rdi": "double X"}, "llrintf": {"$rdi": "float X"}, "llrintl": {"$rdi": "long double X"}, "llrintfN": {"$rdi": "_FloatN X"}, "llrintfNx": {"$rdi": "_FloatNx X"}, "lround": {"$rdi": "double X"}, "lroundf": {"$rdi": "float X"}, "lroundl": {"$rdi": "long double X"}, "lroundfN": {"$rdi": "_FloatN X"}, "lroundfNx": {"$rdi": "_FloatNx X"}, "llround": {"$rdi": "double X"}, "llroundf": {"$rdi": "float X"}, "llroundl": {"$rdi": "long double X"}, "llroundfN": {"$rdi": "_FloatN X"}, "llroundfNx": {"$rdi": "_FloatNx X"}, "fromfp": {"$rdi": "double X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "fromfpf": {"$rdi": "float X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "fromfpl": {"$rdi": "long double X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "fromfpfN": {"$rdi": "_FloatN X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "fromfpfNx": {"$rdi": "_FloatNx X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "ufromfp": {"$rdi": "double X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "ufromfpf": {"$rdi": "float X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "ufromfpl": {"$rdi": "long double X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "ufromfpfN": {"$rdi": "_FloatN X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "ufromfpfNx": {"$rdi": "_FloatNx X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "fromfpx": {"$rdi": "double X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "fromfpxf": {"$rdi": "float X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "fromfpxl": {"$rdi": "long double X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "fromfpxfN": {"$rdi": "_FloatN X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "fromfpxfNx": {"$rdi": "_FloatNx X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "ufromfpx": {"$rdi": "double X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "ufromfpxf": {"$rdi": "float X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "ufromfpxl": {"$rdi": "long double X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "ufromfpxfN": {"$rdi": "_FloatN X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "ufromfpxfNx": {"$rdi": "_FloatNx X", "$rsi": "int ROUND", "$rdx": "unsigned int WIDTH"}, "modf": {"$rdi": "double VALUE", "$rsi": "double *INTEGER-PART"}, "modff": {"$rdi": "float VALUE", "$rsi": "float *INTEGER-PART"}, "modfl": {"$rdi": "long double VALUE", "$rsi": "long double *INTEGER-PART"}, "modffN": {"$rdi": "_FloatN VALUE", "$rsi": "_FloatN *INTEGER-PART"}, "modffNx": {"$rdi": "_FloatNx VALUE", "$rsi": "_FloatNx *INTEGER-PART"}, "fmod": {"$rdi": "double NUMERATOR", "$rsi": "double DENOMINATOR"}, "fmodf": {"$rdi": "float NUMERATOR", "$rsi": "float DENOMINATOR"}, "fmodl": {"$rdi": "long double NUMERATOR", "$rsi": "long double DENOMINATOR"}, "fmodfN": {"$rdi": "_FloatN NUMERATOR", "$rsi": "_FloatN DENOMINATOR"}, "fmodfNx": {"$rdi": "_FloatNx NUMERATOR", "$rsi": "_FloatNx DENOMINATOR"}, "remainder": {"$rdi": "double NUMERATOR", "$rsi": "double DENOMINATOR"}, "remainderf": {"$rdi": "float NUMERATOR", "$rsi": "float DENOMINATOR"}, "remainderl": {"$rdi": "long double NUMERATOR", "$rsi": "long double DENOMINATOR"}, "remainderfN": {"$rdi": "_FloatN NUMERATOR", "$rsi": "_FloatN DENOMINATOR"}, "remainderfNx": {"$rdi": "_FloatNx NUMERATOR", "$rsi": "_FloatNx DENOMINATOR"}, "drem": {"$rdi": "double NUMERATOR", "$rsi": "double DENOMINATOR"}, "dremf": {"$rdi": "float NUMERATOR", "$rsi": "float DENOMINATOR"}, "dreml": {"$rdi": "long double NUMERATOR", "$rsi": "long double DENOMINATOR"}, "copysign": {"$rdi": "double X", "$rsi": "double Y"}, "copysignf": {"$rdi": "float X", "$rsi": "float Y"}, "copysignl": {"$rdi": "long double X", "$rsi": "long double Y"}, "copysignfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "copysignfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "signbit": {"$rdi": "_float-type_ X"}, "nextafter": {"$rdi": "double X", "$rsi": "double Y"}, "nextafterf": {"$rdi": "float X", "$rsi": "float Y"}, "nextafterl": {"$rdi": "long double X", "$rsi": "long double Y"}, "nextafterfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "nextafterfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "nexttoward": {"$rdi": "double X", "$rsi": "long double Y"}, "nexttowardf": {"$rdi": "float X", "$rsi": "long double Y"}, "nexttowardl": {"$rdi": "long double X", "$rsi": "long double Y"}, "nextup": {"$rdi": "double X"}, "nextupf": {"$rdi": "float X"}, "nextupl": {"$rdi": "long double X"}, "nextupfN": {"$rdi": "_FloatN X"}, "nextupfNx": {"$rdi": "_FloatNx X"}, "nextdown": {"$rdi": "double X"}, "nextdownf": {"$rdi": "float X"}, "nextdownl": {"$rdi": "long double X"}, "nextdownfN": {"$rdi": "_FloatN X"}, "nextdownfNx": {"$rdi": "_FloatNx X"}, "nan": {"$rdi": "const char *TAGP"}, "nanf": {"$rdi": "const char *TAGP"}, "nanl": {"$rdi": "const char *TAGP"}, "nanfN": {"$rdi": "const char *TAGP"}, "nanfNx": {"$rdi": "const char *TAGP"}, "canonicalize": {"$rdi": "double *CX", "$rsi": "const double *X"}, "canonicalizef": {"$rdi": "float *CX", "$rsi": "const float *X"}, "canonicalizel": {"$rdi": "long double *CX", "$rsi": "const long double *X"}, "canonicalizefN": {"$rdi": "_FloatN *CX", "$rsi": "const _FloatN *X"}, "canonicalizefNx": {"$rdi": "_FloatNx *CX", "$rsi": "const _FloatNx *X"}, "getpayload": {"$rdi": "const double *X"}, "getpayloadf": {"$rdi": "const float *X"}, "getpayloadl": {"$rdi": "const long double *X"}, "getpayloadfN": {"$rdi": "const _FloatN *X"}, "getpayloadfNx": {"$rdi": "const _FloatNx *X"}, "setpayload": {"$rdi": "double *X", "$rsi": "double PAYLOAD"}, "setpayloadf": {"$rdi": "float *X", "$rsi": "float PAYLOAD"}, "setpayloadl": {"$rdi": "long double *X", "$rsi": "long double PAYLOAD"}, "setpayloadfN": {"$rdi": "_FloatN *X", "$rsi": "_FloatN PAYLOAD"}, "setpayloadfNx": {"$rdi": "_FloatNx *X", "$rsi": "_FloatNx PAYLOAD"}, "setpayloadsig": {"$rdi": "double *X", "$rsi": "double PAYLOAD"}, "setpayloadsigf": {"$rdi": "float *X", "$rsi": "float PAYLOAD"}, "setpayloadsigl": {"$rdi": "long double *X", "$rsi": "long double PAYLOAD"}, "setpayloadsigfN": {"$rdi": "_FloatN *X", "$rsi": "_FloatN PAYLOAD"}, "setpayloadsigfNx": {"$rdi": "_FloatNx *X", "$rsi": "_FloatNx PAYLOAD"}, "totalorder": {"$rdi": "const double *X", "$rsi": "const double *Y"}, "totalorderf": {"$rdi": "const float *X", "$rsi": "const float *Y"}, "totalorderl": {"$rdi": "const long double *X", "$rsi": "const long double *Y"}, "totalorderfN": {"$rdi": "const _FloatN *X", "$rsi": "const _FloatN *Y"}, "totalorderfNx": {"$rdi": "const _FloatNx *X", "$rsi": "const _FloatNx *Y"}, "totalordermag": {"$rdi": "const double *X", "$rsi": "const double *Y"}, "totalordermagf": {"$rdi": "const float *X", "$rsi": "const float *Y"}, "totalordermagl": {"$rdi": "const long double *X", "$rsi": "const long double *Y"}, "totalordermagfN": {"$rdi": "const _FloatN *X", "$rsi": "const _FloatN *Y"}, "totalordermagfNx": {"$rdi": "const _FloatNx *X", "$rsi": "const _FloatNx *Y"}, "fmin": {"$rdi": "double X", "$rsi": "double Y"}, "fminf": {"$rdi": "float X", "$rsi": "float Y"}, "fminl": {"$rdi": "long double X", "$rsi": "long double Y"}, "fminfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fminfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fmax": {"$rdi": "double X", "$rsi": "double Y"}, "fmaxf": {"$rdi": "float X", "$rsi": "float Y"}, "fmaxl": {"$rdi": "long double X", "$rsi": "long double Y"}, "fmaxfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fmaxfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fminmag": {"$rdi": "double X", "$rsi": "double Y"}, "fminmagf": {"$rdi": "float X", "$rsi": "float Y"}, "fminmagl": {"$rdi": "long double X", "$rsi": "long double Y"}, "fminmagfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fminmagfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fmaxmag": {"$rdi": "double X", "$rsi": "double Y"}, "fmaxmagf": {"$rdi": "float X", "$rsi": "float Y"}, "fmaxmagl": {"$rdi": "long double X", "$rsi": "long double Y"}, "fmaxmagfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fmaxmagfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fdim": {"$rdi": "double X", "$rsi": "double Y"}, "fdimf": {"$rdi": "float X", "$rsi": "float Y"}, "fdiml": {"$rdi": "long double X", "$rsi": "long double Y"}, "fdimfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fdimfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fma": {"$rdi": "double X", "$rsi": "double Y", "$rdx": "double Z"}, "fmaf": {"$rdi": "float X", "$rsi": "float Y", "$rdx": "float Z"}, "fmal": {"$rdi": "long double X", "$rsi": "long double Y", "$rdx": "long double Z"}, "fmafN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y", "$rdx": "_FloatN Z"}, "fmafNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y", "$rdx": "_FloatNx Z"}, "fadd": {"$rdi": "double X", "$rsi": "double Y"}, "faddl": {"$rdi": "long double X", "$rsi": "long double Y"}, "daddl": {"$rdi": "long double X", "$rsi": "long double Y"}, "fMaddfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fMaddfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fMxaddfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fMxaddfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fsub": {"$rdi": "double X", "$rsi": "double Y"}, "fsubl": {"$rdi": "long double X", "$rsi": "long double Y"}, "dsubl": {"$rdi": "long double X", "$rsi": "long double Y"}, "fMsubfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fMsubfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fMxsubfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fMxsubfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fmul": {"$rdi": "double X", "$rsi": "double Y"}, "fmull": {"$rdi": "long double X", "$rsi": "long double Y"}, "dmull": {"$rdi": "long double X", "$rsi": "long double Y"}, "fMmulfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fMmulfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fMxmulfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fMxmulfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fdiv": {"$rdi": "double X", "$rsi": "double Y"}, "fdivl": {"$rdi": "long double X", "$rsi": "long double Y"}, "ddivl": {"$rdi": "long double X", "$rsi": "long double Y"}, "fMdivfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fMdivfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "fMxdivfN": {"$rdi": "_FloatN X", "$rsi": "_FloatN Y"}, "fMxdivfNx": {"$rdi": "_FloatNx X", "$rsi": "_FloatNx Y"}, "creal": {"$rdi": "complex double Z"}, "crealf": {"$rdi": "complex float Z"}, "creall": {"$rdi": "complex long double Z"}, "crealfN": {"$rdi": "complex _FloatN Z"}, "crealfNx": {"$rdi": "complex _FloatNx Z"}, "cimag": {"$rdi": "complex double Z"}, "cimagf": {"$rdi": "complex float Z"}, "cimagl": {"$rdi": "complex long double Z"}, "cimagfN": {"$rdi": "complex _FloatN Z"}, "cimagfNx": {"$rdi": "complex _FloatNx Z"}, "conj": {"$rdi": "complex double Z"}, "conjf": {"$rdi": "complex float Z"}, "conjl": {"$rdi": "complex long double Z"}, "conjfN": {"$rdi": "complex _FloatN Z"}, "conjfNx": {"$rdi": "complex _FloatNx Z"}, "carg": {"$rdi": "complex double Z"}, "cargf": {"$rdi": "complex float Z"}, "cargl": {"$rdi": "complex long double Z"}, "cargfN": {"$rdi": "complex _FloatN Z"}, "cargfNx": {"$rdi": "complex _FloatNx Z"}, "cproj": {"$rdi": "complex double Z"}, "cprojf": {"$rdi": "complex float Z"}, "cprojl": {"$rdi": "complex long double Z"}, "cprojfN": {"$rdi": "complex _FloatN Z"}, "cprojfNx": {"$rdi": "complex _FloatNx Z"}, "strtol": {"$rdi": "const char *restrict STRING", "$rsi": "char **restrict TAILPTR", "$rdx": "int BASE"}, "wcstol": {"$rdi": "const wchar_t *restrict STRING", "$rsi": "wchar_t **restrict TAILPTR", "$rdx": "int BASE"}, "strtoul": {"$rdi": "const char *restrict STRING", "$rsi": "char **restrict TAILPTR", "$rdx": "int BASE"}, "wcstoul": {"$rdi": "const wchar_t *restrict STRING", "$rsi": "wchar_t **restrict TAILPTR", "$rdx": "int BASE"}, "strtoll": {"$rdi": "const char *restrict STRING", "$rsi": "char **restrict TAILPTR", "$rdx": "int BASE"}, "wcstoll": {"$rdi": "const wchar_t *restrict STRING", "$rsi": "wchar_t **restrict TAILPTR", "$rdx": "int BASE"}, "strtoq": {"$rdi": "const char *restrict STRING", "$rsi": "char **restrict TAILPTR", "$rdx": "int BASE"}, "wcstoq": {"$rdi": "const wchar_t *restrict STRING", "$rsi": "wchar_t **restrict TAILPTR", "$rdx": "int BASE"}, "strtoull": {"$rdi": "const char *restrict STRING", "$rsi": "char **restrict TAILPTR", "$rdx": "int BASE"}, "wcstoull": {"$rdi": "const wchar_t *restrict STRING", "$rsi": "wchar_t **restrict TAILPTR", "$rdx": "int BASE"}, "strtouq": {"$rdi": "const char *restrict STRING", "$rsi": "char **restrict TAILPTR", "$rdx": "int BASE"}, "wcstouq": {"$rdi": "const wchar_t *restrict STRING", "$rsi": "wchar_t **restrict TAILPTR", "$rdx": "int BASE"}, "strtoimax": {"$rdi": "const char *restrict STRING", "$rsi": "char **restrict TAILPTR", "$rdx": "int BASE"}, "wcstoimax": {"$rdi": "const wchar_t *restrict STRING", "$rsi": "wchar_t **restrict TAILPTR", "$rdx": "int BASE"}, "strtoumax": {"$rdi": "const char *restrict STRING", "$rsi": "char **restrict TAILPTR", "$rdx": "int BASE"}, "wcstoumax": {"$rdi": "const wchar_t *restrict STRING", "$rsi": "wchar_t **restrict TAILPTR", "$rdx": "int BASE"}, "atol": {"$rdi": "const char *STRING"}, "atoi": {"$rdi": "const char *STRING"}, "atoll": {"$rdi": "const char *STRING"}, "strtod": {"$rdi": "const char *restrict STRING", "$rsi": "char **restrict TAILPTR"}, "strtof": {"$rdi": "const char *STRING", "$rsi": "char **TAILPTR"}, "strtold": {"$rdi": "const char *STRING", "$rsi": "char **TAILPTR"}, "strtofN": {"$rdi": "const char *STRING", "$rsi": "char **TAILPTR"}, "strtofNx": {"$rdi": "const char *STRING", "$rsi": "char **TAILPTR"}, "wcstod": {"$rdi": "const wchar_t *restrict STRING", "$rsi": "wchar_t **restrict TAILPTR"}, "wcstof": {"$rdi": "const wchar_t *STRING", "$rsi": "wchar_t **TAILPTR"}, "wcstold": {"$rdi": "const wchar_t *STRING", "$rsi": "wchar_t **TAILPTR"}, "wcstofN": {"$rdi": "const wchar_t *STRING", "$rsi": "wchar_t **TAILPTR"}, "wcstofNx": {"$rdi": "const wchar_t *STRING", "$rsi": "wchar_t **TAILPTR"}, "atof": {"$rdi": "const char *STRING"}, "strfromd": {"$rdi": "char *restrict STRING", "$rsi": "size_t SIZE", "$rdx": "const char *restrict FORMAT", "$r10": "double VALUE"}, "strfromf": {"$rdi": "char *restrict STRING", "$rsi": "size_t SIZE", "$rdx": "const char *restrict FORMAT", "$r10": "float VALUE"}, "strfroml": {"$rdi": "char *restrict STRING", "$rsi": "size_t SIZE", "$rdx": "const char *restrict FORMAT", "$r10": "long double VALUE"}, "strfromfN": {"$rdi": "char *restrict STRING", "$rsi": "size_t SIZE", "$rdx": "const char *restrict FORMAT", "$r10": "_FloatN VALUE"}, "strfromfNx": {"$rdi": "char *restrict STRING", "$rsi": "size_t SIZE", "$rdx": "const char *restrict FORMAT", "$r10": "_FloatNx VALUE"}, "ecvt": {"$rdi": "double VALUE", "$rsi": "int NDIGIT", "$rdx": "int *DECPT", "$r10": "int *NEG"}, "fcvt": {"$rdi": "double VALUE", "$rsi": "int NDIGIT", "$rdx": "int *DECPT", "$r10": "int *NEG"}, "gcvt": {"$rdi": "double VALUE", "$rsi": "int NDIGIT", "$rdx": "char *BUF"}, "qecvt": {"$rdi": "long double VALUE", "$rsi": "int NDIGIT", "$rdx": "int *DECPT", "$r10": "int *NEG"}, "qfcvt": {"$rdi": "long double VALUE", "$rsi": "int NDIGIT", "$rdx": "int *DECPT", "$r10": "int *NEG"}, "qgcvt": {"$rdi": "long double VALUE", "$rsi": "int NDIGIT", "$rdx": "char *BUF"}, "ecvt_r": {"$rdi": "double VALUE", "$rsi": "int NDIGIT", "$rdx": "int *DECPT", "$r10": "int *NEG", "$r8": "char *BUF", "$r9": "size_t LEN"}, "fcvt_r": {"$rdi": "double VALUE", "$rsi": "int NDIGIT", "$rdx": "int *DECPT", "$r10": "int *NEG", "$r8": "char *BUF", "$r9": "size_t LEN"}, "qecvt_r": {"$rdi": "long double VALUE", "$rsi": "int NDIGIT", "$rdx": "int *DECPT", "$r10": "int *NEG", "$r8": "char *BUF", "$r9": "size_t LEN"}, "qfcvt_r": {"$rdi": "long double VALUE", "$rsi": "int NDIGIT", "$rdx": "int *DECPT", "$r10": "int *NEG", "$r8": "char *BUF", "$r9": "size_t LEN"}, "difftime": {"$rdi": "time_t END", "$rsi": "time_t BEGIN"}, "clock": {"$rdi": "void"}, "times": {"$rdi": "struct tms *BUFFER"}, "time": {"$rdi": "time_t *RESULT"}, "clock_gettime": {"$rdi": "clockid_t CLOCK", "$rsi": "struct timespec *TS"}, "clock_getres": {"$rdi": "clockid_t CLOCK", "$rsi": "struct timespec *RES"}, "gettimeofday": {"$rdi": "struct timeval *TP", "$rsi": "void *TZP"}, "clock_settime": {"$rdi": "clockid_t CLOCK", "$rsi": "const struct timespec *TS"}, "ntp_gettime": {"$rdi": "struct ntptimeval *TPTR"}, "ntp_adjtime": {"$rdi": "struct timex *TPTR"}, "adjtime": {"$rdi": "const struct timeval *DELTA", "$rsi": "struct timeval *OLDDELTA"}, "stime": {"$rdi": "const time_t *NEWTIME"}, "adjtimex": {"$rdi": "struct timex *TIMEX"}, "settimeofday": {"$rdi": "const struct timeval *TP", "$rsi": "const void *TZP"}, "localtime": {"$rdi": "const time_t *TIME"}, "localtime_r": {"$rdi": "const time_t *TIME", "$rsi": "struct tm *RESULTP"}, "gmtime": {"$rdi": "const time_t *TIME"}, "gmtime_r": {"$rdi": "const time_t *TIME", "$rsi": "struct tm *RESULTP"}, "mktime": {"$rdi": "struct tm *BROKENTIME"}, "timelocal": {"$rdi": "struct tm *BROKENTIME"}, "timegm": {"$rdi": "struct tm *BROKENTIME"}, "asctime": {"$rdi": "const struct tm *BROKENTIME"}, "asctime_r": {"$rdi": "const struct tm *BROKENTIME", "$rsi": "char *BUFFER"}, "ctime": {"$rdi": "const time_t *TIME"}, "ctime_r": {"$rdi": "const time_t *TIME", "$rsi": "char *BUFFER"}, "strftime": {"$rdi": "char *S", "$rsi": "size_t SIZE", "$rdx": "const char *TEMPLATE", "$r10": "const struct tm *BROKENTIME"}, "wcsftime": {"$rdi": "wchar_t *S", "$rsi": "size_t SIZE", "$rdx": "const wchar_t *TEMPLATE", "$r10": "const struct tm *BROKENTIME"}, "strptime": {"$rdi": "const char *S", "$rsi": "const char *FMT", "$rdx": "struct tm *TP"}, "getdate": {"$rdi": "const char *STRING"}, "getdate_r": {"$rdi": "const char *STRING", "$rsi": "struct tm *TP"}, "tzset": {"$rdi": "void"}, "setitimer": {"$rdi": "int WHICH", "$rsi": "const struct itimerval *NEW", "$rdx": "struct itimerval *OLD"}, "getitimer": {"$rdi": "int WHICH", "$rsi": "struct itimerval *OLD"}, "alarm": {"$rdi": "unsigned int SECONDS"}, "sleep": {"$rdi": "unsigned int SECONDS"}, "nanosleep": {"$rdi": "const struct timespec *REQUESTED_TIME", "$rsi": "struct timespec *REMAINING"}, "getrusage": {"$rdi": "int PROCESSES", "$rsi": "struct rusage *RUSAGE"}, "vtimes": {"$rdi": "struct vtimes *CURRENT", "$rsi": "struct vtimes *CHILD"}, "getrlimit": {"$rdi": "int RESOURCE", "$rsi": "struct rlimit *RLP"}, "getrlimit64": {"$rdi": "int RESOURCE", "$rsi": "struct rlimit64 *RLP"}, "setrlimit": {"$rdi": "int RESOURCE", "$rsi": "const struct rlimit *RLP"}, "setrlimit64": {"$rdi": "int RESOURCE", "$rsi": "const struct rlimit64 *RLP"}, "ulimit": {"$rdi": "int CMD", "$rsi": "..."}, "vlimit": {"$rdi": "int RESOURCE", "$rsi": "int LIMIT"}, "sched_setscheduler": {"$rdi": "pid_t PID", "$rsi": "int POLICY", "$rdx": "const struct sched_param *PARAM"}, "sched_getscheduler": {"$rdi": "pid_t PID"}, "sched_setparam": {"$rdi": "pid_t PID", "$rsi": "const struct sched_param *PARAM"}, "sched_getparam": {"$rdi": "pid_t PID", "$rsi": "struct sched_param *PARAM"}, "sched_get_priority_min": {"$rdi": "int POLICY"}, "sched_get_priority_max": {"$rdi": "int POLICY"}, "sched_rr_get_interval": {"$rdi": "pid_t PID", "$rsi": "struct timespec *INTERVAL"}, "sched_yield": {"$rdi": "void"}, "getpriority": {"$rdi": "int CLASS", "$rsi": "int ID"}, "setpriority": {"$rdi": "int CLASS", "$rsi": "int ID", "$rdx": "int NICEVAL"}, "nice": {"$rdi": "int INCREMENT"}, "sched_getaffinity": {"$rdi": "pid_t PID", "$rsi": "size_t CPUSETSIZE", "$rdx": "cpu_set_t *CPUSET"}, "sched_setaffinity": {"$rdi": "pid_t PID", "$rsi": "size_t CPUSETSIZE", "$rdx": "const cpu_set_t *CPUSET"}, "getcpu": {"$rdi": "unsigned int *cpu", "$rsi": "unsigned int *node"}, "getpagesize": {"$rdi": "void"}, "get_phys_pages": {"$rdi": "void"}, "get_avphys_pages": {"$rdi": "void"}, "get_nprocs_conf": {"$rdi": "void"}, "get_nprocs": {"$rdi": "void"}, "getloadavg": {"$rdi": "double LOADAVG[]", "$rsi": "int NELEM"}, "longjmp": {"$rdi": "jmp_buf STATE", "$rsi": "int VALUE"}, "sigsetjmp": {"$rdi": "sigjmp_buf STATE", "$rsi": "int SAVESIGS"}, "siglongjmp": {"$rdi": "sigjmp_buf STATE", "$rsi": "int VALUE"}, "getcontext": {"$rdi": "ucontext_t *UCP"}, "makecontext": {"$rdi": "ucontext_t *UCP", "$rsi": "void (*FUNC) (void)", "$rdx": "int ARGC", "$r10": "..."}, "setcontext": {"$rdi": "const ucontext_t *UCP"}, "swapcontext": {"$rdi": "ucontext_t *restrict OUCP", "$rsi": "const ucontext_t *restrict UCP"}, "strsignal": {"$rdi": "int SIGNUM"}, "psignal": {"$rdi": "int SIGNUM", "$rsi": "const char *MESSAGE"}, "sigdescr_np": {"$rdi": "int SIGNUM"}, "sigabbrev_np": {"$rdi": "int SIGNUM"}, "signal": {"$rdi": "int SIGNUM", "$rsi": "sighandler_t ACTION"}, "sysv_signal": {"$rdi": "int SIGNUM", "$rsi": "sighandler_t ACTION"}, "ssignal": {"$rdi": "int SIGNUM", "$rsi": "sighandler_t ACTION"}, "sigaction": {"$rdi": "int SIGNUM", "$rsi": "const struct sigaction *restrict ACTION", "$rdx": "struct sigaction *restrict OLD-ACTION"}, "raise": {"$rdi": "int SIGNUM"}, "gsignal": {"$rdi": "int SIGNUM"}, "kill": {"$rdi": "pid_t PID", "$rsi": "int SIGNUM"}, "tgkill": {"$rdi": "pid_t PID", "$rsi": "pid_t TID", "$rdx": "int SIGNUM"}, "killpg": {"$rdi": "int PGID", "$rsi": "int SIGNUM"}, "sigemptyset": {"$rdi": "sigset_t *SET"}, "sigfillset": {"$rdi": "sigset_t *SET"}, "sigaddset": {"$rdi": "sigset_t *SET", "$rsi": "int SIGNUM"}, "sigdelset": {"$rdi": "sigset_t *SET", "$rsi": "int SIGNUM"}, "sigismember": {"$rdi": "const sigset_t *SET", "$rsi": "int SIGNUM"}, "sigprocmask": {"$rdi": "int HOW", "$rsi": "const sigset_t *restrict SET", "$rdx": "sigset_t *restrict OLDSET"}, "sigpending": {"$rdi": "sigset_t *SET"}, "pause": {"$rdi": "void"}, "sigsuspend": {"$rdi": "const sigset_t *SET"}, "sigaltstack": {"$rdi": "const stack_t *restrict STACK", "$rsi": "stack_t *restrict OLDSTACK"}, "sigstack": {"$rdi": "struct sigstack *STACK", "$rsi": "struct sigstack *OLDSTACK"}, "siginterrupt": {"$rdi": "int SIGNUM", "$rsi": "int FAILFLAG"}, "sigblock": {"$rdi": "int MASK"}, "sigsetmask": {"$rdi": "int MASK"}, "sigpause": {"$rdi": "int MASK"}, "getopt": {"$rdi": "int ARGC", "$rsi": "char *const *ARGV", "$rdx": "const char *OPTIONS"}, "getopt_long": {"$rdi": "int ARGC", "$rsi": "char *const *ARGV", "$rdx": "const char *SHORTOPTS", "$r10": "const struct option *LONGOPTS", "$r8": "int *INDEXPTR"}, "getopt_long_only": {"$rdi": "int ARGC", "$rsi": "char *const *ARGV", "$rdx": "const char *SHORTOPTS", "$r10": "const struct option *LONGOPTS", "$r8": "int *INDEXPTR"}, "argp_parse": {"$rdi": "const struct argp *ARGP", "$rsi": "int ARGC", "$rdx": "char **ARGV", "$r10": "unsigned FLAGS", "$r8": "int *ARG_INDEX", "$r9": "void *INPUT"}, "argp_usage": {"$rdi": "const struct argp_state *STATE"}, "argp_error": {"$rdi": "const struct argp_state *STATE", "$rsi": "const char *FMT", "$rdx": "..."}, "argp_failure": {"$rdi": "const struct argp_state *STATE", "$rsi": "int STATUS", "$rdx": "int ERRNUM", "$r10": "const char *FMT", "$r8": "..."}, "argp_state_help": {"$rdi": "const struct argp_state *STATE", "$rsi": "FILE *STREAM", "$rdx": "unsigned FLAGS"}, "argp_help": {"$rdi": "const struct argp *ARGP", "$rsi": "FILE *STREAM", "$rdx": "unsigned FLAGS", "$r10": "char *NAME"}, "getsubopt": {"$rdi": "char **OPTIONP", "$rsi": "char *const *TOKENS", "$rdx": "char **VALUEP"}, "getenv": {"$rdi": "const char *NAME"}, "secure_getenv": {"$rdi": "const char *NAME"}, "putenv": {"$rdi": "char *STRING"}, "setenv": {"$rdi": "const char *NAME", "$rsi": "const char *VALUE", "$rdx": "int REPLACE"}, "unsetenv": {"$rdi": "const char *NAME"}, "clearenv": {"$rdi": "void"}, "getauxval": {"$rdi": "unsigned long int TYPE"}, "syscall": {"$rdi": "long int SYSNO", "$rsi": "..."}, "exit": {"$rdi": "int STATUS"}, "atexit": {"$rdi": "void (*FUNCTION) (void)"}, "on_exit": {"$rdi": "void (*FUNCTION)(int STATUS", "$rsi": "void *ARG)", "$rdx": "void *ARG"}, "abort": {"$rdi": "void"}, "_exit": {"$rdi": "int STATUS"}, "_Exit": {"$rdi": "int STATUS"}, "system": {"$rdi": "const char *COMMAND"}, "getpid": {"$rdi": "void"}, "getppid": {"$rdi": "void"}, "gettid": {"$rdi": "void"}, "fork": {"$rdi": "void"}, "vfork": {"$rdi": "void"}, "execv": {"$rdi": "const char *FILENAME", "$rsi": "char *const ARGV[]"}, "execl": {"$rdi": "const char *FILENAME", "$rsi": "const char *ARG0", "$rdx": "..."}, "execve": {"$rdi": "const char *FILENAME", "$rsi": "char *const ARGV[]", "$rdx": "char *const ENV[]"}, "fexecve": {"$rdi": "int FD", "$rsi": "char *const ARGV[]", "$rdx": "char *const ENV[]"}, "execle": {"$rdi": "const char *FILENAME", "$rsi": "const char *ARG0", "$rdx": "...", "$r10": "char *const ENV[]"}, "execvp": {"$rdi": "const char *FILENAME", "$rsi": "char *const ARGV[]"}, "execlp": {"$rdi": "const char *FILENAME", "$rsi": "const char *ARG0", "$rdx": "..."}, "waitpid": {"$rdi": "pid_t PID", "$rsi": "int *STATUS-PTR", "$rdx": "int OPTIONS"}, "wait": {"$rdi": "int *STATUS-PTR"}, "wait4": {"$rdi": "pid_t PID", "$rsi": "int *STATUS-PTR", "$rdx": "int OPTIONS", "$r10": "struct rusage *USAGE"}, "wait3": {"$rdi": "int *STATUS-PTR", "$rsi": "int OPTIONS", "$rdx": "struct rusage *USAGE"}, "semctl": {"$rdi": "int SEMID", "$rsi": "int SEMNUM", "$rdx": "int CMD"}, "semget": {"$rdi": "key_t KEY", "$rsi": "int NSEMS", "$rdx": "int SEMFLG"}, "semop": {"$rdi": "int SEMID", "$rsi": "struct sembuf *SOPS", "$rdx": "size_t NSOPS"}, "semtimedop": {"$rdi": "int SEMID", "$rsi": "struct sembuf *SOPS", "$rdx": "size_t NSOPS", "$r10": "const struct timespec *TIMEOUT"}, "sem_init": {"$rdi": "sem_t *SEM", "$rsi": "int PSHARED", "$rdx": "unsigned int VALUE"}, "sem_destroy": {"$rdi": "sem_t *SEM"}, "*sem_open": {"$rdi": "const char *NAME", "$rsi": "int OFLAG", "$rdx": "..."}, "sem_close": {"$rdi": "sem_t *SEM"}, "sem_unlink": {"$rdi": "const char *NAME"}, "sem_wait": {"$rdi": "sem_t *SEM"}, "sem_timedwait": {"$rdi": "sem_t *SEM", "$rsi": "const struct timespec *ABSTIME"}, "sem_trywait": {"$rdi": "sem_t *SEM"}, "sem_post": {"$rdi": "sem_t *SEM"}, "sem_getvalue": {"$rdi": "sem_t *SEM", "$rsi": "int *SVAL"}, "ctermid": {"$rdi": "char *STRING"}, "setsid": {"$rdi": "void"}, "getsid": {"$rdi": "pid_t PID"}, "getpgrp": {"$rdi": "void"}, "getpgid": {"$rdi": "pid_t PID"}, "setpgid": {"$rdi": "pid_t PID", "$rsi": "pid_t PGID"}, "setpgrp": {"$rdi": "pid_t PID", "$rsi": "pid_t PGID"}, "tcgetpgrp": {"$rdi": "int FILEDES"}, "tcsetpgrp": {"$rdi": "int FILEDES", "$rsi": "pid_t PGID"}, "tcgetsid": {"$rdi": "int FILDES"}, "getuid": {"$rdi": "void"}, "getgid": {"$rdi": "void"}, "geteuid": {"$rdi": "void"}, "getegid": {"$rdi": "void"}, "getgroups": {"$rdi": "int COUNT", "$rsi": "gid_t *GROUPS"}, "seteuid": {"$rdi": "uid_t NEWEUID"}, "setuid": {"$rdi": "uid_t NEWUID"}, "setreuid": {"$rdi": "uid_t RUID", "$rsi": "uid_t EUID"}, "setegid": {"$rdi": "gid_t NEWGID"}, "setgid": {"$rdi": "gid_t NEWGID"}, "setregid": {"$rdi": "gid_t RGID", "$rsi": "gid_t EGID"}, "setgroups": {"$rdi": "size_t COUNT", "$rsi": "const gid_t *GROUPS"}, "initgroups": {"$rdi": "const char *USER", "$rsi": "gid_t GROUP"}, "getgrouplist": {"$rdi": "const char *USER", "$rsi": "gid_t GROUP", "$rdx": "gid_t *GROUPS", "$r10": "int *NGROUPS"}, "getlogin": {"$rdi": "void"}, "cuserid": {"$rdi": "char *STRING"}, "setutent": {"$rdi": "void"}, "getutent": {"$rdi": "void"}, "endutent": {"$rdi": "void"}, "getutid": {"$rdi": "const struct utmp *ID"}, "getutline": {"$rdi": "const struct utmp *LINE"}, "pututline": {"$rdi": "const struct utmp *UTMP"}, "getutent_r": {"$rdi": "struct utmp *BUFFER", "$rsi": "struct utmp **RESULT"}, "getutid_r": {"$rdi": "const struct utmp *ID", "$rsi": "struct utmp *BUFFER", "$rdx": "struct utmp **RESULT"}, "getutline_r": {"$rdi": "const struct utmp *LINE", "$rsi": "struct utmp *BUFFER", "$rdx": "struct utmp **RESULT"}, "utmpname": {"$rdi": "const char *FILE"}, "updwtmp": {"$rdi": "const char *WTMP_FILE", "$rsi": "const struct utmp *UTMP"}, "setutxent": {"$rdi": "void"}, "getutxent": {"$rdi": "void"}, "endutxent": {"$rdi": "void"}, "getutxid": {"$rdi": "const struct utmpx *ID"}, "getutxline": {"$rdi": "const struct utmpx *LINE"}, "pututxline": {"$rdi": "const struct utmpx *UTMP"}, "utmpxname": {"$rdi": "const char *FILE"}, "getutmp": {"$rdi": "const struct utmpx *UTMPX", "$rsi": "struct utmp *UTMP"}, "getutmpx": {"$rdi": "const struct utmp *UTMP", "$rsi": "struct utmpx *UTMPX"}, "login_tty": {"$rdi": "int FILEDES"}, "login": {"$rdi": "const struct utmp *ENTRY"}, "logout": {"$rdi": "const char *UT_LINE"}, "logwtmp": {"$rdi": "const char *UT_LINE", "$rsi": "const char *UT_NAME", "$rdx": "const char *UT_HOST"}, "getpwuid": {"$rdi": "uid_t UID"}, "getpwuid_r": {"$rdi": "uid_t UID", "$rsi": "struct passwd *RESULT_BUF", "$rdx": "char *BUFFER", "$r10": "size_t BUFLEN", "$r8": "struct passwd **RESULT"}, "getpwnam": {"$rdi": "const char *NAME"}, "getpwnam_r": {"$rdi": ""}, "fgetpwent": {"$rdi": "FILE *STREAM"}, "fgetpwent_r": {"$rdi": "FILE *STREAM", "$rsi": "struct passwd *RESULT_BUF", "$rdx": "char *BUFFER", "$r10": "size_t BUFLEN", "$r8": "struct passwd **RESULT"}, "setpwent": {"$rdi": "void"}, "getpwent": {"$rdi": "void"}, "getpwent_r": {"$rdi": "struct passwd *RESULT_BUF", "$rsi": "char *BUFFER", "$rdx": "size_t BUFLEN", "$r10": "struct passwd **RESULT"}, "endpwent": {"$rdi": "void"}, "putpwent": {"$rdi": "const struct passwd *P", "$rsi": "FILE *STREAM"}, "getgrgid": {"$rdi": "gid_t GID"}, "getgrgid_r": {"$rdi": "gid_t GID", "$rsi": "struct group *RESULT_BUF", "$rdx": "char *BUFFER", "$r10": "size_t BUFLEN", "$r8": "struct group **RESULT"}, "getgrnam": {"$rdi": "const char *NAME"}, "getgrnam_r": {"$rdi": ""}, "fgetgrent": {"$rdi": "FILE *STREAM"}, "fgetgrent_r": {"$rdi": "FILE *STREAM", "$rsi": "struct group *RESULT_BUF", "$rdx": "char *BUFFER", "$r10": "size_t BUFLEN", "$r8": "struct group **RESULT"}, "setgrent": {"$rdi": "void"}, "getgrent": {"$rdi": "void"}, "getgrent_r": {"$rdi": "struct group *RESULT_BUF", "$rsi": "char *BUFFER", "$rdx": "size_t BUFLEN", "$r10": "struct group **RESULT"}, "endgrent": {"$rdi": "void"}, "setnetgrent": {"$rdi": "const char *NETGROUP"}, "getnetgrent": {"$rdi": "char **HOSTP", "$rsi": "char **USERP", "$rdx": "char **DOMAINP"}, "getnetgrent_r": {"$rdi": "char **HOSTP", "$rsi": "char **USERP", "$rdx": "char **DOMAINP", "$r10": "char *BUFFER", "$r8": "size_t BUFLEN"}, "endnetgrent": {"$rdi": "void"}, "innetgr": {"$rdi": "const char *NETGROUP", "$rsi": "const char *HOST", "$rdx": "const char *USER", "$r10": "const char *DOMAIN"}, "gethostname": {"$rdi": "char *NAME", "$rsi": "size_t SIZE"}, "sethostname": {"$rdi": "const char *NAME", "$rsi": "size_t LENGTH"}, "getdomainnname": {"$rdi": "char *NAME", "$rsi": "size_t LENGTH"}, "setdomainname": {"$rdi": "const char *NAME", "$rsi": "size_t LENGTH"}, "gethostid": {"$rdi": "void"}, "sethostid": {"$rdi": "long int ID"}, "uname": {"$rdi": "struct utsname *INFO"}, "setfsent": {"$rdi": "void"}, "endfsent": {"$rdi": "void"}, "getfsent": {"$rdi": "void"}, "getfsspec": {"$rdi": "const char *NAME"}, "getfsfile": {"$rdi": "const char *NAME"}, "setmntent": {"$rdi": "const char *FILE", "$rsi": "const char *MODE"}, "endmntent": {"$rdi": "FILE *STREAM"}, "getmntent": {"$rdi": "FILE *STREAM"}, "getmntent_r": {"$rdi": "FILE *STREAM", "$rsi": "struct mntent *RESULT", "$rdx": "char *BUFFER", "$r10": "int BUFSIZE"}, "addmntent": {"$rdi": "FILE *STREAM", "$rsi": "const struct mntent *MNT"}, "hasmntopt": {"$rdi": "const struct mntent *MNT", "$rsi": "const char *OPT"}, "mount": {"$rdi": ""}, "umount2": {"$rdi": "const char *FILE", "$rsi": "int FLAGS"}, "umount": {"$rdi": "const char *FILE"}, "sysconf": {"$rdi": "int PARAMETER"}, "pathconf": {"$rdi": "const char *FILENAME", "$rsi": "int PARAMETER"}, "fpathconf": {"$rdi": "int FILEDES", "$rsi": "int PARAMETER"}, "confstr": {"$rdi": "int PARAMETER", "$rsi": "char *BUF", "$rdx": "size_t LEN"}, "crypt": {"$rdi": "const char *PHRASE", "$rsi": "const char *SALT"}, "crypt_r": {"$rdi": "const char *PHRASE", "$rsi": "const char *SALT", "$rdx": "struct crypt_data *DATA"}, "getentropy": {"$rdi": "void *BUFFER", "$rsi": "size_t LENGTH"}, "getrandom": {"$rdi": "void *BUFFER", "$rsi": "size_t LENGTH", "$rdx": "unsigned int FLAGS"}, "backtrace": {"$rdi": "void **BUFFER", "$rsi": "int SIZE"}, "backtrace_symbols": {"$rdi": "void *const *BUFFER", "$rsi": "int SIZE"}, "backtrace_symbols_fd": {"$rdi": "void *const *BUFFER", "$rsi": "int SIZE", "$rdx": "int FD"}, "thrd_create": {"$rdi": "thrd_t *THR", "$rsi": "thrd_start_t FUNC", "$rdx": "void *ARG"}, "thrd_current": {"$rdi": "void"}, "thrd_equal": {"$rdi": "thrd_t LHS", "$rsi": "thrd_t RHS"}, "thrd_sleep": {"$rdi": "const struct timespec *TIME_POINT", "$rsi": "struct timespec *REMAINING"}, "thrd_yield": {"$rdi": "void"}, "thrd_exit": {"$rdi": "int RES"}, "thrd_detach": {"$rdi": "thrd_t THR"}, "thrd_join": {"$rdi": "thrd_t THR", "$rsi": "int *RES"}, "call_once": {"$rdi": "once_flag *FLAG", "$rsi": "void (*FUNC) (void)"}, "mtx_init": {"$rdi": "mtx_t *MUTEX", "$rsi": "int TYPE"}, "mtx_lock": {"$rdi": "mtx_t *MUTEX"}, "mtx_timedlock": {"$rdi": "mtx_t *restrict MUTEX", "$rsi": "const struct timespec *restrict TIME_POINT"}, "mtx_trylock": {"$rdi": "mtx_t *MUTEX"}, "mtx_unlock": {"$rdi": "mtx_t *MUTEX"}, "mtx_destroy": {"$rdi": "mtx_t *MUTEX"}, "cnd_init": {"$rdi": "cnd_t *COND"}, "cnd_signal": {"$rdi": "cnd_t *COND"}, "cnd_broadcast": {"$rdi": "cnd_t *COND"}, "cnd_wait": {"$rdi": "cnd_t *COND", "$rsi": "mtx_t *MUTEX"}, "cnd_timedwait": {"$rdi": "cnd_t *restrict COND", "$rsi": "mtx_t *restrict MUTEX", "$rdx": "const struct timespec *restrict TIME_POINT"}, "cnd_destroy": {"$rdi": "cnd_t *COND"}, "tss_create": {"$rdi": "tss_t *TSS_KEY", "$rsi": "tss_dtor_t DESTRUCTOR"}, "tss_set": {"$rdi": "tss_t TSS_KEY", "$rsi": "void *VAL"}, "tss_get": {"$rdi": "tss_t TSS_KEY"}, "tss_delete": {"$rdi": "tss_t TSS_KEY"}, "pthread_key_create": {"$rdi": "pthread_key_t *KEY", "$rsi": "void (*DESTRUCTOR)(void*)"}, "pthread_key_delete": {"$rdi": "pthread_key_t KEY"}, "*pthread_getspecific": {"$rdi": "pthread_key_t KEY"}, "pthread_setspecific": {"$rdi": "pthread_key_t KEY", "$rsi": "const void *VALUE"}, "pthread_getattr_default_np": {"$rdi": "pthread_attr_t *ATTR"}, "pthread_setattr_default_np": {"$rdi": "pthread_attr_t *ATTR"}, "pthread_attr_setsigmask_np": {"$rdi": "pthread_attr_t *ATTR", "$rsi": "const sigset_t *SIGMASK"}, "pthread_attr_getsigmask_np": {"$rdi": "const pthread_attr_t *ATTR", "$rsi": "sigset_t *SIGMASK"}, "sem_clockwait": {"$rdi": "sem_t *SEM", "$rsi": "clockid_t CLOCKID", "$rdx": "const struct timespec *ABSTIME"}, "pthread_cond_clockwait": {"$rdi": ""}, "pthread_rwlock_clockrdlock": {"$rdi": "pthread_rwlock_t *RWLOCK", "$rsi": "clockid_t CLOCKID", "$rdx": "const struct timespec *ABSTIME"}, "pthread_rwlock_clockwrlock": {"$rdi": "pthread_rwlock_t *RWLOCK", "$rsi": "clockid_t CLOCKID", "$rdx": "const struct timespec *ABSTIME"}, "pthread_tryjoin_np": {"$rdi": "pthread_t *THREAD", "$rsi": "void **THREAD_RETURN"}, "pthread_timedjoin_np": {"$rdi": "pthread_t *THREAD", "$rsi": "void **THREAD_RETURN", "$rdx": "const struct timespec *ABSTIME"}, "pthread_clockjoin_np": {"$rdi": ""}, "__ppc_get_timebase": {"$rdi": "void"}, "__ppc_get_timebase_freq": {"$rdi": "void"}, "__ppc_yield": {"$rdi": "void"}, "__ppc_mdoio": {"$rdi": "void"}, "__ppc_mdoom": {"$rdi": "void"}, "__ppc_set_ppr_med": {"$rdi": "void"}, "__ppc_set_ppr_low": {"$rdi": "void"}, "__ppc_set_ppr_med_low": {"$rdi": "void"}, "__ppc_set_ppr_very_low": {"$rdi": "void"}, "__ppc_set_ppr_med_high": {"$rdi": "void"}, "__riscv_flush_icache": {"$rdi": "void *START", "$rsi": "void *END", "$rdx": "unsigned long int FLAGS"}}