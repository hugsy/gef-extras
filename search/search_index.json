{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#extra-goodies-for-gef","title":"Extra goodies for <code>GEF</code>","text":"<p>This is an open repository of external scripts and structures to be used by GEF. As GEF aims to stay a one-file battery-included plugin for GDB, it doesn't allow by nature to be extended with external Python library. GEF-Extras remediates that providing some more extensibility to GEF through:</p> <ul> <li>more commands and functions</li> <li>publicly shared structures for the <code>pcustom</code> command</li> <li>more operating system support</li> <li>more file format support</li> </ul>"},{"location":"#quick-start","title":"Quick start","text":"<p>The biggest requirement for GEF-Extras to work is of course <code>GEF</code>. Please refer to GEF documentation to have it set up (spoiler alert: it's pretty easy \ud83d\ude09). Once GEF is up and running, you can install GEF-Extras.</p>"},{"location":"#automated-installation","title":"Automated installation","text":"<p>Execute and run the installation script from GEF repository.</p> <pre><code>wget -q -O- https://github.com/hugsy/gef/raw/main/scripts/gef-extras.sh | sh\n</code></pre> <p>The script will download (via git) GEF-Extras, and set up your <code>~/.gef.rc</code> file so that you can start straight away.</p> <p>Refer to the installation page for more installation methods.</p>"},{"location":"#contribution","title":"Contribution","text":""},{"location":"#through-pull-requests","title":"Through Pull-Requests","text":"<p>This repository is open for anyone to contribute! Simply drop a PR with the new command/function/feature. One thing to note, GEF and GEF-Extras have become what they are today thanks to an up-to-date documentation, so considering attaching a simple Markdown file to the <code>docs</code> folder explaining your update. IF your code is complex and/or requires further scrutiny, adding CI tests would also be asked during the review process of your PR.</p> <p>For a complete rundown of the commands/functions GEF allows to use out of the box, check out GEF API page to start writing powerful GDB commands using GEF!</p> <p>As a reward, your Github avatar will be immortalize in the list below of contributors to GEF-Extras</p> <p></p>"},{"location":"#feature-requests","title":"Feature requests","text":"<p>Well, that's ok! Just create an Issue explaining what cool feature/idea/command you had in mind! Even better, write the documentation (Markdown format) for your command. It'll make easier for people who wants to integrate it!</p>"},{"location":"#sponsoring","title":"Sponsoring","text":"<p>Sponsoring is another way to help projects to thrive. You can sponsor GEF and GEF-Extras by following this link.</p>"},{"location":"#happy-hacking","title":"Happy hacking \ud83c\udf7b","text":""},{"location":"install/","title":"Installation","text":""},{"location":"install/#installing-gef-extras","title":"Installing GEF-Extras","text":"<p>This page explains to how set up GEF-Extras to work alongside of GEF.</p>"},{"location":"install/#prerequisites","title":"Prerequisites","text":""},{"location":"install/#gdb","title":"GDB","text":"<p>Only GDB 8 and higher is required. It must be compiled with Python 3.6 or higher support. For most people, simply using your distribution package manager should be enough.</p> <p>GEF will then only work for Python 3. If you absolutely require GDB + Python 2, please use GEF-Legacy instead. Note that <code>gef-legacy</code> won't provide new features, and only functional bugs will be handled.</p> <p>You can verify it with the following command:</p> <pre><code>b -nx -ex 'pi print(sys.version)' -ex quit\n</code></pre> <p>This should display your version of Python compiled with <code>gdb</code>.</p> <pre><code>$ gdb -nx -ex 'pi print(sys.version)' -ex quit\n3.6.9 (default, Nov  7 2019, 10:44:02)\n[GCC 8.3.0]\n</code></pre>"},{"location":"install/#gef","title":"GEF","text":"<p>For a quick installation of GEF, you can get started with the following commands:</p> <pre><code># via the install script\n## using curl\n$ bash -c \"$(curl -fsSL https://gef.blah.cat/sh)\"\n\n## using wget\n$ bash -c \"$(wget https://gef.blah.cat/sh -O -)\"\n</code></pre> <p>For more advanced installation methods, refer the installation chapter of the GEF documentation.</p>"},{"location":"install/#python-dependencies","title":"Python dependencies","text":"<p>Because GEF-Extras allows external dependencies, you must make sure to have the adequate Python libraries installed before you can use the features.</p> <p>Thankfully this is easily done in Python, as such:</p> <pre><code>wget -O /tmp/requirements.txt https://raw.githubusercontent.com/hugsy/gef-extras/main/requirements.txt\npython -m pip install --user --upgrade -r /tmp/requirements.txt\n</code></pre>"},{"location":"install/#installation-using-git","title":"Installation using Git","text":"<p>Start with cloning this repo:</p> <pre><code>git clone https://github.com/hugsy/gef-extras\n</code></pre> <p>Add syscall_args and libc_function_args to context layout:</p> <pre><code>gef\u27a4  pi gef.config['context.layout'] += ' syscall_args'\ngef\u27a4  pi gef.config['context.layout'] += ' libc_function_args'\n</code></pre> <p>Add the path to the external scripts to GEF's config:</p> <pre><code>gef\u27a4  gef config gef.extra_plugins_dir /path/to/gef-extras/scripts\n</code></pre> <p>And same for the structures (to be used by <code>pcustom</code> command):</p> <pre><code>gef\u27a4  gef config pcustom.struct_path /path/to/gef-extras/structs\n</code></pre> <p>And for the syscall tables:</p> <pre><code>gef\u27a4  gef config syscall-args.path /path/to/gef-extras/syscall-tables\n</code></pre> <p>And finally for the glibc function call args definition:</p> <pre><code>gef\u27a4  gef config context.libc_args True\ngef\u27a4  gef config context.libc_args_path /path/to/gef-extras/glibc-function-args\n</code></pre> <p>And don't forget to save your settings.</p> <pre><code>gef\u27a4 gef save\n</code></pre> <p>Check out the complete documentation on libc argument support.</p> <p>Note that it is possible to specify multiple directories, separating the paths with a semi-colon:</p> <pre><code>gef\u27a4  gef config gef.extra_plugins_dir /path/to/dir1;/path/to/dir2\n</code></pre> <p>Now run and enjoy all the fun!</p>"},{"location":"archs/arm-blackmagicprobe/","title":"Arm blackmagicprobe","text":""},{"location":"archs/arm-blackmagicprobe/#armblackmagicprobe","title":"ARMBlackMagicProbe","text":"<p>The ARM BlackMagicProbe architecture is a special arcthtecture used with the <code>gef-bmp-remote</code> command. Please read the documentation for the command.</p>"},{"location":"archs/arm-openocd/","title":"Arm openocd","text":""},{"location":"archs/arm-openocd/#armopenocd","title":"ARMOpenOCD","text":"<p>The ARM OpenOCD architecture is a special arcthtecture used with the <code>gef-openocd-remote</code> command. Please read the documentation for the command.</p>"},{"location":"commands/assemble/","title":"assemble","text":""},{"location":"commands/assemble/#command-assemble","title":"Command assemble","text":"<p>If you have installed <code>keystone</code>, then <code>gef</code> will provide a convenient command to assemble native instructions directly to opcodes of the architecture you are currently debugging.</p> <p>Call it via <code>assemble</code> or its alias <code>asm</code>:</p> <pre><code>gef\u27a4 asm [INSTRUCTION [; INSTRUCTION ...]]\n</code></pre> <p></p> <p>By setting the <code>--arch ARCH</code> and <code>--mode MODE</code> the target platform for the assembly can be changed. Available architectures and modes can be displayed with <code>--list-archs</code>.</p> <pre><code>gef\u27a4 asm --list-archs\nAvailable architectures/modes (with endianness):\n- ARM\n  * ARM     (little, big)\n  * THUMB   (little, big)\n  * ARMV8   (little, big)\n  * THUMBV8 (little, big)\n- ARM64\n  * AARCH64 (little)\n- MIPS\n  * MIPS32  (little, big)\n  * MIPS64  (little, big)\n- PPC\n  * PPC32   (big)\n  * PPC64   (little, big)\n- SPARC\n  * SPARC32 (little, big)\n  * SPARC64 (big)\n- SYSTEMZ\n  * SYSTEMZ (little, big)\n- X86\n  * 16      (little)\n  * 32      (little)\n  * 64      (little)\n</code></pre> <pre><code>gef\u27a4 asm --arch x86 --mode 32 [INSTRUCTION [; INSTRUCTION ...]]\ngef\u27a4 asm --arch arm [INSTRUCTION [; INSTRUCTION ...]]\n</code></pre> <p>To choose the endianness use <code>--endian ENDIANNESS</code> (by default, <code>little</code>):</p> <pre><code>gef\u27a4 asm --endian big [INSTRUCTION [; INSTRUCTION ...]]\n</code></pre> <p>Using the <code>--overwrite-location LOCATION</code> option, <code>gef</code> will write the assembly code generated by <code>keystone</code> directly to the memory location specified. This makes it extremely convenient to simply overwrite opcodes.</p> <p></p> <p>Another convenient option is <code>--as-shellcode</code> which outputs the generated shellcode as an escaped python string. It can then easily be used in your python scripts.</p> <p></p>"},{"location":"commands/bincompare/","title":"bincompare","text":""},{"location":"commands/bincompare/#command-bincompare","title":"Command bincompare","text":"<p>The <code>bincompare</code> command will compare a provided binary file with process memory in order to find differences between the two.</p> <p><code>bincompare</code> requires args:</p> <ul> <li><code>-f</code> (for <code>file</code>) - the full path of binary file to be compared.</li> <li><code>-a</code> (for <code>address</code>) - the memory address to be compared with the file data.</li> </ul> <p>You can use the <code>bytearray</code> command to generate the binary file.</p> <p>Example without badchars:</p> <pre><code>gef\u27a4  bincompare -f bytearray.bin -a 0x56557008\n[+] Comparison result:\n    +-----------------------------------------------+\n 00 |00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f| file\n    |                                               | memory\n 10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f| file\n    |                                               | memory\n 20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f| file\n    |                                               | memory\n 30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f| file\n    |                                               | memory\n 40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f| file\n    |                                               | memory\n 50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f| file\n    |                                               | memory\n 60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f| file\n    |                                               | memory\n 70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f| file\n    |                                               | memory\n 80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f| file\n    |                                               | memory\n 90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f| file\n    |                                               | memory\n a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af| file\n    |                                               | memory\n b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf| file\n    |                                               | memory\n c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf| file\n    |                                               | memory\n d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df| file\n    |                                               | memory\n e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef| file\n    |                                               | memory\n f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff| file\n    |                                               | memory\n    +-----------------------------------------------+\n[+] No badchars found!\n</code></pre> <p>Example with badchars and no truncateed buffer:</p> <pre><code>gef\u27a4  bincompare -f bytearray.bin -a 0x56557008\n[+] Comparison result:\n    +-----------------------------------------------+\n 00 |00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f| file\n    |               10                              | memory\n 10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f| file\n    |                                             10| memory\n 20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f| file\n    |                                               | memory\n 30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f| file\n    |                                             2f| memory\n 40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f| file\n    |                                               | memory\n 50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f| file\n    |                                               | memory\n 60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f| file\n    |                                               | memory\n 70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f| file\n    |                                               | memory\n 80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f| file\n    |                                               | memory\n 90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f| file\n    |                                               | memory\n a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af| file\n    |                                               | memory\n b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf| file\n    |                                               | memory\n c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf| file\n    |                                               | memory\n d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df| file\n    |                                               | memory\n e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef| file\n    |                                               | memory\n f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff| file\n    |                                               | memory\n    +-----------------------------------------------+\n[+] Badchars found: 05, 1f, 3f\n</code></pre> <p>Example with badchars and truncated buffer:</p> <pre><code>gef\u27a4  bincompare -f bytearray.bin -a 0x56557008\n[+] Comparison result:\n    +-----------------------------------------------+\n 00 |00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f| file\n    |               10                              | memory\n 10 |10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f| file\n    |                                             10| memory\n 20 |20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f| file\n    |                                               | memory\n 30 |30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f| file\n    |                                             2f| memory\n 40 |40 41 42 43 44 45 46 47 48 49 4a 4b 4c 4d 4e 4f| file\n    |      00 00 01 1b 03 3b 38 00 00 00 06 00 00 00| memory\n 50 |50 51 52 53 54 55 56 57 58 59 5a 5b 5c 5d 5e 5f| file\n    |d4 ef ff ff 80 00 00 00 f4 ef ff ff a4 00 00 00| memory\n 60 |60 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f| file\n    |04 f0 ff ff 54 00 00 00 74 f1 ff ff b8 00 00 00| memory\n 70 |70 71 72 73 74 75 76 77 78 79 7a 7b 7c 7d 7e 7f| file\n    |d4 f1 ff ff 04 01 00 00 d5 f1 ff ff 18 01 00 00| memory\n 80 |80 81 82 83 84 85 86 87 88 89 8a 8b 8c 8d 8e 8f| file\n    |14 00 00 00 00 00 00 00 01 7a 52 00 01 7c 08 01| memory\n 90 |90 91 92 93 94 95 96 97 98 99 9a 9b 9c 9d 9e 9f| file\n    |1b 0c 04 04 88 01 07 08 10 00 00 00 1c 00 00 00| memory\n a0 |a0 a1 a2 a3 a4 a5 a6 a7 a8 a9 aa ab ac ad ae af| file\n    |a8 ef ff ff 36 00 00 00 00 00 00 00 14 00 00 00| memory\n b0 |b0 b1 b2 b3 b4 b5 b6 b7 b8 b9 ba bb bc bd be bf| file\n    |00 00 00 00 01 7a 52 00 01 7c 08 01 1b 0c 04 04| memory\n c0 |c0 c1 c2 c3 c4 c5 c6 c7 c8 c9 ca cb cc cd ce cf| file\n    |88 01 00 00 20 00 00 00 1c 00 00 00 4c ef ff ff| memory\n d0 |d0 d1 d2 d3 d4 d5 d6 d7 d8 d9 da db dc dd de df| file\n    |20 00 00 00 00 0e 08 46 0e 0c 4a 0f 0b 74 04 78| memory\n e0 |e0 e1 e2 e3 e4 e5 e6 e7 e8 e9 ea eb ec ed ee ef| file\n    |00 3f 1a 3b 2a 32 24 22 10 00 00 00 40 00 00 00| memory\n f0 |f0 f1 f2 f3 f4 f5 f6 f7 f8 f9 fa fb fc fd fe ff| file\n    |48 ef ff ff 08 00 00 00 00 00 00 00 48 00 00 00| memory\n    +-----------------------------------------------+\n[+] Corruption after 66 bytes\n[+] Badchars found: 05, 1f, 3f, 42, 43, 44, 45, 46, 47, 48, 49, 4a, 4b, 4c, 4d, 4e, 4f, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 5a, 5b, 5c, 5d, 5e, 5f, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 6a, 6b, 6c, 6d, 6e, 6f, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 7a, 7b, 7c, 7d, 7e, 7f, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 8a, 8b, 8c, 8d, 8e, 8f, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 9a, 9b, 9c, 9d, 9e, 9f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, aa, ab, ac, ad, ae, af, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, ba, bb, bc, bd, be, bf, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, ca, cb, cc, cd, ce, cf, d0, d1, d2, d3, d4, d5, d6, d7, d8, d9, da, db, dc, dd, de, df, e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, ea, eb, ec, ed, ee, ef, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, fa, fb, fc, fd, fe, ff\n</code></pre>"},{"location":"commands/bytearray/","title":"bytearray","text":""},{"location":"commands/bytearray/#command-bytearray","title":"Command bytearray","text":"<p>The <code>bytearray</code> generate a binary with data between 0x01 and 0xff. In general the created file is used to compare (using the <code>bincompare</code> command) with a memory data in order to check badchars.</p> <p><code>bytearray</code> also accepts one option:</p> <ul> <li><code>-b</code> (for <code>badchar</code>) will exclude the bytes to generated byte array.</li> </ul> <p>Example without excluding bytes:</p> <pre><code>gef\u27a4  bytearray\n[+] Generating table, excluding 0 bad chars...\n[+] Dumping table to file\n\"\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0a\\x0b\\x0c\\x0d\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\"\n\"\\x20\\x21\\x22\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\"\n\"\\x40\\x41\\x42\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\"\n\"\\x60\\x61\\x62\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\"\n\"\\x80\\x81\\x82\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\"\n\"\\xa0\\xa1\\xa2\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\"\n\"\\xc0\\xc1\\xc2\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\"\n\"\\xe0\\xe1\\xe2\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\"\n[+] Done, wrote 256 bytes to file bytearray.txt\n\n[+] Binary output saved in bytearray.bin\n</code></pre> <p>Example excluding bytes (0x00, 0x0a and 0x0d):</p> <pre><code>gef\u27a4  bytearray -b \"\\x00\\x0a\\x0d\"\n[+] Generating table, excluding 3 bad chars...\n[+] Dumping table to file\n\"\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x09\\x0b\\x0c\\x0e\\x0f\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1a\\x1b\\x1c\\x1d\\x1e\\x1f\\x20\\x21\\x22\"\n\"\\x23\\x24\\x25\\x26\\x27\\x28\\x29\\x2a\\x2b\\x2c\\x2d\\x2e\\x2f\\x30\\x31\\x32\\x33\\x34\\x35\\x36\\x37\\x38\\x39\\x3a\\x3b\\x3c\\x3d\\x3e\\x3f\\x40\\x41\\x42\"\n\"\\x43\\x44\\x45\\x46\\x47\\x48\\x49\\x4a\\x4b\\x4c\\x4d\\x4e\\x4f\\x50\\x51\\x52\\x53\\x54\\x55\\x56\\x57\\x58\\x59\\x5a\\x5b\\x5c\\x5d\\x5e\\x5f\\x60\\x61\\x62\"\n\"\\x63\\x64\\x65\\x66\\x67\\x68\\x69\\x6a\\x6b\\x6c\\x6d\\x6e\\x6f\\x70\\x71\\x72\\x73\\x74\\x75\\x76\\x77\\x78\\x79\\x7a\\x7b\\x7c\\x7d\\x7e\\x7f\\x80\\x81\\x82\"\n\"\\x83\\x84\\x85\\x86\\x87\\x88\\x89\\x8a\\x8b\\x8c\\x8d\\x8e\\x8f\\x90\\x91\\x92\\x93\\x94\\x95\\x96\\x97\\x98\\x99\\x9a\\x9b\\x9c\\x9d\\x9e\\x9f\\xa0\\xa1\\xa2\"\n\"\\xa3\\xa4\\xa5\\xa6\\xa7\\xa8\\xa9\\xaa\\xab\\xac\\xad\\xae\\xaf\\xb0\\xb1\\xb2\\xb3\\xb4\\xb5\\xb6\\xb7\\xb8\\xb9\\xba\\xbb\\xbc\\xbd\\xbe\\xbf\\xc0\\xc1\\xc2\"\n\"\\xc3\\xc4\\xc5\\xc6\\xc7\\xc8\\xc9\\xca\\xcb\\xcc\\xcd\\xce\\xcf\\xd0\\xd1\\xd2\\xd3\\xd4\\xd5\\xd6\\xd7\\xd8\\xd9\\xda\\xdb\\xdc\\xdd\\xde\\xdf\\xe0\\xe1\\xe2\"\n\"\\xe3\\xe4\\xe5\\xe6\\xe7\\xe8\\xe9\\xea\\xeb\\xec\\xed\\xee\\xef\\xf0\\xf1\\xf2\\xf3\\xf4\\xf5\\xf6\\xf7\\xf8\\xf9\\xfa\\xfb\\xfc\\xfd\\xfe\\xff\"\n[+] Done, wrote 253 bytes to file bytearray.txt\n[+] Binary output saved in bytearray.bin\n</code></pre>"},{"location":"commands/capstone-disassemble/","title":"capstone","text":""},{"location":"commands/capstone-disassemble/#command-capstone-disassemble","title":"Command capstone-disassemble","text":"<p>If you have installed the <code>capstone</code> library and its Python bindings, you can use it to disassemble any memory in your debugging session. This plugin was created to offer an alternative to <code>GDB</code>'s disassemble function which sometimes gets things mixed up.</p> <p>You can use its alias <code>cs-disassemble</code> or just <code>cs</code> with the location to disassemble at. If not specified, it will use <code>$pc</code>.</p> <pre><code>gef\u27a4 cs main+0x10\n</code></pre> <p></p> <p>Disassemble more instructions</p> <pre><code>gef\u27a4 cs --length 20\n</code></pre> <p>Show opcodes next to disassembly</p> <pre><code>gef\u27a4 cs --show-opcodes\n</code></pre>"},{"location":"commands/error/","title":"error","text":""},{"location":"commands/error/#command-error","title":"Command <code>error</code>","text":"<p>A basic equivalent to WinDbg <code>!error</code> command.</p> <p>If a debugging session is active, <code>error</code> can be used with no argument: the command will use the <code>return_register</code> of the current architecture associated to the binary.</p> <pre><code>[ Legend: Modified register | Code | Heap | Stack | String ]\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 registers \u2500\u2500\u2500\u2500\n$rax   : 0x1\n[...]\ngef\u27a4 error\n1 (0x1) : Operation not permitted\n</code></pre> <p>Otherwise, an argument is expected: this argument can be a debugging symbol (for instance a register) or the integer holding the error code to translate:</p> <pre><code>gef\u27a4 error 42\n42 (0x2a) : No message of desired type\n</code></pre> <pre><code>gef\u27a4 eq $sp 0x1337\ngef\u27a4 error *(int*)$sp\n4919 (0x1337) : Unknown error 4919\n</code></pre>"},{"location":"commands/ftrace/","title":"ftrace","text":""},{"location":"commands/ftrace/#command-ftrace","title":"Command ftrace","text":"<p>A quick'n dirty function tracer scripts for GEF.</p> <p>To use:</p> <pre><code>gef\u27a4 ftrace &lt;function_name1&gt;,&lt;num_of_args&gt; &lt;function_name2&gt;,&lt;num_of_args&gt;  ...\n</code></pre> <p>Example:</p> <pre><code>gef\u27a4 ftrace malloc,1 calloc,2 free,1\n</code></pre>"},{"location":"commands/gef-bmp-remote/","title":"Gef bmp remote","text":""},{"location":"commands/gef-bmp-remote/#command-gef-bmp-remote","title":"Command gef-bmp-remote","text":"<p>The <code>gef-bmp-command</code> is used with the [<code>ARMBlackMagicProbe</code>](../../archs/arm-blackmagicprobe.py] architecture.</p> <p>The Black Magic Probe is a JTAG/SWD debugger that handles communicating with your device and exposes a gdbserver for GDB to connect to. This allows you to connect to it via GDB with the <code>target extended-remote</code> command. However, because this is exposed via a tty, GEF cannot handle it with its <code>gef-remote</code> command (which assumes a host:port connection). The arm-blackmagicprobe.py script offers a way around this. It creates a custom ARM-derived <code>Architecture</code>, as well as the <code>gef-bmp-remote</code> command, which lets you scan for devices, power the target, and ultimately connect to the target device.</p>"},{"location":"commands/gef-bmp-remote/#scan-for-devices","title":"Scan for devices","text":"<pre><code>gef\u27a4  gef-bmp-remote --scan /dev/ttyUSB1\"\n[=] [remote] Executing 'monitor swdp_scan'\nTarget voltage: 3.3V\nAvailable Targets:\nNo. Att Driver\n 1      Raspberry RP2040 M0+\n 2      Raspberry RP2040 M0+\n 3      Raspberry RP2040 Rescue (Attach to reset!)\n</code></pre> <p>This will connect to the BMP and use its scan feature to find valid targets connected. They will be numbered. Use the appropriate number to later <code>--attach</code>.</p> <p>If you are powering the device through the BMP, then make sure to add the <code>--power</code> arguments, otherwise the target may not be powered up when you attempt the scan.</p> <p>If you want to keep power between scanning and attaching, then use <code>--keep-power</code>.</p> <pre><code>gef\u27a4  gef-bmp-remote --file /path/to/binary.elf --attach 1 /dev/ttyUSB1\",\ngef\u27a4  gef-bmp-remote --file /path/to/binary.elf --attach 1 --power /dev/ttyUSB1\",\n</code></pre>"},{"location":"commands/gef-openocd-remote/","title":"Gef openocd remote","text":""},{"location":"commands/gef-openocd-remote/#command-gef-openocd-remote","title":"Command gef-openocd-remote","text":"<p>The <code>gef-openocd-command</code> is used with the [<code>ARMOpenOCD</code>](../../archs/arm-openocd.py] architecture.</p> <p>The arm-openocd.py script adds an easy way to extend the <code>gef-remote</code> functionality to easily debug ARM targets using a OpenOCD gdbserver. It creates a custom ARM-derived <code>Architecture</code>, as well as the <code>gef-openocd-remote</code> command, which lets you easily connect to the target, optionally loading the accompanying ELF binary.</p>"},{"location":"commands/gef-openocd-remote/#usage","title":"Usage","text":"<pre><code>gef-openocd-remote localhost 3333 --file /path/to/elf\n</code></pre>"},{"location":"commands/glibc_function_args/","title":"Glibc function args","text":""},{"location":"commands/glibc_function_args/#glibc-function-call-arguments-definition","title":"Glibc function call arguments definition","text":"<p>This directory holds json used to print better definition of glibc function arguments. Arguments' definitions are taken from glibc manual, and can be used as a kind reminder.</p> <p>For example, the arguments for a <code>read@plt</code> would currently look like this:</p> <p></p> <p>But using this feature, it will instead look like this:</p> <p></p> <p>Functions are detected if they end with <code>@plt</code>, which means that static binaries won't benefit from this.</p> <p>User has to set two context configurations:</p> <ul> <li><code>context.libc_args</code>: boolean, set to <code>True</code> to use this feature</li> <li><code>context.libc_args_path</code>: string, must be set to the directory where the libc definition json    files can be found</li> </ul> <p>The script <code>generate_glibc_args_json.py</code> is used to create provided json files. It works by parsing glibc manual text, can be downloaded from https://www.gnu.org/software/libc/manual/text/libc.txt.gz and saved in the current directory.</p>"},{"location":"commands/got-audit/","title":"Got audit","text":""},{"location":"commands/got-audit/#command-got-audit","title":"Command <code>got-audit</code>","text":"<p>Display the current state of GOT table of the running process.</p> <p>The <code>got-audit</code> command optionally takes function names and filters the output displaying only the matching functions.</p> <p>The command output will list symbols in the GOT along with the file providing the mapped memory where the symbol's value points.</p> <p>If the file providing the mapped memory doesn't export the symbol, <code>got-audit</code> will print an error.  If multiple files export the named symbol, <code>got-audit</code> will print an error.</p> <pre><code>gef\u27a4 got-audit\n</code></pre> <p></p> <p>The applied filter partially matches the name of the functions, so you can do something like this.</p> <pre><code>gef\u27a4 got-audit str\ngef\u27a4 got-audit print\ngef\u27a4 got-audit read\n</code></pre> <p></p> <p>Example of multiple partial filters:</p> <pre><code>gef\u27a4 got-audit str get\n</code></pre> <p></p>"},{"location":"commands/ida-rpyc/","title":"ida-rpyc","text":""},{"location":"commands/ida-rpyc/#command-ida-interact","title":"Command ida-interact","text":"<p><code>gef</code> provides a simple XML-RPC client designed to communicate with a server running inside a specific IDA Python plugin, called <code>ida_gef.py</code>.</p> <p>Simply download this script, and run it inside IDA. When the server is running, you should see some output:</p> <pre><code>[+] Creating new thread for XMLRPC server: Thread-1\n[+] Starting XMLRPC server: 0.0.0.0:1337\n[+] Registered 12 functions.\n</code></pre> <p>This indicates that IDA is ready to work with <code>gef</code>!</p> <p><code>gef</code> can interact with it via the command <code>ida-interact</code> (alias <code>ida</code>). This command expects the name of the function to execute as the first argument, all the other arguments are the arguments of the remote function.</p> <p>To enumerate the functions available, simply run</p> <pre><code>gef\u27a4  ida-interact -h\n</code></pre> <p></p> <p>Now, to execute an RPC, invoke the command <code>ida-interact</code> on the desired method, with its arguments (if required).</p> <p>For example:</p> <pre><code>gef\u27a4  ida setcolor 0x40061E\n</code></pre> <p>will edit the remote IDB and set the background color of the location 0x40061E with the color 0x005500 (default value).</p> <p>Another convenient example is to add comment inside IDA directly from <code>gef</code>:</p> <pre><code>gef\u27a4  ida makecomm 0x40060C \"&lt;&lt;&lt;--- stack overflow\"\n[+] Success\n</code></pre> <p>Result:</p> <p></p> <p>Please use the <code>-h</code> argument to see all the methods available and their syntax.</p> <p>It is also note-worthy that Binary Ninja support has be added: , by using the Binary Ninja plugin <code>gef-binja.py</code>.</p>"},{"location":"commands/is-syscall/","title":"is-syscall","text":""},{"location":"commands/is-syscall/#command-is-syscall","title":"Command is-syscall","text":"<p><code>gef</code> can be used to determine whether the instruction to be executed next is a system call.</p> <p>To use it, simply run</p> <pre><code>gef\u27a4 is-syscall\n</code></pre> <p>If it is a system call,</p> <pre><code>gef\u27a4 is-syscall\n[+] Current instruction is a syscall\n</code></pre> <p>Check this asciicast for visual example:</p> <p></p>"},{"location":"commands/ksymaddr/","title":"ksymaddr","text":""},{"location":"commands/ksymaddr/#command-ksymaddr","title":"Command <code>ksymaddr</code>","text":"<p><code>ksymaddr</code> helps locate a kernel symbol by its name.</p> <p>The syntax is straight forward:</p> <pre><code>ksymaddr &lt;PATTERN&gt;\n</code></pre> <p>For example,</p> <pre><code>gef\u27a4  ksymaddr commit_creds\n[+] Found matching symbol for 'commit_creds' at 0xffffffff8f495740 (type=T)\n[*] Found partial match for 'commit_creds' at 0xffffffff8f495740 (type=T): commit_creds\n[*] Found partial match for 'commit_creds' at 0xffffffff8fc71ee0 (type=R): __ksymtab_commit_creds\n[*] Found partial match for 'commit_creds' at 0xffffffff8fc8d008 (type=r): __kcrctab_commit_creds\n[*] Found partial match for 'commit_creds' at 0xffffffff8fc9bfcd (type=r): __kstrtab_commit_creds\n</code></pre> <p>Note that the debugging process needs to have the correct permissions for this command to show kernel addresses. For more information see also this stackoverflow post.</p>"},{"location":"commands/peekpointers/","title":"peekpointers","text":""},{"location":"commands/peekpointers/#command-peekpointers","title":"Command <code>peekpointers</code>","text":"<p>Author: bkth</p> <p>This command helps find pointers belonging to other memory regions helpful in case of OOB Read when looking for specific pointers</p> <p>Syntax:</p> <pre><code>gef\u27a4  peek-pointers LOCATION [section-name]\n</code></pre> <p>Examples:</p> <pre><code>gef\u27a4  peek-pointers 0x55555575c000\ncat pointer at 0x55555575c008, value 0x55555575c008\n[stack] pointer at 0x55555575c0c0, value 0x7fffffffe497\nlibc-2.24.so pointer at 0x55555575c0c8, value 0x7ffff7dd2600 &lt;_IO_2_1_stdout_&gt;\n[heap] pointer at 0x55555575d038, value 0x55555575d010\nlocale-archive pointer at 0x55555575d0b8, value 0x7ffff774e5c0\nCould not read from address 0x55555577e000, stopping.\n</code></pre> <pre><code>gef\u27a4  peek-pointers 0x55555575c000 libc-2.24.so\nlibc-2.24.so pointer at 0x55555575c0c8, value 0x7ffff7dd2600 &lt;_IO_2_1_stdout_&gt;\ngef\u27a4  peek-pointers 0x55555575c000 libc-2.24.so all\nlibc-2.24.so pointer at 0x55555575c0c8, value 0x7ffff7dd2600 &lt;_IO_2_1_stdout_&gt;\nlibc-2.24.so pointer at 0x55555575c0e0, value 0x7ffff7dd2520 &lt;_IO_2_1_stderr_&gt;\nlibc-2.24.so pointer at 0x55555575dfe8, value 0x7ffff7ba1b40 &lt;_nl_default_dirname&gt;\nCould not read from address 0x55555577e000, stopping.\n</code></pre>"},{"location":"commands/retdec/","title":"retdec","text":""},{"location":"commands/retdec/#command-retdec","title":"Command <code>retdec</code>","text":"<p><code>gef</code> uses the RetDec decompiler (https://github.com/avast/retdec) to decompile parts of or entire binary. The command, <code>retdec</code>, also has a default alias, <code>decompile</code> to make it easier to remember.</p> <p>To use the command, you need to provide <code>gef</code> the path to a retdec installation. The compiled source can be found on the releases page.</p> <pre><code>cd /opt\nwget https://github.com/avast/retdec/releases/download/v4.0/retdec-v4.0-ubuntu-64b.tar.xz\ntar xvf retdec-v4.0-ubuntu-64b.tar.xz\n</code></pre> <p>Then enter the path the <code>gef config</code> command:</p> <pre><code>gef\u27a4 gef config retdec.retdec_path /opt/retdec\n</code></pre> <p>You can have <code>gef</code> save this path by saving the current configuration settings.</p> <pre><code>gef\u27a4 gef save\n</code></pre> <p><code>retdec</code> can be used in 3 modes:</p> <ul> <li>By providing the option <code>-a</code>, <code>gef</code> will submit the entire binary being    debugged to RetDec. For example,</li> </ul> <pre><code>gef\u27a4 decompile -a\n</code></pre> <p></p> <ul> <li> <p>By providing the option <code>-r START:END</code>, <code>gef</code> will submit only the raw    bytes contained within the range specified as argument.</p> </li> <li> <p>By providing the option <code>-s SYMBOL</code>, <code>gef</code> will attempt to reach a specific    function symbol, dump the function in a temporary file, and submit it to    RetDec. For example,</p> </li> </ul> <pre><code>gef\u27a4 decompile -s main\n</code></pre> <p></p>"},{"location":"commands/retdec/#syntax-highlighting","title":"Syntax Highlighting","text":"<p>Retdec now supports syntax highlighting for all C decompilations with the use of Pygments.</p> <p>Available themes can be found here.</p> <p>You can change themes by running</p> <pre><code>gef config retdec.theme THEME_NAME\ngef save # remember to save your config!\n</code></pre>"},{"location":"commands/ropper/","title":"ropper","text":""},{"location":"commands/ropper/#command-ropper","title":"Command ropper","text":"<p><code>ropper</code> is a gadget finding tool, easily installable via <code>pip</code>. It provides a very convenient <code>--search</code> function to search gadgets from a regular expression:</p> <p></p> <p><code>ropper</code> comes with a full set of options, all documented from the <code>--help</code> menu.</p>"},{"location":"commands/set-permission/","title":"set-permission","text":""},{"location":"commands/set-permission/#command-set-permission","title":"Command set-permission","text":"<p>This command was added to facilitate the exploitation process, by changing the permissions on a specific memory page directly from the debugger.</p> <p>By default, GDB does not allow you to do that, so the command will modify a code section of the binary being debugged, and add a native <code>mprotect</code> syscall stub. For example, for x86, the following stub will be inserted:</p> <pre><code>pushad\npushfd\nmov eax, mprotect_syscall_num\nmov ebx, address_of_the_page\nmov ecx, size_of_the_page\nmov edx, permission_to_set\nint 0x80\npopfd\npopad\n</code></pre> <p>A breakpoint is added following this stub, which when hit will restore the original context, allowing you to resume execution.</p> <p>The usage is</p> <pre><code>gef\u27a4 set-permission address [permission]\n</code></pre> <p>The <code>permission</code> can be set using a bitmask as integer with read (1), write (2) and execute (4). For combinations of these permissions they can just be added: Read and Execute permission would be 1 + 4 = 5.</p> <p><code>mprotect</code> is an alias for <code>set-permission</code>. As an example, to set the <code>stack</code> as READ|WRITE|EXECUTE on this binary,</p> <p></p> <p>Simply run</p> <pre><code>gef\u27a4 mprotect 0xfffdd000\n</code></pre> <p>Et voil\u00e0! GEF will use the memory runtime information to correctly adjust the permissions of the entire section.</p> <p></p> <p>Or for a full demo video on an AARCH64 VM:</p> <p></p>"},{"location":"commands/skel/","title":"exploit-template","text":""},{"location":"commands/skel/#command-skel","title":"Command skel","text":"<p><code>skel</code> prepares quickly a <code>pwntools</code> based exploit template for both local and remote targets, based on the currently debugged file.</p>"},{"location":"commands/skel/#how-to-use","title":"How-To use","text":""},{"location":"commands/skel/#with-a-local-target","title":"With a local target","text":"<pre><code>gef\u27a4 skel local\n</code></pre>"},{"location":"commands/skel/#with-a-remote-target","title":"With a remote target","text":"<pre><code>gef\u27a4 skel remote=TARGET:PORT\n</code></pre>"},{"location":"commands/syscall-args/","title":"syscall-args","text":""},{"location":"commands/syscall-args/#command-syscall-args","title":"Command syscall-args","text":"<p>Often it is troublesome to have to refer to syscall tables every time we encounter a system call instruction. <code>gef</code> can be used to determine the system call being invoked and the arguments being passed to it. Requires gef-extras.</p> <p>To use it, simply run</p> <pre><code>gef\u27a4 syscall-args\n</code></pre> <p>For instance,</p> <pre><code>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500[ registers ]\u2500\u2500\u2500\u2500\n$rax   : 0x0000000000000001\n$rbx   : 0x0000000000000045\n$rcx   : 0x00000000fbad2a84\n$rdx   : 0x0000000000000045\n$rsp   : 0x00007fffffffdbf8  \u2192  0x00007ffff786f4bd  \u2192  &lt;_IO_file_write+45&gt; test rax, rax\n$rbp   : 0x0000555555775510  \u2192  \"alarm@192.168.0.100\\t\\t  how2heap\\t\\t\\t\\t\\t\\t\\t   [...]\"\n$rsi   : 0x0000555555775510  \u2192  \"alarm@192.168.0.100\\t\\t  how2heap\\t\\t\\t\\t\\t\\t\\t   [...]\"\n$rdi   : 0x0000000000000001\n$rip   : 0x00007ffff78de132  \u2192  &lt;write+18&gt; syscall\n$r8    : 0x0000555555783b44  \u2192  0x0000000000000066 (\"f\"?)\n$r9    : 0x0000000000000000\n$r10   : 0x0000000000002000\n$r11   : 0x00007fffffffb940  \u2192  0x7669006666757473 (\"stuff\"?)\n$r12   : 0x00007ffff7bab760  \u2192  0x00000000fbad2a84\n$r13   : 0x0000000000000045\n$r14   : 0x00007ffff7ba6760  \u2192  0x0000000000000000\n$r15   : 0x0000000000000045\n$eflags: [carry PARITY adjust ZERO sign trap INTERRUPT direction overflow resume virtualx86 identification]\n$cs: 0x0033  $gs: 0x0000  $ss: 0x002b  $es: 0x0000  $fs: 0x0000  $ds: 0x0000\n\n...\n\ngef\u27a4  syscall-args\n[+] Detected syscall write\n    write(unsigned int fd, const char *buf, size_t count)\n[+] Parameter       Register        Value\n    fd              $rdi            0x1\n    buf             $rsi            0x555555775510  \u2192  \"file1\\t\\t  file2\\t\\t\\t\\t\\t\\t\\t   [...]\"\n    count           $rdx            0x45\n</code></pre> <p>Check this asciicast for visual example:</p> <p></p>"},{"location":"commands/unicorn-emulate/","title":"emulate","text":""},{"location":"commands/unicorn-emulate/#command-unicorn-emulate","title":"Command unicorn-emulate","text":"<p>If you have installed <code>unicorn</code> emulation engine and its Python bindings, GEF integrates a new command to emulate instructions of your current debugging context !</p> <p>This <code>unicorn-emulate</code> command (or its alias <code>emu</code>) will replicate the current memory mapping (including the page permissions) for you, and by default (i.e. without any additional argument), it will emulate the execution of the instruction about to be executed (i.e. the one pointed by <code>$pc</code>). Furthermore the command will print out the state of the registers before and after the emulation.</p> <p>Use <code>-h</code> for help:</p> <pre><code>gef\u27a4 emu -h\n</code></pre> <p>For example, the following command will emulate only the next 2 instructions:</p> <pre><code>gef\u27a4 emu 2\n</code></pre> <p>And show this:</p> <p></p> <p>In this example, we can see that after executing</p> <pre><code>0x555555555171 &lt;main+8&gt;         sub    rsp, 0x10\n0x555555555175 &lt;main+12&gt;        mov    edi, 0x100\n</code></pre> <p>The registers <code>rsp</code> and <code>rdi</code> are tainted (modified).</p> <p>A convenient option is <code>--output-file /path/to/file.py</code> that will generate a pure Python script embedding your current execution context, ready to be re-used outside GEF!! This can be useful for dealing with obfuscation or solve crackmes if powered with a SMT for instance.</p>"},{"location":"commands/visualize_heap/","title":"visualize_heap","text":""},{"location":"commands/visualize_heap/#command-visualize-libc-heap-chunks","title":"Command <code>visualize-libc-heap-chunks</code>","text":"<p>Alias: <code>heap-view</code></p> <p>This plugin aims to provide an ASCII-based simplistic representation of the heap layout.</p> <p>Currently only the glibc heap support is implemented. The command doesn't take argument, and display the heap layout. It also aggregates similar lines for better readability:</p> <pre><code>gef\u27a4  visualize-libc-heap-chunks\n</code></pre> <p></p>"},{"location":"commands/windbg/","title":"windbg","text":""},{"location":"commands/windbg/#windbg-compatibility-layer","title":"WinDbg compatibility layer","text":"<p>This plugin is a set of commands, aliases and extensions to mimic some of the most common WinDbg commands into GEF.</p>"},{"location":"commands/windbg/#commands","title":"Commands","text":"<ul> <li><code>hh</code> - open GEF help in web browser</li> <li><code>sxe</code> (set-exception-enable): break on loading libraries</li> <li><code>tc</code> - trace to next call</li> <li><code>pc</code> - run until call.</li> <li><code>g</code> - go.</li> <li><code>u</code> - disassemble.</li> <li><code>x</code> - search symbol.</li> <li><code>r</code> - register info</li> </ul>"},{"location":"commands/windbg/#settings","title":"Settings","text":"<ul> <li><code>gef.use-windbg-prompt</code> - set to <code>True</code> to change the prompt like <code>0:000 \u27a4</code></li> </ul>"},{"location":"commands/windbg/#aliases","title":"Aliases","text":"<p>Loading this plugin will automatically define the following aliases</p> Alias Command <code>da</code> <code>display s</code> <code>dt</code> <code>pcustom</code> <code>dq</code> <code>hexdump qword</code> <code>dd</code> <code>hexdump dword</code> <code>dw</code> <code>hexdump word</code> <code>db</code> <code>hexdump byte</code> <code>eq</code> <code>patch qword</code> <code>ed</code> <code>patch dword</code> <code>ew</code> <code>patch word</code> <code>eb</code> <code>patch byte</code> <code>ea</code> <code>patch string</code> <code>dps</code> <code>dereference</code> <code>bp</code> <code>break</code> <code>bl</code> <code>info breakpoints</code> <code>bd</code> <code>disable breakpoints</code> <code>bc</code> <code>delete breakpoints</code> <code>be</code> <code>enable breakpoints</code> <code>tbp</code> <code>tbreak</code> <code>s</code> <code>grep</code> <code>pa</code> <code>advance</code> <code>kp</code> <code>info stack</code> <code>ptc</code> <code>finish</code> <code>uf</code> <code>disassemble</code>"}]}