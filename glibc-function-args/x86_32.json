{"strerror": {"[sp + 0x0]": "int ERRNUM"}, "strerror_r": {"[sp + 0x0]": "int ERRNUM", "[sp + 0x4]": "char *BUF", "[sp + 0x8]": "size_t N"}, "perror": {"[sp + 0x0]": "const char *MESSAGE"}, "strerrorname_np": {"[sp + 0x0]": "int ERRNUM"}, "strerrordesc_np": {"[sp + 0x0]": "int ERRNUM"}, "error": {"[sp + 0x0]": "int STATUS", "[sp + 0x4]": "int ERRNUM", "[sp + 0x8]": "const char *FORMAT", "[sp + 0xc]": "..."}, "error_at_line": {"[sp + 0x0]": "int STATUS", "[sp + 0x4]": "int ERRNUM", "[sp + 0x8]": "const char *FNAME", "[sp + 0xc]": "unsigned int LINENO", "[sp + 0x10]": "const char *FORMAT", "[sp + 0x14]": "..."}, "warn": {"[sp + 0x0]": "const char *FORMAT", "[sp + 0x4]": "..."}, "vwarn": {"[sp + 0x0]": "const char *FORMAT", "[sp + 0x4]": "va_list AP"}, "warnx": {"[sp + 0x0]": "const char *FORMAT", "[sp + 0x4]": "..."}, "vwarnx": {"[sp + 0x0]": "const char *FORMAT", "[sp + 0x4]": "va_list AP"}, "err": {"[sp + 0x0]": "int STATUS", "[sp + 0x4]": "const char *FORMAT", "[sp + 0x8]": "..."}, "verr": {"[sp + 0x0]": "int STATUS", "[sp + 0x4]": "const char *FORMAT", "[sp + 0x8]": "va_list AP"}, "errx": {"[sp + 0x0]": "int STATUS", "[sp + 0x4]": "const char *FORMAT", "[sp + 0x8]": "..."}, "verrx": {"[sp + 0x0]": "int STATUS", "[sp + 0x4]": "const char *FORMAT", "[sp + 0x8]": "va_list AP"}, "malloc": {"[sp + 0x0]": "size_t SIZE"}, "free": {"[sp + 0x0]": "void *PTR"}, "realloc": {"[sp + 0x0]": "void *PTR", "[sp + 0x4]": "size_t NEWSIZE"}, "reallocarray": {"[sp + 0x0]": "void *PTR", "[sp + 0x4]": "size_t NMEMB", "[sp + 0x8]": "size_t SIZE"}, "calloc": {"[sp + 0x0]": "size_t COUNT", "[sp + 0x4]": "size_t ELTSIZE"}, "aligned_alloc": {"[sp + 0x0]": "size_t ALIGNMENT", "[sp + 0x4]": "size_t SIZE"}, "memalign": {"[sp + 0x0]": "size_t BOUNDARY", "[sp + 0x4]": "size_t SIZE"}, "posix_memalign": {"[sp + 0x0]": "void **MEMPTR", "[sp + 0x4]": "size_t ALIGNMENT", "[sp + 0x8]": "size_t SIZE"}, "valloc": {"[sp + 0x0]": "size_t SIZE"}, "mallopt": {"[sp + 0x0]": "int PARAM", "[sp + 0x4]": "int VALUE"}, "mcheck": {"[sp + 0x0]": "void (*ABORTFN) (enum mcheck_status STATUS)"}, "mprobe": {"[sp + 0x0]": "void *POINTER"}, "mallinfo": {"[sp + 0x0]": "void"}, "mtrace": {"[sp + 0x0]": "void"}, "muntrace": {"[sp + 0x0]": "void"}, "obstack_init": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR"}, "obstack_alloc": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "int SIZE"}, "obstack_copy": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "void *ADDRESS", "[sp + 0x8]": "int SIZE"}, "obstack_copy0": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "void *ADDRESS", "[sp + 0x8]": "int SIZE"}, "obstack_free": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "void *OBJECT"}, "obstack_blank": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "int SIZE"}, "obstack_grow": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "void *DATA", "[sp + 0x8]": "int SIZE"}, "obstack_grow0": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "void *DATA", "[sp + 0x8]": "int SIZE"}, "obstack_1grow": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "char C"}, "obstack_ptr_grow": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "void *DATA"}, "obstack_int_grow": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "int DATA"}, "obstack_finish": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR"}, "obstack_object_size": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR"}, "obstack_room": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR"}, "obstack_1grow_fast": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "char C"}, "obstack_ptr_grow_fast": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "void *DATA"}, "obstack_int_grow_fast": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "int DATA"}, "obstack_blank_fast": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR", "[sp + 0x4]": "int SIZE"}, "obstack_base": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR"}, "obstack_next_free": {"[sp + 0x0]": "struct obstack *OBSTACK-PTR"}, "alloca": {"[sp + 0x0]": "size_t SIZE"}, "brk": {"[sp + 0x0]": "void *ADDR"}, "*sbrk": {"[sp + 0x0]": "ptrdiff_t DELTA"}, "mprotect": {"[sp + 0x0]": "void *ADDRESS", "[sp + 0x4]": "size_t LENGTH", "[sp + 0x8]": "int PROTECTION"}, "pkey_alloc": {"[sp + 0x0]": "unsigned int FLAGS", "[sp + 0x4]": "unsigned int RESTRICTIONS"}, "pkey_free": {"[sp + 0x0]": "int KEY"}, "pkey_mprotect": {"[sp + 0x0]": "void *ADDRESS", "[sp + 0x4]": "size_t LENGTH", "[sp + 0x8]": "int PROTECTION", "[sp + 0xc]": "int KEY"}, "pkey_set": {"[sp + 0x0]": "int KEY", "[sp + 0x4]": "unsigned int RIGHTS"}, "pkey_get": {"[sp + 0x0]": "int KEY"}, "mlock": {"[sp + 0x0]": "const void *ADDR", "[sp + 0x4]": "size_t LEN"}, "mlock2": {"[sp + 0x0]": "const void *ADDR", "[sp + 0x4]": "size_t LEN", "[sp + 0x8]": "unsigned int FLAGS"}, "munlock": {"[sp + 0x0]": "const void *ADDR", "[sp + 0x4]": "size_t LEN"}, "mlockall": {"[sp + 0x0]": "int FLAGS"}, "munlockall": {"[sp + 0x0]": "void"}, "islower": {"[sp + 0x0]": "int C"}, "isupper": {"[sp + 0x0]": "int C"}, "isalpha": {"[sp + 0x0]": "int C"}, "isdigit": {"[sp + 0x0]": "int C"}, "isalnum": {"[sp + 0x0]": "int C"}, "isxdigit": {"[sp + 0x0]": "int C"}, "ispunct": {"[sp + 0x0]": "int C"}, "isspace": {"[sp + 0x0]": "int C"}, "isblank": {"[sp + 0x0]": "int C"}, "isgraph": {"[sp + 0x0]": "int C"}, "isprint": {"[sp + 0x0]": "int C"}, "iscntrl": {"[sp + 0x0]": "int C"}, "isascii": {"[sp + 0x0]": "int C"}, "tolower": {"[sp + 0x0]": "int C"}, "toupper": {"[sp + 0x0]": "int C"}, "toascii": {"[sp + 0x0]": "int C"}, "_tolower": {"[sp + 0x0]": "int C"}, "_toupper": {"[sp + 0x0]": "int C"}, "wctype": {"[sp + 0x0]": "const char *PROPERTY"}, "iswctype": {"[sp + 0x0]": "wint_t WC", "[sp + 0x4]": "wctype_t DESC"}, "iswalnum": {"[sp + 0x0]": "wint_t WC"}, "iswalpha": {"[sp + 0x0]": "wint_t WC"}, "iswcntrl": {"[sp + 0x0]": "wint_t WC"}, "iswdigit": {"[sp + 0x0]": "wint_t WC"}, "iswgraph": {"[sp + 0x0]": "wint_t WC"}, "iswlower": {"[sp + 0x0]": "wint_t WC"}, "iswprint": {"[sp + 0x0]": "wint_t WC"}, "iswpunct": {"[sp + 0x0]": "wint_t WC"}, "iswspace": {"[sp + 0x0]": "wint_t WC"}, "iswupper": {"[sp + 0x0]": "wint_t WC"}, "iswxdigit": {"[sp + 0x0]": "wint_t WC"}, "iswblank": {"[sp + 0x0]": "wint_t WC"}, "wctrans": {"[sp + 0x0]": "const char *PROPERTY"}, "towctrans": {"[sp + 0x0]": "wint_t WC", "[sp + 0x4]": "wctrans_t DESC"}, "towlower": {"[sp + 0x0]": "wint_t WC"}, "towupper": {"[sp + 0x0]": "wint_t WC"}, "strlen": {"[sp + 0x0]": "const char *S"}, "wcslen": {"[sp + 0x0]": "const wchar_t *WS"}, "strnlen": {"[sp + 0x0]": "const char *S", "[sp + 0x4]": "size_t MAXLEN"}, "wcsnlen": {"[sp + 0x0]": "const wchar_t *WS", "[sp + 0x4]": "size_t MAXLEN"}, "memcpy": {"[sp + 0x0]": "void *restrict TO", "[sp + 0x4]": "const void *restrict FROM", "[sp + 0x8]": "size_t SIZE"}, "wmemcpy": {"[sp + 0x0]": "wchar_t *restrict WTO", "[sp + 0x4]": "const wchar_t *restrict WFROM", "[sp + 0x8]": "size_t SIZE"}, "mempcpy": {"[sp + 0x0]": "void *restrict TO", "[sp + 0x4]": "const void *restrict FROM", "[sp + 0x8]": "size_t SIZE"}, "wmempcpy": {"[sp + 0x0]": "wchar_t *restrict WTO", "[sp + 0x4]": "const wchar_t *restrict WFROM", "[sp + 0x8]": "size_t SIZE"}, "memmove": {"[sp + 0x0]": "void *TO", "[sp + 0x4]": "const void *FROM", "[sp + 0x8]": "size_t SIZE"}, "wmemmove": {"[sp + 0x0]": "wchar_t *WTO", "[sp + 0x4]": "const wchar_t *WFROM", "[sp + 0x8]": "size_t SIZE"}, "memccpy": {"[sp + 0x0]": "void *restrict TO", "[sp + 0x4]": "const void *restrict FROM", "[sp + 0x8]": "int C", "[sp + 0xc]": "size_t SIZE"}, "memset": {"[sp + 0x0]": "void *BLOCK", "[sp + 0x4]": "int C", "[sp + 0x8]": "size_t SIZE"}, "wmemset": {"[sp + 0x0]": "wchar_t *BLOCK", "[sp + 0x4]": "wchar_t WC", "[sp + 0x8]": "size_t SIZE"}, "strcpy": {"[sp + 0x0]": "char *restrict TO", "[sp + 0x4]": "const char *restrict FROM"}, "wcscpy": {"[sp + 0x0]": "wchar_t *restrict WTO", "[sp + 0x4]": "const wchar_t *restrict WFROM"}, "strdup": {"[sp + 0x0]": "const char *S"}, "wcsdup": {"[sp + 0x0]": "const wchar_t *WS"}, "stpcpy": {"[sp + 0x0]": "char *restrict TO", "[sp + 0x4]": "const char *restrict FROM"}, "wcpcpy": {"[sp + 0x0]": "wchar_t *restrict WTO", "[sp + 0x4]": "const wchar_t *restrict WFROM"}, "bcopy": {"[sp + 0x0]": "const void *FROM", "[sp + 0x4]": "void *TO", "[sp + 0x8]": "size_t SIZE"}, "bzero": {"[sp + 0x0]": "void *BLOCK", "[sp + 0x4]": "size_t SIZE"}, "strcat": {"[sp + 0x0]": "char *restrict TO", "[sp + 0x4]": "const char *restrict FROM"}, "wcscat": {"[sp + 0x0]": "wchar_t *restrict WTO", "[sp + 0x4]": "const wchar_t *restrict WFROM"}, "strncpy": {"[sp + 0x0]": "char *restrict TO", "[sp + 0x4]": "const char *restrict FROM", "[sp + 0x8]": "size_t SIZE"}, "wcsncpy": {"[sp + 0x0]": "wchar_t *restrict WTO", "[sp + 0x4]": "const wchar_t *restrict WFROM", "[sp + 0x8]": "size_t SIZE"}, "strndup": {"[sp + 0x0]": "const char *S", "[sp + 0x4]": "size_t SIZE"}, "stpncpy": {"[sp + 0x0]": "char *restrict TO", "[sp + 0x4]": "const char *restrict FROM", "[sp + 0x8]": "size_t SIZE"}, "wcpncpy": {"[sp + 0x0]": "wchar_t *restrict WTO", "[sp + 0x4]": "const wchar_t *restrict WFROM", "[sp + 0x8]": "size_t SIZE"}, "strncat": {"[sp + 0x0]": "char *restrict TO", "[sp + 0x4]": "const char *restrict FROM", "[sp + 0x8]": "size_t SIZE"}, "wcsncat": {"[sp + 0x0]": "wchar_t *restrict WTO", "[sp + 0x4]": "const wchar_t *restrict WFROM", "[sp + 0x8]": "size_t SIZE"}, "memcmp": {"[sp + 0x0]": "const void *A1", "[sp + 0x4]": "const void *A2", "[sp + 0x8]": "size_t SIZE"}, "wmemcmp": {"[sp + 0x0]": "const wchar_t *A1", "[sp + 0x4]": "const wchar_t *A2", "[sp + 0x8]": "size_t SIZE"}, "strcmp": {"[sp + 0x0]": "const char *S1", "[sp + 0x4]": "const char *S2"}, "wcscmp": {"[sp + 0x0]": "const wchar_t *WS1", "[sp + 0x4]": "const wchar_t *WS2"}, "strcasecmp": {"[sp + 0x0]": "const char *S1", "[sp + 0x4]": "const char *S2"}, "wcscasecmp": {"[sp + 0x0]": "const wchar_t *WS1", "[sp + 0x4]": "const wchar_t *WS2"}, "strncmp": {"[sp + 0x0]": "const char *S1", "[sp + 0x4]": "const char *S2", "[sp + 0x8]": "size_t SIZE"}, "wcsncmp": {"[sp + 0x0]": "const wchar_t *WS1", "[sp + 0x4]": "const wchar_t *WS2", "[sp + 0x8]": "size_t SIZE"}, "strncasecmp": {"[sp + 0x0]": "const char *S1", "[sp + 0x4]": "const char *S2", "[sp + 0x8]": "size_t N"}, "wcsncasecmp": {"[sp + 0x0]": "const wchar_t *WS1", "[sp + 0x4]": "const wchar_t *S2", "[sp + 0x8]": "size_t N"}, "strverscmp": {"[sp + 0x0]": "const char *S1", "[sp + 0x4]": "const char *S2"}, "bcmp": {"[sp + 0x0]": "const void *A1", "[sp + 0x4]": "const void *A2", "[sp + 0x8]": "size_t SIZE"}, "strcoll": {"[sp + 0x0]": "const char *S1", "[sp + 0x4]": "const char *S2"}, "wcscoll": {"[sp + 0x0]": "const wchar_t *WS1", "[sp + 0x4]": "const wchar_t *WS2"}, "strxfrm": {"[sp + 0x0]": "char *restrict TO", "[sp + 0x4]": "const char *restrict FROM", "[sp + 0x8]": "size_t SIZE"}, "wcsxfrm": {"[sp + 0x0]": "wchar_t *restrict WTO", "[sp + 0x4]": "const wchar_t *WFROM", "[sp + 0x8]": "size_t SIZE"}, "memchr": {"[sp + 0x0]": "const void *BLOCK", "[sp + 0x4]": "int C", "[sp + 0x8]": "size_t SIZE"}, "wmemchr": {"[sp + 0x0]": "const wchar_t *BLOCK", "[sp + 0x4]": "wchar_t WC", "[sp + 0x8]": "size_t SIZE"}, "rawmemchr": {"[sp + 0x0]": "const void *BLOCK", "[sp + 0x4]": "int C"}, "memrchr": {"[sp + 0x0]": "const void *BLOCK", "[sp + 0x4]": "int C", "[sp + 0x8]": "size_t SIZE"}, "strchr": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "int C"}, "wcschr": {"[sp + 0x0]": "const wchar_t *WSTRING", "[sp + 0x4]": "wchar_t WC"}, "strchrnul": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "int C"}, "wcschrnul": {"[sp + 0x0]": "const wchar_t *WSTRING", "[sp + 0x4]": "wchar_t WC"}, "strrchr": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "int C"}, "wcsrchr": {"[sp + 0x0]": "const wchar_t *WSTRING", "[sp + 0x4]": "wchar_t WC"}, "strstr": {"[sp + 0x0]": "const char *HAYSTACK", "[sp + 0x4]": "const char *NEEDLE"}, "wcsstr": {"[sp + 0x0]": "const wchar_t *HAYSTACK", "[sp + 0x4]": "const wchar_t *NEEDLE"}, "wcswcs": {"[sp + 0x0]": "const wchar_t *HAYSTACK", "[sp + 0x4]": "const wchar_t *NEEDLE"}, "strcasestr": {"[sp + 0x0]": "const char *HAYSTACK", "[sp + 0x4]": "const char *NEEDLE"}, "memmem": {"[sp + 0x0]": "const void *HAYSTACK", "[sp + 0x4]": "size_t HAYSTACK-LEN", "[sp + 0x8]": "const void *NEEDLE", "[sp + 0xc]": "size_t NEEDLE-LEN"}, "strspn": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "const char *SKIPSET"}, "wcsspn": {"[sp + 0x0]": "const wchar_t *WSTRING", "[sp + 0x4]": "const wchar_t *SKIPSET"}, "strcspn": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "const char *STOPSET"}, "wcscspn": {"[sp + 0x0]": "const wchar_t *WSTRING", "[sp + 0x4]": "const wchar_t *STOPSET"}, "strpbrk": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "const char *STOPSET"}, "wcspbrk": {"[sp + 0x0]": "const wchar_t *WSTRING", "[sp + 0x4]": "const wchar_t *STOPSET"}, "index": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "int C"}, "rindex": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "int C"}, "strtok": {"[sp + 0x0]": "char *restrict NEWSTRING", "[sp + 0x4]": "const char *restrict DELIMITERS"}, "wcstok": {"[sp + 0x0]": "wchar_t *NEWSTRING", "[sp + 0x4]": "const wchar_t *DELIMITERS", "[sp + 0x8]": "wchar_t **SAVE_PTR"}, "strtok_r": {"[sp + 0x0]": "char *NEWSTRING", "[sp + 0x4]": "const char *DELIMITERS", "[sp + 0x8]": "char **SAVE_PTR"}, "strsep": {"[sp + 0x0]": "char **STRING_PTR", "[sp + 0x4]": "const char *DELIMITER"}, "basename": {"[sp + 0x0]": "char *PATH"}, "dirname": {"[sp + 0x0]": "char *PATH"}, "explicit_bzero": {"[sp + 0x0]": "void *BLOCK", "[sp + 0x4]": "size_t LEN"}, "strfry": {"[sp + 0x0]": "char *STRING"}, "memfrob": {"[sp + 0x0]": "void *MEM", "[sp + 0x4]": "size_t LENGTH"}, "l64a": {"[sp + 0x0]": "long int N"}, "a64l": {"[sp + 0x0]": "const char *STRING"}, "argz_create": {"[sp + 0x0]": "char *const ARGV[]", "[sp + 0x4]": "char **ARGZ", "[sp + 0x8]": "size_t *ARGZ_LEN"}, "argz_create_sep": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "int SEP", "[sp + 0x8]": "char **ARGZ", "[sp + 0xc]": "size_t *ARGZ_LEN"}, "argz_count": {"[sp + 0x0]": "const char *ARGZ", "[sp + 0x4]": "size_t ARGZ_LEN"}, "argz_extract": {"[sp + 0x0]": "const char *ARGZ", "[sp + 0x4]": "size_t ARGZ_LEN", "[sp + 0x8]": "char **ARGV"}, "argz_stringify": {"[sp + 0x0]": "char *ARGZ", "[sp + 0x4]": "size_t LEN", "[sp + 0x8]": "int SEP"}, "argz_add": {"[sp + 0x0]": "char **ARGZ", "[sp + 0x4]": "size_t *ARGZ_LEN", "[sp + 0x8]": "const char *STR"}, "argz_add_sep": {"[sp + 0x0]": "char **ARGZ", "[sp + 0x4]": "size_t *ARGZ_LEN", "[sp + 0x8]": "const char *STR", "[sp + 0xc]": "int DELIM"}, "argz_append": {"[sp + 0x0]": "char **ARGZ", "[sp + 0x4]": "size_t *ARGZ_LEN", "[sp + 0x8]": "const char *BUF", "[sp + 0xc]": "size_t BUF_LEN"}, "argz_delete": {"[sp + 0x0]": "char **ARGZ", "[sp + 0x4]": "size_t *ARGZ_LEN", "[sp + 0x8]": "char *ENTRY"}, "argz_insert": {"[sp + 0x0]": "char **ARGZ", "[sp + 0x4]": "size_t *ARGZ_LEN", "[sp + 0x8]": "char *BEFORE", "[sp + 0xc]": "const char *ENTRY"}, "argz_next": {"[sp + 0x0]": "const char *ARGZ", "[sp + 0x4]": "size_t ARGZ_LEN", "[sp + 0x8]": "const char *ENTRY"}, "argz_replace": {"[sp + 0x0]": "char **ARGZ", "[sp + 0x4]": "size_t *ARGZ_LEN", "[sp + 0x8]": "const char *STR", "[sp + 0xc]": "const char *WITH", "[sp + 0x10]": "unsigned *REPLACE_COUNT"}, "envz_entry": {"[sp + 0x0]": "const char *ENVZ", "[sp + 0x4]": "size_t ENVZ_LEN", "[sp + 0x8]": "const char *NAME"}, "envz_get": {"[sp + 0x0]": "const char *ENVZ", "[sp + 0x4]": "size_t ENVZ_LEN", "[sp + 0x8]": "const char *NAME"}, "envz_add": {"[sp + 0x0]": "char **ENVZ", "[sp + 0x4]": "size_t *ENVZ_LEN", "[sp + 0x8]": "const char *NAME", "[sp + 0xc]": "const char *VALUE"}, "envz_merge": {"[sp + 0x0]": "char **ENVZ", "[sp + 0x4]": "size_t *ENVZ_LEN", "[sp + 0x8]": "const char *ENVZ2", "[sp + 0xc]": "size_t ENVZ2_LEN", "[sp + 0x10]": "int OVERRIDE"}, "envz_strip": {"[sp + 0x0]": "char **ENVZ", "[sp + 0x4]": "size_t *ENVZ_LEN"}, "envz_remove": {"[sp + 0x0]": "char **ENVZ", "[sp + 0x4]": "size_t *ENVZ_LEN", "[sp + 0x8]": "const char *NAME"}, "mbsinit": {"[sp + 0x0]": "const mbstate_t *PS"}, "btowc": {"[sp + 0x0]": "int C"}, "wctob": {"[sp + 0x0]": "wint_t C"}, "mbrtowc": {"[sp + 0x0]": "wchar_t *restrict PWC", "[sp + 0x4]": "const char *restrict S", "[sp + 0x8]": "size_t N", "[sp + 0xc]": "mbstate_t *restrict PS"}, "mbrlen": {"[sp + 0x0]": "const char *restrict S", "[sp + 0x4]": "size_t N", "[sp + 0x8]": "mbstate_t *PS"}, "wcrtomb": {"[sp + 0x0]": "char *restrict S", "[sp + 0x4]": "wchar_t WC", "[sp + 0x8]": "mbstate_t *restrict PS"}, "mbsrtowcs": {"[sp + 0x0]": "wchar_t *restrict DST", "[sp + 0x4]": "const char **restrict SRC", "[sp + 0x8]": "size_t LEN", "[sp + 0xc]": "mbstate_t *restrict PS"}, "wcsrtombs": {"[sp + 0x0]": "char *restrict DST", "[sp + 0x4]": "const wchar_t **restrict SRC", "[sp + 0x8]": "size_t LEN", "[sp + 0xc]": "mbstate_t *restrict PS"}, "mbsnrtowcs": {"[sp + 0x0]": ""}, "wcsnrtombs": {"[sp + 0x0]": ""}, "mbtowc": {"[sp + 0x0]": "wchar_t *restrict RESULT", "[sp + 0x4]": "const char *restrict STRING", "[sp + 0x8]": "size_t SIZE"}, "wctomb": {"[sp + 0x0]": "char *STRING", "[sp + 0x4]": "wchar_t WCHAR"}, "mblen": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "size_t SIZE"}, "mbstowcs": {"[sp + 0x0]": "wchar_t *WSTRING", "[sp + 0x4]": "const char *STRING", "[sp + 0x8]": "size_t SIZE"}, "wcstombs": {"[sp + 0x0]": "char *STRING", "[sp + 0x4]": "const wchar_t *WSTRING", "[sp + 0x8]": "size_t SIZE"}, "iconv_open": {"[sp + 0x0]": "const char *TOCODE", "[sp + 0x4]": "const char *FROMCODE"}, "iconv_close": {"[sp + 0x0]": "iconv_t CD"}, "iconv": {"[sp + 0x0]": "iconv_t CD", "[sp + 0x4]": "char **INBUF", "[sp + 0x8]": "size_t *INBYTESLEFT", "[sp + 0xc]": "char **OUTBUF", "[sp + 0x10]": "size_t *OUTBYTESLEFT"}, "setlocale": {"[sp + 0x0]": "int CATEGORY", "[sp + 0x4]": "const char *LOCALE"}, "localeconv": {"[sp + 0x0]": "void"}, "nl_langinfo": {"[sp + 0x0]": "nl_item ITEM"}, "strfmon": {"[sp + 0x0]": "char *S", "[sp + 0x4]": "size_t MAXSIZE", "[sp + 0x8]": "const char *FORMAT", "[sp + 0xc]": "..."}, "rpmatch": {"[sp + 0x0]": "const char *RESPONSE"}, "catopen": {"[sp + 0x0]": "const char *CAT_NAME", "[sp + 0x4]": "int FLAG"}, "catgets": {"[sp + 0x0]": "nl_catd CATALOG_DESC", "[sp + 0x4]": "int SET", "[sp + 0x8]": "int MESSAGE", "[sp + 0xc]": "const char *STRING"}, "catclose": {"[sp + 0x0]": "nl_catd CATALOG_DESC"}, "gettext": {"[sp + 0x0]": "const char *MSGID"}, "dgettext": {"[sp + 0x0]": "const char *DOMAINNAME", "[sp + 0x4]": "const char *MSGID"}, "dcgettext": {"[sp + 0x0]": "const char *DOMAINNAME", "[sp + 0x4]": "const char *MSGID", "[sp + 0x8]": "int CATEGORY"}, "textdomain": {"[sp + 0x0]": "const char *DOMAINNAME"}, "bindtextdomain": {"[sp + 0x0]": "const char *DOMAINNAME", "[sp + 0x4]": "const char *DIRNAME"}, "ngettext": {"[sp + 0x0]": "const char *MSGID1", "[sp + 0x4]": "const char *MSGID2", "[sp + 0x8]": "unsigned long int N"}, "dngettext": {"[sp + 0x0]": "const char *DOMAIN", "[sp + 0x4]": "const char *MSGID1", "[sp + 0x8]": "const char *MSGID2", "[sp + 0xc]": "unsigned long int N"}, "dcngettext": {"[sp + 0x0]": "const char *DOMAIN", "[sp + 0x4]": "const char *MSGID1", "[sp + 0x8]": "const char *MSGID2", "[sp + 0xc]": "unsigned long int N", "[sp + 0x10]": "int CATEGORY"}, "bind_textdomain_codeset": {"[sp + 0x0]": "const char *DOMAINNAME", "[sp + 0x4]": "const char *CODESET"}, "lfind": {"[sp + 0x0]": "const void *KEY", "[sp + 0x4]": "const void *BASE", "[sp + 0x8]": "size_t *NMEMB", "[sp + 0xc]": "size_t SIZE", "[sp + 0x10]": "comparison_fn_t COMPAR"}, "lsearch": {"[sp + 0x0]": "const void *KEY", "[sp + 0x4]": "void *BASE", "[sp + 0x8]": "size_t *NMEMB", "[sp + 0xc]": "size_t SIZE", "[sp + 0x10]": "comparison_fn_t COMPAR"}, "bsearch": {"[sp + 0x0]": "const void *KEY", "[sp + 0x4]": "const void *ARRAY", "[sp + 0x8]": "size_t COUNT", "[sp + 0xc]": "size_t SIZE", "[sp + 0x10]": "comparison_fn_t COMPARE"}, "qsort": {"[sp + 0x0]": "void *ARRAY", "[sp + 0x4]": "size_t COUNT", "[sp + 0x8]": "size_t SIZE", "[sp + 0xc]": "comparison_fn_t COMPARE"}, "hcreate": {"[sp + 0x0]": "size_t NEL"}, "hdestroy": {"[sp + 0x0]": "void"}, "hsearch": {"[sp + 0x0]": "ENTRY ITEM", "[sp + 0x4]": "ACTION ACTION"}, "hcreate_r": {"[sp + 0x0]": "size_t NEL", "[sp + 0x4]": "struct hsearch_data *HTAB"}, "hdestroy_r": {"[sp + 0x0]": "struct hsearch_data *HTAB"}, "hsearch_r": {"[sp + 0x0]": "ENTRY ITEM", "[sp + 0x4]": "ACTION ACTION", "[sp + 0x8]": "ENTRY **RETVAL", "[sp + 0xc]": "struct hsearch_data *HTAB"}, "tsearch": {"[sp + 0x0]": "const void *KEY", "[sp + 0x4]": "void **ROOTP", "[sp + 0x8]": "comparison_fn_t COMPAR"}, "tfind": {"[sp + 0x0]": "const void *KEY", "[sp + 0x4]": "void *const *ROOTP", "[sp + 0x8]": "comparison_fn_t COMPAR"}, "tdelete": {"[sp + 0x0]": "const void *KEY", "[sp + 0x4]": "void **ROOTP", "[sp + 0x8]": "comparison_fn_t COMPAR"}, "tdestroy": {"[sp + 0x0]": "void *VROOT", "[sp + 0x4]": "__free_fn_t FREEFCT"}, "twalk": {"[sp + 0x0]": "const void *ROOT", "[sp + 0x4]": "__action_fn_t ACTION"}, "twalk_r": {"[sp + 0x0]": "const void *ROOT", "[sp + 0x4]": "void (*ACTION) (const void *KEY", "[sp + 0x8]": "VISIT WHICH", "[sp + 0xc]": "void *CLOSURE)", "[sp + 0x10]": "void *CLOSURE"}, "fnmatch": {"[sp + 0x0]": "const char *PATTERN", "[sp + 0x4]": "const char *STRING", "[sp + 0x8]": "int FLAGS"}, "glob": {"[sp + 0x0]": "const char *PATTERN", "[sp + 0x4]": "int FLAGS", "[sp + 0x8]": "int (*ERRFUNC"}, "glob64": {"[sp + 0x0]": "const char *PATTERN", "[sp + 0x4]": "int FLAGS", "[sp + 0x8]": "int (*ERRFUNC"}, "globfree": {"[sp + 0x0]": "glob_t *PGLOB"}, "globfree64": {"[sp + 0x0]": "glob64_t *PGLOB"}, "regcomp": {"[sp + 0x0]": "regex_t *restrict COMPILED", "[sp + 0x4]": "const char *restrict PATTERN", "[sp + 0x8]": "int CFLAGS"}, "regexec": {"[sp + 0x0]": ""}, "regfree": {"[sp + 0x0]": "regex_t *COMPILED"}, "regerror": {"[sp + 0x0]": "int ERRCODE", "[sp + 0x4]": "const regex_t *restrict COMPILED", "[sp + 0x8]": "char *restrict BUFFER", "[sp + 0xc]": "size_t LENGTH"}, "wordexp": {"[sp + 0x0]": "const char *WORDS", "[sp + 0x4]": "wordexp_t *WORD-VECTOR-PTR", "[sp + 0x8]": "int FLAGS"}, "wordfree": {"[sp + 0x0]": "wordexp_t *WORD-VECTOR-PTR"}, "fopen": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "const char *OPENTYPE"}, "fopen64": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "const char *OPENTYPE"}, "freopen": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "const char *OPENTYPE", "[sp + 0x8]": "FILE *STREAM"}, "freopen64": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "const char *OPENTYPE", "[sp + 0x8]": "FILE *STREAM"}, "__freadable": {"[sp + 0x0]": "FILE *STREAM"}, "__fwritable": {"[sp + 0x0]": "FILE *STREAM"}, "__freading": {"[sp + 0x0]": "FILE *STREAM"}, "__fwriting": {"[sp + 0x0]": "FILE *STREAM"}, "fclose": {"[sp + 0x0]": "FILE *STREAM"}, "fcloseall": {"[sp + 0x0]": "void"}, "flockfile": {"[sp + 0x0]": "FILE *STREAM"}, "ftrylockfile": {"[sp + 0x0]": "FILE *STREAM"}, "funlockfile": {"[sp + 0x0]": "FILE *STREAM"}, "__fsetlocking": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "int TYPE"}, "fwide": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "int MODE"}, "fputc": {"[sp + 0x0]": "int C", "[sp + 0x4]": "FILE *STREAM"}, "fputwc": {"[sp + 0x0]": "wchar_t WC", "[sp + 0x4]": "FILE *STREAM"}, "fputc_unlocked": {"[sp + 0x0]": "int C", "[sp + 0x4]": "FILE *STREAM"}, "fputwc_unlocked": {"[sp + 0x0]": "wchar_t WC", "[sp + 0x4]": "FILE *STREAM"}, "putc": {"[sp + 0x0]": "int C", "[sp + 0x4]": "FILE *STREAM"}, "putwc": {"[sp + 0x0]": "wchar_t WC", "[sp + 0x4]": "FILE *STREAM"}, "putc_unlocked": {"[sp + 0x0]": "int C", "[sp + 0x4]": "FILE *STREAM"}, "putwc_unlocked": {"[sp + 0x0]": "wchar_t WC", "[sp + 0x4]": "FILE *STREAM"}, "putchar": {"[sp + 0x0]": "int C"}, "putwchar": {"[sp + 0x0]": "wchar_t WC"}, "putchar_unlocked": {"[sp + 0x0]": "int C"}, "putwchar_unlocked": {"[sp + 0x0]": "wchar_t WC"}, "fputs": {"[sp + 0x0]": "const char *S", "[sp + 0x4]": "FILE *STREAM"}, "fputws": {"[sp + 0x0]": "const wchar_t *WS", "[sp + 0x4]": "FILE *STREAM"}, "fputs_unlocked": {"[sp + 0x0]": "const char *S", "[sp + 0x4]": "FILE *STREAM"}, "fputws_unlocked": {"[sp + 0x0]": "const wchar_t *WS", "[sp + 0x4]": "FILE *STREAM"}, "puts": {"[sp + 0x0]": "const char *S"}, "putw": {"[sp + 0x0]": "int W", "[sp + 0x4]": "FILE *STREAM"}, "fgetc": {"[sp + 0x0]": "FILE *STREAM"}, "fgetwc": {"[sp + 0x0]": "FILE *STREAM"}, "fgetc_unlocked": {"[sp + 0x0]": "FILE *STREAM"}, "fgetwc_unlocked": {"[sp + 0x0]": "FILE *STREAM"}, "getc": {"[sp + 0x0]": "FILE *STREAM"}, "getwc": {"[sp + 0x0]": "FILE *STREAM"}, "getc_unlocked": {"[sp + 0x0]": "FILE *STREAM"}, "getwc_unlocked": {"[sp + 0x0]": "FILE *STREAM"}, "getchar": {"[sp + 0x0]": "void"}, "getwchar": {"[sp + 0x0]": "void"}, "getchar_unlocked": {"[sp + 0x0]": "void"}, "getwchar_unlocked": {"[sp + 0x0]": "void"}, "getw": {"[sp + 0x0]": "FILE *STREAM"}, "getline": {"[sp + 0x0]": "char **LINEPTR", "[sp + 0x4]": "size_t *N", "[sp + 0x8]": "FILE *STREAM"}, "getdelim": {"[sp + 0x0]": "char **LINEPTR", "[sp + 0x4]": "size_t *N", "[sp + 0x8]": "int DELIMITER", "[sp + 0xc]": "FILE *STREAM"}, "fgets": {"[sp + 0x0]": "char *S", "[sp + 0x4]": "int COUNT", "[sp + 0x8]": "FILE *STREAM"}, "fgetws": {"[sp + 0x0]": "wchar_t *WS", "[sp + 0x4]": "int COUNT", "[sp + 0x8]": "FILE *STREAM"}, "fgets_unlocked": {"[sp + 0x0]": "char *S", "[sp + 0x4]": "int COUNT", "[sp + 0x8]": "FILE *STREAM"}, "fgetws_unlocked": {"[sp + 0x0]": "wchar_t *WS", "[sp + 0x4]": "int COUNT", "[sp + 0x8]": "FILE *STREAM"}, "ungetc": {"[sp + 0x0]": "int C", "[sp + 0x4]": "FILE *STREAM"}, "ungetwc": {"[sp + 0x0]": "wint_t WC", "[sp + 0x4]": "FILE *STREAM"}, "fread": {"[sp + 0x0]": "void *DATA", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "size_t COUNT", "[sp + 0xc]": "FILE *STREAM"}, "fread_unlocked": {"[sp + 0x0]": "void *DATA", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "size_t COUNT", "[sp + 0xc]": "FILE *STREAM"}, "fwrite": {"[sp + 0x0]": "const void *DATA", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "size_t COUNT", "[sp + 0xc]": "FILE *STREAM"}, "fwrite_unlocked": {"[sp + 0x0]": "const void *DATA", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "size_t COUNT", "[sp + 0xc]": "FILE *STREAM"}, "printf": {"[sp + 0x0]": "const char *TEMPLATE", "[sp + 0x4]": "..."}, "wprintf": {"[sp + 0x0]": "const wchar_t *TEMPLATE", "[sp + 0x4]": "..."}, "fprintf": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "..."}, "fwprintf": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const wchar_t *TEMPLATE", "[sp + 0x8]": "..."}, "sprintf": {"[sp + 0x0]": "char *S", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "..."}, "swprintf": {"[sp + 0x0]": "wchar_t *WS", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const wchar_t *TEMPLATE", "[sp + 0xc]": "..."}, "snprintf": {"[sp + 0x0]": "char *S", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const char *TEMPLATE", "[sp + 0xc]": "..."}, "asprintf": {"[sp + 0x0]": "char **PTR", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "..."}, "obstack_printf": {"[sp + 0x0]": "struct obstack *OBSTACK", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "..."}, "vprintf": {"[sp + 0x0]": "const char *TEMPLATE", "[sp + 0x4]": "va_list AP"}, "vwprintf": {"[sp + 0x0]": "const wchar_t *TEMPLATE", "[sp + 0x4]": "va_list AP"}, "vfprintf": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "va_list AP"}, "vfwprintf": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const wchar_t *TEMPLATE", "[sp + 0x8]": "va_list AP"}, "vsprintf": {"[sp + 0x0]": "char *S", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "va_list AP"}, "vswprintf": {"[sp + 0x0]": "wchar_t *WS", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const wchar_t *TEMPLATE", "[sp + 0xc]": "va_list AP"}, "vsnprintf": {"[sp + 0x0]": "char *S", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const char *TEMPLATE", "[sp + 0xc]": "va_list AP"}, "vasprintf": {"[sp + 0x0]": "char **PTR", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "va_list AP"}, "obstack_vprintf": {"[sp + 0x0]": "struct obstack *OBSTACK", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "va_list AP"}, "parse_printf_format": {"[sp + 0x0]": "const char *TEMPLATE", "[sp + 0x4]": "size_t N", "[sp + 0x8]": "int *ARGTYPES"}, "register_printf_function": {"[sp + 0x0]": "int SPEC", "[sp + 0x4]": "printf_function HANDLER-FUNCTION", "[sp + 0x8]": "printf_arginfo_function ARGINFO-FUNCTION"}, "printf_size": {"[sp + 0x0]": "FILE *FP", "[sp + 0x4]": "const struct printf_info *INFO", "[sp + 0x8]": "const void *const *ARGS"}, "printf_size_info": {"[sp + 0x0]": "const struct printf_info *INFO", "[sp + 0x4]": "size_t N", "[sp + 0x8]": "int *ARGTYPES"}, "scanf": {"[sp + 0x0]": "const char *TEMPLATE", "[sp + 0x4]": "..."}, "wscanf": {"[sp + 0x0]": "const wchar_t *TEMPLATE", "[sp + 0x4]": "..."}, "fscanf": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "..."}, "fwscanf": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const wchar_t *TEMPLATE", "[sp + 0x8]": "..."}, "sscanf": {"[sp + 0x0]": "const char *S", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "..."}, "swscanf": {"[sp + 0x0]": "const wchar_t *WS", "[sp + 0x4]": "const wchar_t *TEMPLATE", "[sp + 0x8]": "..."}, "vscanf": {"[sp + 0x0]": "const char *TEMPLATE", "[sp + 0x4]": "va_list AP"}, "vwscanf": {"[sp + 0x0]": "const wchar_t *TEMPLATE", "[sp + 0x4]": "va_list AP"}, "vfscanf": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "va_list AP"}, "vfwscanf": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const wchar_t *TEMPLATE", "[sp + 0x8]": "va_list AP"}, "vsscanf": {"[sp + 0x0]": "const char *S", "[sp + 0x4]": "const char *TEMPLATE", "[sp + 0x8]": "va_list AP"}, "vswscanf": {"[sp + 0x0]": "const wchar_t *S", "[sp + 0x4]": "const wchar_t *TEMPLATE", "[sp + 0x8]": "va_list AP"}, "feof": {"[sp + 0x0]": "FILE *STREAM"}, "feof_unlocked": {"[sp + 0x0]": "FILE *STREAM"}, "ferror": {"[sp + 0x0]": "FILE *STREAM"}, "ferror_unlocked": {"[sp + 0x0]": "FILE *STREAM"}, "clearerr": {"[sp + 0x0]": "FILE *STREAM"}, "clearerr_unlocked": {"[sp + 0x0]": "FILE *STREAM"}, "ftell": {"[sp + 0x0]": "FILE *STREAM"}, "ftello": {"[sp + 0x0]": "FILE *STREAM"}, "ftello64": {"[sp + 0x0]": "FILE *STREAM"}, "fseek": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "long int OFFSET", "[sp + 0x8]": "int WHENCE"}, "fseeko": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "off_t OFFSET", "[sp + 0x8]": "int WHENCE"}, "fseeko64": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "off64_t OFFSET", "[sp + 0x8]": "int WHENCE"}, "rewind": {"[sp + 0x0]": "FILE *STREAM"}, "fgetpos": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "fpos_t *POSITION"}, "fgetpos64": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "fpos64_t *POSITION"}, "fsetpos": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const fpos_t *POSITION"}, "fsetpos64": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const fpos64_t *POSITION"}, "fflush": {"[sp + 0x0]": "FILE *STREAM"}, "fflush_unlocked": {"[sp + 0x0]": "FILE *STREAM"}, "_flushlbf": {"[sp + 0x0]": "void"}, "__fpurge": {"[sp + 0x0]": "FILE *STREAM"}, "setvbuf": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "char *BUF", "[sp + 0x8]": "int MODE", "[sp + 0xc]": "size_t SIZE"}, "setbuf": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "char *BUF"}, "setbuffer": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "char *BUF", "[sp + 0x8]": "size_t SIZE"}, "setlinebuf": {"[sp + 0x0]": "FILE *STREAM"}, "__flbf": {"[sp + 0x0]": "FILE *STREAM"}, "__fbufsize": {"[sp + 0x0]": "FILE *STREAM"}, "__fpending": {"[sp + 0x0]": "FILE *STREAM"}, "fmemopen": {"[sp + 0x0]": "void *BUF", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const char *OPENTYPE"}, "open_memstream": {"[sp + 0x0]": "char **PTR", "[sp + 0x4]": "size_t *SIZELOC"}, "fopencookie": {"[sp + 0x0]": "void *COOKIE", "[sp + 0x4]": "const char *OPENTYPE", "[sp + 0x8]": "cookie_io_functions_t IO-FUNCTIONS"}, "fmtmsg": {"[sp + 0x0]": ""}, "addseverity": {"[sp + 0x0]": "int SEVERITY", "[sp + 0x4]": "const char *STRING"}, "open": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "int FLAGS[", "[sp + 0x8]": "mode_t MODE]"}, "open64": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "int FLAGS[", "[sp + 0x8]": "mode_t MODE]"}, "close": {"[sp + 0x0]": "int FILEDES"}, "read": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "void *BUFFER", "[sp + 0x8]": "size_t SIZE"}, "pread": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "void *BUFFER", "[sp + 0x8]": "size_t SIZE", "[sp + 0xc]": "off_t OFFSET"}, "pread64": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "void *BUFFER", "[sp + 0x8]": "size_t SIZE", "[sp + 0xc]": "off64_t OFFSET"}, "write": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "const void *BUFFER", "[sp + 0x8]": "size_t SIZE"}, "pwrite": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "const void *BUFFER", "[sp + 0x8]": "size_t SIZE", "[sp + 0xc]": "off_t OFFSET"}, "pwrite64": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "const void *BUFFER", "[sp + 0x8]": "size_t SIZE", "[sp + 0xc]": "off64_t OFFSET"}, "lseek": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "off_t OFFSET", "[sp + 0x8]": "int WHENCE"}, "lseek64": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "off64_t OFFSET", "[sp + 0x8]": "int WHENCE"}, "fdopen": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "const char *OPENTYPE"}, "fileno": {"[sp + 0x0]": "FILE *STREAM"}, "fileno_unlocked": {"[sp + 0x0]": "FILE *STREAM"}, "readv": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "const struct iovec *VECTOR", "[sp + 0x8]": "int COUNT"}, "writev": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "const struct iovec *VECTOR", "[sp + 0x8]": "int COUNT"}, "preadv": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "const struct iovec *IOV", "[sp + 0x8]": "int IOVCNT", "[sp + 0xc]": "off_t OFFSET"}, "preadv64": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "const struct iovec *IOV", "[sp + 0x8]": "int IOVCNT", "[sp + 0xc]": "off64_t OFFSET"}, "pwritev": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "const struct iovec *IOV", "[sp + 0x8]": "int IOVCNT", "[sp + 0xc]": "off_t OFFSET"}, "pwritev64": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "const struct iovec *IOV", "[sp + 0x8]": "int IOVCNT", "[sp + 0xc]": "off64_t OFFSET"}, "preadv2": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "const struct iovec *IOV", "[sp + 0x8]": "int IOVCNT", "[sp + 0xc]": "off_t OFFSET", "[sp + 0x10]": "int FLAGS"}, "preadv64v2": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "const struct iovec *IOV", "[sp + 0x8]": "int IOVCNT", "[sp + 0xc]": "off64_t OFFSET", "[sp + 0x10]": "int FLAGS"}, "pwritev2": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "const struct iovec *IOV", "[sp + 0x8]": "int IOVCNT", "[sp + 0xc]": "off_t OFFSET", "[sp + 0x10]": "int FLAGS"}, "pwritev64v2": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "const struct iovec *IOV", "[sp + 0x8]": "int IOVCNT", "[sp + 0xc]": "off64_t OFFSET", "[sp + 0x10]": "int FLAGS"}, "copy_file_range": {"[sp + 0x0]": ""}, "mmap": {"[sp + 0x0]": "void *ADDRESS", "[sp + 0x4]": "size_t LENGTH", "[sp + 0x8]": "int PROTECT", "[sp + 0xc]": "int FLAGS", "[sp + 0x10]": "int FILEDES", "[sp + 0x14]": "off_t OFFSET"}, "mmap64": {"[sp + 0x0]": "void *ADDRESS", "[sp + 0x4]": "size_t LENGTH", "[sp + 0x8]": "int PROTECT", "[sp + 0xc]": "int FLAGS", "[sp + 0x10]": "int FILEDES", "[sp + 0x14]": "off64_t OFFSET"}, "munmap": {"[sp + 0x0]": "void *ADDR", "[sp + 0x4]": "size_t LENGTH"}, "msync": {"[sp + 0x0]": "void *ADDRESS", "[sp + 0x4]": "size_t LENGTH", "[sp + 0x8]": "int FLAGS"}, "mremap": {"[sp + 0x0]": "void *ADDRESS", "[sp + 0x4]": "size_t LENGTH", "[sp + 0x8]": "size_t NEW_LENGTH", "[sp + 0xc]": "int FLAG"}, "madvise": {"[sp + 0x0]": "void *ADDR", "[sp + 0x4]": "size_t LENGTH", "[sp + 0x8]": "int ADVICE"}, "shm_open": {"[sp + 0x0]": "const char *NAME", "[sp + 0x4]": "int OFLAG", "[sp + 0x8]": "mode_t MODE"}, "shm_unlink": {"[sp + 0x0]": "const char *NAME"}, "memfd_create": {"[sp + 0x0]": "const char *NAME", "[sp + 0x4]": "unsigned int FLAGS"}, "select": {"[sp + 0x0]": "int NFDS", "[sp + 0x4]": "fd_set *READ-FDS", "[sp + 0x8]": "fd_set *WRITE-FDS", "[sp + 0xc]": "fd_set *EXCEPT-FDS", "[sp + 0x10]": "struct timeval *TIMEOUT"}, "sync": {"[sp + 0x0]": "void"}, "fsync": {"[sp + 0x0]": "int FILDES"}, "fdatasync": {"[sp + 0x0]": "int FILDES"}, "aio_read": {"[sp + 0x0]": "struct aiocb *AIOCBP"}, "aio_read64": {"[sp + 0x0]": "struct aiocb64 *AIOCBP"}, "aio_write": {"[sp + 0x0]": "struct aiocb *AIOCBP"}, "aio_write64": {"[sp + 0x0]": "struct aiocb64 *AIOCBP"}, "lio_listio": {"[sp + 0x0]": "int MODE", "[sp + 0x4]": "struct aiocb *const LIST[]", "[sp + 0x8]": "int NENT", "[sp + 0xc]": "struct sigevent *SIG"}, "lio_listio64": {"[sp + 0x0]": "int MODE", "[sp + 0x4]": "struct aiocb64 *const LIST[]", "[sp + 0x8]": "int NENT", "[sp + 0xc]": "struct sigevent *SIG"}, "aio_error": {"[sp + 0x0]": "const struct aiocb *AIOCBP"}, "aio_error64": {"[sp + 0x0]": "const struct aiocb64 *AIOCBP"}, "aio_return": {"[sp + 0x0]": "struct aiocb *AIOCBP"}, "aio_return64": {"[sp + 0x0]": "struct aiocb64 *AIOCBP"}, "aio_fsync": {"[sp + 0x0]": "int OP", "[sp + 0x4]": "struct aiocb *AIOCBP"}, "aio_fsync64": {"[sp + 0x0]": "int OP", "[sp + 0x4]": "struct aiocb64 *AIOCBP"}, "aio_suspend": {"[sp + 0x0]": "const struct aiocb *const LIST[]", "[sp + 0x4]": "int NENT", "[sp + 0x8]": "const struct timespec *TIMEOUT"}, "aio_suspend64": {"[sp + 0x0]": "const struct aiocb64 *const LIST[]", "[sp + 0x4]": "int NENT", "[sp + 0x8]": "const struct timespec *TIMEOUT"}, "aio_cancel": {"[sp + 0x0]": "int FILDES", "[sp + 0x4]": "struct aiocb *AIOCBP"}, "aio_cancel64": {"[sp + 0x0]": "int FILDES", "[sp + 0x4]": "struct aiocb64 *AIOCBP"}, "aio_init": {"[sp + 0x0]": "const struct aioinit *INIT"}, "fcntl": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "int COMMAND", "[sp + 0x8]": "..."}, "dup": {"[sp + 0x0]": "int OLD"}, "dup2": {"[sp + 0x0]": "int OLD", "[sp + 0x4]": "int NEW"}, "ioctl": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "int COMMAND", "[sp + 0x8]": "..."}, "getcwd": {"[sp + 0x0]": "char *BUFFER", "[sp + 0x4]": "size_t SIZE"}, "get_current_dir_name": {"[sp + 0x0]": "void"}, "chdir": {"[sp + 0x0]": "const char *FILENAME"}, "fchdir": {"[sp + 0x0]": "int FILEDES"}, "IFTODT": {"[sp + 0x0]": "mode_t MODE"}, "DTTOIF": {"[sp + 0x0]": "int DTYPE"}, "opendir": {"[sp + 0x0]": "const char *DIRNAME"}, "fdopendir": {"[sp + 0x0]": "int FD"}, "dirfd": {"[sp + 0x0]": "DIR *DIRSTREAM"}, "readdir": {"[sp + 0x0]": "DIR *DIRSTREAM"}, "readdir_r": {"[sp + 0x0]": "DIR *DIRSTREAM", "[sp + 0x4]": "struct dirent *ENTRY", "[sp + 0x8]": "struct dirent **RESULT"}, "readdir64": {"[sp + 0x0]": "DIR *DIRSTREAM"}, "readdir64_r": {"[sp + 0x0]": "DIR *DIRSTREAM", "[sp + 0x4]": "struct dirent64 *ENTRY", "[sp + 0x8]": "struct dirent64 **RESULT"}, "closedir": {"[sp + 0x0]": "DIR *DIRSTREAM"}, "rewinddir": {"[sp + 0x0]": "DIR *DIRSTREAM"}, "telldir": {"[sp + 0x0]": "DIR *DIRSTREAM"}, "seekdir": {"[sp + 0x0]": "DIR *DIRSTREAM", "[sp + 0x4]": "long int POS"}, "scandir": {"[sp + 0x0]": "const char *DIR", "[sp + 0x4]": "struct dirent ***NAMELIST", "[sp + 0x8]": "int (*SELECTOR) (const struct dirent *)", "[sp + 0xc]": "int (*CMP"}, "alphasort": {"[sp + 0x0]": "const struct dirent **A", "[sp + 0x4]": "const struct dirent **B"}, "versionsort": {"[sp + 0x0]": "const struct dirent **A", "[sp + 0x4]": "const struct dirent **B"}, "scandir64": {"[sp + 0x0]": "const char *DIR", "[sp + 0x4]": "struct dirent64 ***NAMELIST", "[sp + 0x8]": "int (*SELECTOR) (const struct dirent64 *"}, "alphasort64": {"[sp + 0x0]": "const struct dirent64 **A", "[sp + 0x4]": "const struct dirent **B"}, "versionsort64": {"[sp + 0x0]": "const struct dirent64 **A", "[sp + 0x4]": "const struct dirent64 **B"}, "getdents64": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "void *BUFFER", "[sp + 0x8]": "size_t LENGTH"}, "ftw": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "__ftw_func_t FUNC", "[sp + 0x8]": "int DESCRIPTORS"}, "ftw64": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "__ftw64_func_t FUNC", "[sp + 0x8]": "int DESCRIPTORS"}, "nftw": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "__nftw_func_t FUNC", "[sp + 0x8]": "int DESCRIPTORS", "[sp + 0xc]": "int FLAG"}, "nftw64": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "__nftw64_func_t FUNC", "[sp + 0x8]": "int DESCRIPTORS", "[sp + 0xc]": "int FLAG"}, "link": {"[sp + 0x0]": "const char *OLDNAME", "[sp + 0x4]": "const char *NEWNAME"}, "linkat": {"[sp + 0x0]": "int oldfd", "[sp + 0x4]": "const char *OLDNAME", "[sp + 0x8]": "int newfd", "[sp + 0xc]": "const char *NEWNAME", "[sp + 0x10]": "int flags"}, "symlink": {"[sp + 0x0]": "const char *OLDNAME", "[sp + 0x4]": "const char *NEWNAME"}, "readlink": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "char *BUFFER", "[sp + 0x8]": "size_t SIZE"}, "canonicalize_file_name": {"[sp + 0x0]": "const char *NAME"}, "realpath": {"[sp + 0x0]": "const char *restrict NAME", "[sp + 0x4]": "char *restrict RESOLVED"}, "unlink": {"[sp + 0x0]": "const char *FILENAME"}, "rmdir": {"[sp + 0x0]": "const char *FILENAME"}, "remove": {"[sp + 0x0]": "const char *FILENAME"}, "rename": {"[sp + 0x0]": "const char *OLDNAME", "[sp + 0x4]": "const char *NEWNAME"}, "mkdir": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "mode_t MODE"}, "stat": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "struct stat *BUF"}, "stat64": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "struct stat64 *BUF"}, "fstat": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "struct stat *BUF"}, "fstat64": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "struct stat64 *BUF"}, "lstat": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "struct stat *BUF"}, "lstat64": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "struct stat64 *BUF"}, "chown": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "uid_t OWNER", "[sp + 0x8]": "gid_t GROUP"}, "fchown": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "uid_t OWNER", "[sp + 0x8]": "gid_t GROUP"}, "umask": {"[sp + 0x0]": "mode_t MASK"}, "getumask": {"[sp + 0x0]": "void"}, "chmod": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "mode_t MODE"}, "fchmod": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "mode_t MODE"}, "access": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "int HOW"}, "utime": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "const struct utimbuf *TIMES"}, "utimes": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "const struct timeval TVP[2]"}, "lutimes": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "const struct timeval TVP[2]"}, "futimes": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "const struct timeval TVP[2]"}, "truncate": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "off_t LENGTH"}, "truncate64": {"[sp + 0x0]": "const char *NAME", "[sp + 0x4]": "off64_t LENGTH"}, "ftruncate": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "off_t LENGTH"}, "ftruncate64": {"[sp + 0x0]": "int ID", "[sp + 0x4]": "off64_t LENGTH"}, "posix_fallocate": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "off_t OFFSET", "[sp + 0x8]": "off_t LENGTH"}, "posix_fallocate64": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "off64_t OFFSET", "[sp + 0x8]": "off64_t LENGTH"}, "mknod": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "mode_t MODE", "[sp + 0x8]": "dev_t DEV"}, "tmpfile": {"[sp + 0x0]": "void"}, "tmpfile64": {"[sp + 0x0]": "void"}, "tmpnam": {"[sp + 0x0]": "char *RESULT"}, "tmpnam_r": {"[sp + 0x0]": "char *RESULT"}, "tempnam": {"[sp + 0x0]": "const char *DIR", "[sp + 0x4]": "const char *PREFIX"}, "mktemp": {"[sp + 0x0]": "char *TEMPLATE"}, "mkstemp": {"[sp + 0x0]": "char *TEMPLATE"}, "mkdtemp": {"[sp + 0x0]": "char *TEMPLATE"}, "pipe": {"[sp + 0x0]": "int FILEDES[2]"}, "popen": {"[sp + 0x0]": "const char *COMMAND", "[sp + 0x4]": "const char *MODE"}, "pclose": {"[sp + 0x0]": "FILE *STREAM"}, "mkfifo": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "mode_t MODE"}, "bind": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "struct sockaddr *ADDR", "[sp + 0x8]": "socklen_t LENGTH"}, "getsockname": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "struct sockaddr *ADDR", "[sp + 0x8]": "socklen_t *LENGTH-PTR"}, "if_nametoindex": {"[sp + 0x0]": "const char *IFNAME"}, "if_indextoname": {"[sp + 0x0]": "unsigned int IFINDEX", "[sp + 0x4]": "char *IFNAME"}, "if_nameindex": {"[sp + 0x0]": "void"}, "if_freenameindex": {"[sp + 0x0]": "struct if_nameindex *PTR"}, "inet_aton": {"[sp + 0x0]": "const char *NAME", "[sp + 0x4]": "struct in_addr *ADDR"}, "inet_addr": {"[sp + 0x0]": "const char *NAME"}, "inet_network": {"[sp + 0x0]": "const char *NAME"}, "inet_ntoa": {"[sp + 0x0]": "struct in_addr ADDR"}, "inet_makeaddr": {"[sp + 0x0]": "uint32_t NET", "[sp + 0x4]": "uint32_t LOCAL"}, "inet_lnaof": {"[sp + 0x0]": "struct in_addr ADDR"}, "inet_netof": {"[sp + 0x0]": "struct in_addr ADDR"}, "inet_pton": {"[sp + 0x0]": "int AF", "[sp + 0x4]": "const char *CP", "[sp + 0x8]": "void *BUF"}, "inet_ntop": {"[sp + 0x0]": "int AF", "[sp + 0x4]": "const void *CP", "[sp + 0x8]": "char *BUF", "[sp + 0xc]": "socklen_t LEN"}, "gethostbyname": {"[sp + 0x0]": "const char *NAME"}, "gethostbyname2": {"[sp + 0x0]": "const char *NAME", "[sp + 0x4]": "int AF"}, "gethostbyaddr": {"[sp + 0x0]": "const void *ADDR", "[sp + 0x4]": "socklen_t LENGTH", "[sp + 0x8]": "int FORMAT"}, "gethostbyname_r": {"[sp + 0x0]": ""}, "gethostbyname2_r": {"[sp + 0x0]": ""}, "gethostbyaddr_r": {"[sp + 0x0]": ""}, "sethostent": {"[sp + 0x0]": "int STAYOPEN"}, "gethostent": {"[sp + 0x0]": "void"}, "endhostent": {"[sp + 0x0]": "void"}, "getservbyname": {"[sp + 0x0]": "const char *NAME", "[sp + 0x4]": "const char *PROTO"}, "getservbyport": {"[sp + 0x0]": "int PORT", "[sp + 0x4]": "const char *PROTO"}, "setservent": {"[sp + 0x0]": "int STAYOPEN"}, "getservent": {"[sp + 0x0]": "void"}, "endservent": {"[sp + 0x0]": "void"}, "htons": {"[sp + 0x0]": "uint16_t HOSTSHORT"}, "ntohs": {"[sp + 0x0]": "uint16_t NETSHORT"}, "htonl": {"[sp + 0x0]": "uint32_t HOSTLONG"}, "ntohl": {"[sp + 0x0]": "uint32_t NETLONG"}, "getprotobyname": {"[sp + 0x0]": "const char *NAME"}, "getprotobynumber": {"[sp + 0x0]": "int PROTOCOL"}, "setprotoent": {"[sp + 0x0]": "int STAYOPEN"}, "getprotoent": {"[sp + 0x0]": "void"}, "endprotoent": {"[sp + 0x0]": "void"}, "socket": {"[sp + 0x0]": "int NAMESPACE", "[sp + 0x4]": "int STYLE", "[sp + 0x8]": "int PROTOCOL"}, "shutdown": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "int HOW"}, "socketpair": {"[sp + 0x0]": "int NAMESPACE", "[sp + 0x4]": "int STYLE", "[sp + 0x8]": "int PROTOCOL", "[sp + 0xc]": "int FILEDES[2]"}, "connect": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "struct sockaddr *ADDR", "[sp + 0x8]": "socklen_t LENGTH"}, "listen": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "int N"}, "accept": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "struct sockaddr *ADDR", "[sp + 0x8]": "socklen_t *LENGTH_PTR"}, "getpeername": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "struct sockaddr *ADDR", "[sp + 0x8]": "socklen_t *LENGTH-PTR"}, "send": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "const void *BUFFER", "[sp + 0x8]": "size_t SIZE", "[sp + 0xc]": "int FLAGS"}, "recv": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "void *BUFFER", "[sp + 0x8]": "size_t SIZE", "[sp + 0xc]": "int FLAGS"}, "sendto": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "const void *BUFFER", "[sp + 0x8]": "size_t SIZE", "[sp + 0xc]": "int FLAGS", "[sp + 0x10]": "struct sockaddr *ADDR", "[sp + 0x14]": "socklen_t LENGTH"}, "recvfrom": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "void *BUFFER", "[sp + 0x8]": "size_t SIZE", "[sp + 0xc]": "int FLAGS", "[sp + 0x10]": "struct sockaddr *ADDR", "[sp + 0x14]": "socklen_t *LENGTH-PTR"}, "getsockopt": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "int LEVEL", "[sp + 0x8]": "int OPTNAME", "[sp + 0xc]": "void *OPTVAL", "[sp + 0x10]": "socklen_t *OPTLEN-PTR"}, "setsockopt": {"[sp + 0x0]": "int SOCKET", "[sp + 0x4]": "int LEVEL", "[sp + 0x8]": "int OPTNAME", "[sp + 0xc]": "const void *OPTVAL", "[sp + 0x10]": "socklen_t OPTLEN"}, "getnetbyname": {"[sp + 0x0]": "const char *NAME"}, "getnetbyaddr": {"[sp + 0x0]": "uint32_t NET", "[sp + 0x4]": "int TYPE"}, "setnetent": {"[sp + 0x0]": "int STAYOPEN"}, "getnetent": {"[sp + 0x0]": "void"}, "endnetent": {"[sp + 0x0]": "void"}, "isatty": {"[sp + 0x0]": "int FILEDES"}, "ttyname": {"[sp + 0x0]": "int FILEDES"}, "ttyname_r": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "char *BUF", "[sp + 0x8]": "size_t LEN"}, "tcgetattr": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "struct termios *TERMIOS-P"}, "tcsetattr": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "int WHEN", "[sp + 0x8]": "const struct termios *TERMIOS-P"}, "cfgetospeed": {"[sp + 0x0]": "const struct termios *TERMIOS-P"}, "cfgetispeed": {"[sp + 0x0]": "const struct termios *TERMIOS-P"}, "cfsetospeed": {"[sp + 0x0]": "struct termios *TERMIOS-P", "[sp + 0x4]": "speed_t SPEED"}, "cfsetispeed": {"[sp + 0x0]": "struct termios *TERMIOS-P", "[sp + 0x4]": "speed_t SPEED"}, "cfsetspeed": {"[sp + 0x0]": "struct termios *TERMIOS-P", "[sp + 0x4]": "speed_t SPEED"}, "cfmakeraw": {"[sp + 0x0]": "struct termios *TERMIOS-P"}, "gtty": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "struct sgttyb *ATTRIBUTES"}, "stty": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "const struct sgttyb *ATTRIBUTES"}, "tcsendbreak": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "int DURATION"}, "tcdrain": {"[sp + 0x0]": "int FILEDES"}, "tcflush": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "int QUEUE"}, "tcflow": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "int ACTION"}, "getpass": {"[sp + 0x0]": "const char *PROMPT"}, "getpt": {"[sp + 0x0]": "void"}, "grantpt": {"[sp + 0x0]": "int FILEDES"}, "unlockpt": {"[sp + 0x0]": "int FILEDES"}, "ptsname": {"[sp + 0x0]": "int FILEDES"}, "ptsname_r": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "char *BUF", "[sp + 0x8]": "size_t LEN"}, "openpty": {"[sp + 0x0]": "int *AMASTER", "[sp + 0x4]": "int *ASLAVE", "[sp + 0x8]": "char *NAME", "[sp + 0xc]": "const struct termios *TERMP", "[sp + 0x10]": "const struct winsize *WINP"}, "forkpty": {"[sp + 0x0]": "int *AMASTER", "[sp + 0x4]": "char *NAME", "[sp + 0x8]": "const struct termios *TERMP", "[sp + 0xc]": "const struct winsize *WINP"}, "openlog": {"[sp + 0x0]": "const char *IDENT", "[sp + 0x4]": "int OPTION", "[sp + 0x8]": "int FACILITY"}, "syslog": {"[sp + 0x0]": "int FACILITY_PRIORITY", "[sp + 0x4]": "const char *FORMAT", "[sp + 0x8]": "..."}, "vsyslog": {"[sp + 0x0]": "int FACILITY_PRIORITY", "[sp + 0x4]": "const char *FORMAT", "[sp + 0x8]": "va_list ARGLIST"}, "closelog": {"[sp + 0x0]": "void"}, "setlogmask": {"[sp + 0x0]": "int MASK"}, "sin": {"[sp + 0x0]": "double X"}, "sinf": {"[sp + 0x0]": "float X"}, "sinl": {"[sp + 0x0]": "long double X"}, "sinfN": {"[sp + 0x0]": "_FloatN X"}, "sinfNx": {"[sp + 0x0]": "_FloatNx X"}, "cos": {"[sp + 0x0]": "double X"}, "cosf": {"[sp + 0x0]": "float X"}, "cosl": {"[sp + 0x0]": "long double X"}, "cosfN": {"[sp + 0x0]": "_FloatN X"}, "cosfNx": {"[sp + 0x0]": "_FloatNx X"}, "tan": {"[sp + 0x0]": "double X"}, "tanf": {"[sp + 0x0]": "float X"}, "tanl": {"[sp + 0x0]": "long double X"}, "tanfN": {"[sp + 0x0]": "_FloatN X"}, "tanfNx": {"[sp + 0x0]": "_FloatNx X"}, "sincos": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double *SINX", "[sp + 0x8]": "double *COSX"}, "sincosf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "float *SINX", "[sp + 0x8]": "float *COSX"}, "sincosl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double *SINX", "[sp + 0x8]": "long double *COSX"}, "sincosfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN *SINX", "[sp + 0x8]": "_FloatN *COSX"}, "sincosfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx *SINX", "[sp + 0x8]": "_FloatNx *COSX"}, "csin": {"[sp + 0x0]": "complex double Z"}, "csinf": {"[sp + 0x0]": "complex float Z"}, "csinl": {"[sp + 0x0]": "complex long double Z"}, "csinfN": {"[sp + 0x0]": "complex _FloatN Z"}, "csinfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "ccos": {"[sp + 0x0]": "complex double Z"}, "ccosf": {"[sp + 0x0]": "complex float Z"}, "ccosl": {"[sp + 0x0]": "complex long double Z"}, "ccosfN": {"[sp + 0x0]": "complex _FloatN Z"}, "ccosfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "ctan": {"[sp + 0x0]": "complex double Z"}, "ctanf": {"[sp + 0x0]": "complex float Z"}, "ctanl": {"[sp + 0x0]": "complex long double Z"}, "ctanfN": {"[sp + 0x0]": "complex _FloatN Z"}, "ctanfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "asin": {"[sp + 0x0]": "double X"}, "asinf": {"[sp + 0x0]": "float X"}, "asinl": {"[sp + 0x0]": "long double X"}, "asinfN": {"[sp + 0x0]": "_FloatN X"}, "asinfNx": {"[sp + 0x0]": "_FloatNx X"}, "acos": {"[sp + 0x0]": "double X"}, "acosf": {"[sp + 0x0]": "float X"}, "acosl": {"[sp + 0x0]": "long double X"}, "acosfN": {"[sp + 0x0]": "_FloatN X"}, "acosfNx": {"[sp + 0x0]": "_FloatNx X"}, "atan": {"[sp + 0x0]": "double X"}, "atanf": {"[sp + 0x0]": "float X"}, "atanl": {"[sp + 0x0]": "long double X"}, "atanfN": {"[sp + 0x0]": "_FloatN X"}, "atanfNx": {"[sp + 0x0]": "_FloatNx X"}, "atan2": {"[sp + 0x0]": "double Y", "[sp + 0x4]": "double X"}, "atan2f": {"[sp + 0x0]": "float Y", "[sp + 0x4]": "float X"}, "atan2l": {"[sp + 0x0]": "long double Y", "[sp + 0x4]": "long double X"}, "atan2fN": {"[sp + 0x0]": "_FloatN Y", "[sp + 0x4]": "_FloatN X"}, "atan2fNx": {"[sp + 0x0]": "_FloatNx Y", "[sp + 0x4]": "_FloatNx X"}, "casin": {"[sp + 0x0]": "complex double Z"}, "casinf": {"[sp + 0x0]": "complex float Z"}, "casinl": {"[sp + 0x0]": "complex long double Z"}, "casinfN": {"[sp + 0x0]": "complex _FloatN Z"}, "casinfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "cacos": {"[sp + 0x0]": "complex double Z"}, "cacosf": {"[sp + 0x0]": "complex float Z"}, "cacosl": {"[sp + 0x0]": "complex long double Z"}, "cacosfN": {"[sp + 0x0]": "complex _FloatN Z"}, "cacosfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "catan": {"[sp + 0x0]": "complex double Z"}, "catanf": {"[sp + 0x0]": "complex float Z"}, "catanl": {"[sp + 0x0]": "complex long double Z"}, "catanfN": {"[sp + 0x0]": "complex _FloatN Z"}, "catanfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "exp": {"[sp + 0x0]": "double X"}, "expf": {"[sp + 0x0]": "float X"}, "expl": {"[sp + 0x0]": "long double X"}, "expfN": {"[sp + 0x0]": "_FloatN X"}, "expfNx": {"[sp + 0x0]": "_FloatNx X"}, "exp2": {"[sp + 0x0]": "double X"}, "exp2f": {"[sp + 0x0]": "float X"}, "exp2l": {"[sp + 0x0]": "long double X"}, "exp2fN": {"[sp + 0x0]": "_FloatN X"}, "exp2fNx": {"[sp + 0x0]": "_FloatNx X"}, "exp10": {"[sp + 0x0]": "double X"}, "exp10f": {"[sp + 0x0]": "float X"}, "exp10l": {"[sp + 0x0]": "long double X"}, "exp10fN": {"[sp + 0x0]": "_FloatN X"}, "exp10fNx": {"[sp + 0x0]": "_FloatNx X"}, "log": {"[sp + 0x0]": "double X"}, "logf": {"[sp + 0x0]": "float X"}, "logl": {"[sp + 0x0]": "long double X"}, "logfN": {"[sp + 0x0]": "_FloatN X"}, "logfNx": {"[sp + 0x0]": "_FloatNx X"}, "log10": {"[sp + 0x0]": "double X"}, "log10f": {"[sp + 0x0]": "float X"}, "log10l": {"[sp + 0x0]": "long double X"}, "log10fN": {"[sp + 0x0]": "_FloatN X"}, "log10fNx": {"[sp + 0x0]": "_FloatNx X"}, "log2": {"[sp + 0x0]": "double X"}, "log2f": {"[sp + 0x0]": "float X"}, "log2l": {"[sp + 0x0]": "long double X"}, "log2fN": {"[sp + 0x0]": "_FloatN X"}, "log2fNx": {"[sp + 0x0]": "_FloatNx X"}, "logb": {"[sp + 0x0]": "double X"}, "logbf": {"[sp + 0x0]": "float X"}, "logbl": {"[sp + 0x0]": "long double X"}, "logbfN": {"[sp + 0x0]": "_FloatN X"}, "logbfNx": {"[sp + 0x0]": "_FloatNx X"}, "ilogb": {"[sp + 0x0]": "double X"}, "ilogbf": {"[sp + 0x0]": "float X"}, "ilogbl": {"[sp + 0x0]": "long double X"}, "ilogbfN": {"[sp + 0x0]": "_FloatN X"}, "ilogbfNx": {"[sp + 0x0]": "_FloatNx X"}, "llogb": {"[sp + 0x0]": "double X"}, "llogbf": {"[sp + 0x0]": "float X"}, "llogbl": {"[sp + 0x0]": "long double X"}, "llogbfN": {"[sp + 0x0]": "_FloatN X"}, "llogbfNx": {"[sp + 0x0]": "_FloatNx X"}, "pow": {"[sp + 0x0]": "double BASE", "[sp + 0x4]": "double POWER"}, "powf": {"[sp + 0x0]": "float BASE", "[sp + 0x4]": "float POWER"}, "powl": {"[sp + 0x0]": "long double BASE", "[sp + 0x4]": "long double POWER"}, "powfN": {"[sp + 0x0]": "_FloatN BASE", "[sp + 0x4]": "_FloatN POWER"}, "powfNx": {"[sp + 0x0]": "_FloatNx BASE", "[sp + 0x4]": "_FloatNx POWER"}, "sqrt": {"[sp + 0x0]": "double X"}, "sqrtf": {"[sp + 0x0]": "float X"}, "sqrtl": {"[sp + 0x0]": "long double X"}, "sqrtfN": {"[sp + 0x0]": "_FloatN X"}, "sqrtfNx": {"[sp + 0x0]": "_FloatNx X"}, "cbrt": {"[sp + 0x0]": "double X"}, "cbrtf": {"[sp + 0x0]": "float X"}, "cbrtl": {"[sp + 0x0]": "long double X"}, "cbrtfN": {"[sp + 0x0]": "_FloatN X"}, "cbrtfNx": {"[sp + 0x0]": "_FloatNx X"}, "hypot": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "hypotf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "float Y"}, "hypotl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "hypotfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "hypotfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "expm1": {"[sp + 0x0]": "double X"}, "expm1f": {"[sp + 0x0]": "float X"}, "expm1l": {"[sp + 0x0]": "long double X"}, "expm1fN": {"[sp + 0x0]": "_FloatN X"}, "expm1fNx": {"[sp + 0x0]": "_FloatNx X"}, "log1p": {"[sp + 0x0]": "double X"}, "log1pf": {"[sp + 0x0]": "float X"}, "log1pl": {"[sp + 0x0]": "long double X"}, "log1pfN": {"[sp + 0x0]": "_FloatN X"}, "log1pfNx": {"[sp + 0x0]": "_FloatNx X"}, "cexp": {"[sp + 0x0]": "complex double Z"}, "cexpf": {"[sp + 0x0]": "complex float Z"}, "cexpl": {"[sp + 0x0]": "complex long double Z"}, "cexpfN": {"[sp + 0x0]": "complex _FloatN Z"}, "cexpfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "clog": {"[sp + 0x0]": "complex double Z"}, "clogf": {"[sp + 0x0]": "complex float Z"}, "clogl": {"[sp + 0x0]": "complex long double Z"}, "clogfN": {"[sp + 0x0]": "complex _FloatN Z"}, "clogfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "clog10": {"[sp + 0x0]": "complex double Z"}, "clog10f": {"[sp + 0x0]": "complex float Z"}, "clog10l": {"[sp + 0x0]": "complex long double Z"}, "clog10fN": {"[sp + 0x0]": "complex _FloatN Z"}, "clog10fNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "csqrt": {"[sp + 0x0]": "complex double Z"}, "csqrtf": {"[sp + 0x0]": "complex float Z"}, "csqrtl": {"[sp + 0x0]": "complex long double Z"}, "csqrtfN": {"[sp + 0x0]": "_FloatN Z"}, "csqrtfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "cpow": {"[sp + 0x0]": "complex double BASE", "[sp + 0x4]": "complex double POWER"}, "cpowf": {"[sp + 0x0]": "complex float BASE", "[sp + 0x4]": "complex float POWER"}, "cpowl": {"[sp + 0x0]": "complex long double BASE", "[sp + 0x4]": "complex long double POWER"}, "cpowfN": {"[sp + 0x0]": "complex _FloatN BASE", "[sp + 0x4]": "complex _FloatN POWER"}, "cpowfNx": {"[sp + 0x0]": "complex _FloatNx BASE", "[sp + 0x4]": "complex _FloatNx POWER"}, "sinh": {"[sp + 0x0]": "double X"}, "sinhf": {"[sp + 0x0]": "float X"}, "sinhl": {"[sp + 0x0]": "long double X"}, "sinhfN": {"[sp + 0x0]": "_FloatN X"}, "sinhfNx": {"[sp + 0x0]": "_FloatNx X"}, "cosh": {"[sp + 0x0]": "double X"}, "coshf": {"[sp + 0x0]": "float X"}, "coshl": {"[sp + 0x0]": "long double X"}, "coshfN": {"[sp + 0x0]": "_FloatN X"}, "coshfNx": {"[sp + 0x0]": "_FloatNx X"}, "tanh": {"[sp + 0x0]": "double X"}, "tanhf": {"[sp + 0x0]": "float X"}, "tanhl": {"[sp + 0x0]": "long double X"}, "tanhfN": {"[sp + 0x0]": "_FloatN X"}, "tanhfNx": {"[sp + 0x0]": "_FloatNx X"}, "csinh": {"[sp + 0x0]": "complex double Z"}, "csinhf": {"[sp + 0x0]": "complex float Z"}, "csinhl": {"[sp + 0x0]": "complex long double Z"}, "csinhfN": {"[sp + 0x0]": "complex _FloatN Z"}, "csinhfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "ccosh": {"[sp + 0x0]": "complex double Z"}, "ccoshf": {"[sp + 0x0]": "complex float Z"}, "ccoshl": {"[sp + 0x0]": "complex long double Z"}, "ccoshfN": {"[sp + 0x0]": "complex _FloatN Z"}, "ccoshfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "ctanh": {"[sp + 0x0]": "complex double Z"}, "ctanhf": {"[sp + 0x0]": "complex float Z"}, "ctanhl": {"[sp + 0x0]": "complex long double Z"}, "ctanhfN": {"[sp + 0x0]": "complex _FloatN Z"}, "ctanhfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "asinh": {"[sp + 0x0]": "double X"}, "asinhf": {"[sp + 0x0]": "float X"}, "asinhl": {"[sp + 0x0]": "long double X"}, "asinhfN": {"[sp + 0x0]": "_FloatN X"}, "asinhfNx": {"[sp + 0x0]": "_FloatNx X"}, "acosh": {"[sp + 0x0]": "double X"}, "acoshf": {"[sp + 0x0]": "float X"}, "acoshl": {"[sp + 0x0]": "long double X"}, "acoshfN": {"[sp + 0x0]": "_FloatN X"}, "acoshfNx": {"[sp + 0x0]": "_FloatNx X"}, "atanh": {"[sp + 0x0]": "double X"}, "atanhf": {"[sp + 0x0]": "float X"}, "atanhl": {"[sp + 0x0]": "long double X"}, "atanhfN": {"[sp + 0x0]": "_FloatN X"}, "atanhfNx": {"[sp + 0x0]": "_FloatNx X"}, "casinh": {"[sp + 0x0]": "complex double Z"}, "casinhf": {"[sp + 0x0]": "complex float Z"}, "casinhl": {"[sp + 0x0]": "complex long double Z"}, "casinhfN": {"[sp + 0x0]": "complex _FloatN Z"}, "casinhfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "cacosh": {"[sp + 0x0]": "complex double Z"}, "cacoshf": {"[sp + 0x0]": "complex float Z"}, "cacoshl": {"[sp + 0x0]": "complex long double Z"}, "cacoshfN": {"[sp + 0x0]": "complex _FloatN Z"}, "cacoshfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "catanh": {"[sp + 0x0]": "complex double Z"}, "catanhf": {"[sp + 0x0]": "complex float Z"}, "catanhl": {"[sp + 0x0]": "complex long double Z"}, "catanhfN": {"[sp + 0x0]": "complex _FloatN Z"}, "catanhfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "erf": {"[sp + 0x0]": "double X"}, "erff": {"[sp + 0x0]": "float X"}, "erfl": {"[sp + 0x0]": "long double X"}, "erffN": {"[sp + 0x0]": "_FloatN X"}, "erffNx": {"[sp + 0x0]": "_FloatNx X"}, "erfc": {"[sp + 0x0]": "double X"}, "erfcf": {"[sp + 0x0]": "float X"}, "erfcl": {"[sp + 0x0]": "long double X"}, "erfcfN": {"[sp + 0x0]": "_FloatN X"}, "erfcfNx": {"[sp + 0x0]": "_FloatNx X"}, "lgamma": {"[sp + 0x0]": "double X"}, "lgammaf": {"[sp + 0x0]": "float X"}, "lgammal": {"[sp + 0x0]": "long double X"}, "lgammafN": {"[sp + 0x0]": "_FloatN X"}, "lgammafNx": {"[sp + 0x0]": "_FloatNx X"}, "lgamma_r": {"[sp + 0x0]": "double X", "[sp + 0x4]": "int *SIGNP"}, "lgammaf_r": {"[sp + 0x0]": "float X", "[sp + 0x4]": "int *SIGNP"}, "lgammal_r": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "int *SIGNP"}, "lgammafN_r": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "int *SIGNP"}, "lgammafNx_r": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "int *SIGNP"}, "gamma": {"[sp + 0x0]": "double X"}, "gammaf": {"[sp + 0x0]": "float X"}, "gammal": {"[sp + 0x0]": "long double X"}, "tgamma": {"[sp + 0x0]": "double X"}, "tgammaf": {"[sp + 0x0]": "float X"}, "tgammal": {"[sp + 0x0]": "long double X"}, "tgammafN": {"[sp + 0x0]": "_FloatN X"}, "tgammafNx": {"[sp + 0x0]": "_FloatNx X"}, "j0": {"[sp + 0x0]": "double X"}, "j0f": {"[sp + 0x0]": "float X"}, "j0l": {"[sp + 0x0]": "long double X"}, "j0fN": {"[sp + 0x0]": "_FloatN X"}, "j0fNx": {"[sp + 0x0]": "_FloatNx X"}, "j1": {"[sp + 0x0]": "double X"}, "j1f": {"[sp + 0x0]": "float X"}, "j1l": {"[sp + 0x0]": "long double X"}, "j1fN": {"[sp + 0x0]": "_FloatN X"}, "j1fNx": {"[sp + 0x0]": "_FloatNx X"}, "jn": {"[sp + 0x0]": "int N", "[sp + 0x4]": "double X"}, "jnf": {"[sp + 0x0]": "int N", "[sp + 0x4]": "float X"}, "jnl": {"[sp + 0x0]": "int N", "[sp + 0x4]": "long double X"}, "jnfN": {"[sp + 0x0]": "int N", "[sp + 0x4]": "_FloatN X"}, "jnfNx": {"[sp + 0x0]": "int N", "[sp + 0x4]": "_FloatNx X"}, "y0": {"[sp + 0x0]": "double X"}, "y0f": {"[sp + 0x0]": "float X"}, "y0l": {"[sp + 0x0]": "long double X"}, "y0fN": {"[sp + 0x0]": "_FloatN X"}, "y0fNx": {"[sp + 0x0]": "_FloatNx X"}, "y1": {"[sp + 0x0]": "double X"}, "y1f": {"[sp + 0x0]": "float X"}, "y1l": {"[sp + 0x0]": "long double X"}, "y1fN": {"[sp + 0x0]": "_FloatN X"}, "y1fNx": {"[sp + 0x0]": "_FloatNx X"}, "yn": {"[sp + 0x0]": "int N", "[sp + 0x4]": "double X"}, "ynf": {"[sp + 0x0]": "int N", "[sp + 0x4]": "float X"}, "ynl": {"[sp + 0x0]": "int N", "[sp + 0x4]": "long double X"}, "ynfN": {"[sp + 0x0]": "int N", "[sp + 0x4]": "_FloatN X"}, "ynfNx": {"[sp + 0x0]": "int N", "[sp + 0x4]": "_FloatNx X"}, "rand": {"[sp + 0x0]": "void"}, "srand": {"[sp + 0x0]": "unsigned int SEED"}, "rand_r": {"[sp + 0x0]": "unsigned int *SEED"}, "random": {"[sp + 0x0]": "void"}, "srandom": {"[sp + 0x0]": "unsigned int SEED"}, "initstate": {"[sp + 0x0]": "unsigned int SEED", "[sp + 0x4]": "char *STATE", "[sp + 0x8]": "size_t SIZE"}, "setstate": {"[sp + 0x0]": "char *STATE"}, "random_r": {"[sp + 0x0]": "struct random_data *restrict BUF", "[sp + 0x4]": "int32_t *restrict RESULT"}, "srandom_r": {"[sp + 0x0]": "unsigned int SEED", "[sp + 0x4]": "struct random_data *BUF"}, "initstate_r": {"[sp + 0x0]": "unsigned int SEED", "[sp + 0x4]": "char *restrict STATEBUF", "[sp + 0x8]": "size_t STATELEN", "[sp + 0xc]": "struct random_data *restrict BUF"}, "setstate_r": {"[sp + 0x0]": "char *restrict STATEBUF", "[sp + 0x4]": "struct random_data *restrict BUF"}, "drand48": {"[sp + 0x0]": "void"}, "erand48": {"[sp + 0x0]": "unsigned short int XSUBI[3]"}, "lrand48": {"[sp + 0x0]": "void"}, "nrand48": {"[sp + 0x0]": "unsigned short int XSUBI[3]"}, "mrand48": {"[sp + 0x0]": "void"}, "jrand48": {"[sp + 0x0]": "unsigned short int XSUBI[3]"}, "srand48": {"[sp + 0x0]": "long int SEEDVAL"}, "seed48": {"[sp + 0x0]": "unsigned short int SEED16V[3]"}, "lcong48": {"[sp + 0x0]": "unsigned short int PARAM[7]"}, "drand48_r": {"[sp + 0x0]": "struct drand48_data *BUFFER", "[sp + 0x4]": "double *RESULT"}, "erand48_r": {"[sp + 0x0]": "unsigned short int XSUBI[3]", "[sp + 0x4]": "struct drand48_data *BUFFER", "[sp + 0x8]": "double *RESULT"}, "lrand48_r": {"[sp + 0x0]": "struct drand48_data *BUFFER", "[sp + 0x4]": "long int *RESULT"}, "nrand48_r": {"[sp + 0x0]": "unsigned short int XSUBI[3]", "[sp + 0x4]": "struct drand48_data *BUFFER", "[sp + 0x8]": "long int *RESULT"}, "mrand48_r": {"[sp + 0x0]": "struct drand48_data *BUFFER", "[sp + 0x4]": "long int *RESULT"}, "jrand48_r": {"[sp + 0x0]": "unsigned short int XSUBI[3]", "[sp + 0x4]": "struct drand48_data *BUFFER", "[sp + 0x8]": "long int *RESULT"}, "srand48_r": {"[sp + 0x0]": "long int SEEDVAL", "[sp + 0x4]": "struct drand48_data *BUFFER"}, "seed48_r": {"[sp + 0x0]": "unsigned short int SEED16V[3]", "[sp + 0x4]": "struct drand48_data *BUFFER"}, "lcong48_r": {"[sp + 0x0]": "unsigned short int PARAM[7]", "[sp + 0x4]": "struct drand48_data *BUFFER"}, "div": {"[sp + 0x0]": "int NUMERATOR", "[sp + 0x4]": "int DENOMINATOR"}, "ldiv": {"[sp + 0x0]": "long int NUMERATOR", "[sp + 0x4]": "long int DENOMINATOR"}, "lldiv": {"[sp + 0x0]": "long long int NUMERATOR", "[sp + 0x4]": "long long int DENOMINATOR"}, "imaxdiv": {"[sp + 0x0]": "intmax_t NUMERATOR", "[sp + 0x4]": "intmax_t DENOMINATOR"}, "isinf": {"[sp + 0x0]": "double X"}, "isinff": {"[sp + 0x0]": "float X"}, "isinfl": {"[sp + 0x0]": "long double X"}, "isnan": {"[sp + 0x0]": "double X"}, "isnanf": {"[sp + 0x0]": "float X"}, "isnanl": {"[sp + 0x0]": "long double X"}, "finite": {"[sp + 0x0]": "double X"}, "finitef": {"[sp + 0x0]": "float X"}, "finitel": {"[sp + 0x0]": "long double X"}, "feclearexcept": {"[sp + 0x0]": "int EXCEPTS"}, "feraiseexcept": {"[sp + 0x0]": "int EXCEPTS"}, "fesetexcept": {"[sp + 0x0]": "int EXCEPTS"}, "fetestexcept": {"[sp + 0x0]": "int EXCEPTS"}, "fegetexceptflag": {"[sp + 0x0]": "fexcept_t *FLAGP", "[sp + 0x4]": "int EXCEPTS"}, "fesetexceptflag": {"[sp + 0x0]": "const fexcept_t *FLAGP", "[sp + 0x4]": "int EXCEPTS"}, "fetestexceptflag": {"[sp + 0x0]": "const fexcept_t *FLAGP", "[sp + 0x4]": "int EXCEPTS"}, "fegetround": {"[sp + 0x0]": "void"}, "fesetround": {"[sp + 0x0]": "int ROUND"}, "fegetenv": {"[sp + 0x0]": "fenv_t *ENVP"}, "feholdexcept": {"[sp + 0x0]": "fenv_t *ENVP"}, "fesetenv": {"[sp + 0x0]": "const fenv_t *ENVP"}, "feupdateenv": {"[sp + 0x0]": "const fenv_t *ENVP"}, "fegetmode": {"[sp + 0x0]": "femode_t *MODEP"}, "fesetmode": {"[sp + 0x0]": "const femode_t *MODEP"}, "feenableexcept": {"[sp + 0x0]": "int EXCEPTS"}, "fedisableexcept": {"[sp + 0x0]": "int EXCEPTS"}, "fegetexcept": {"[sp + 0x0]": "void"}, "abs": {"[sp + 0x0]": "int NUMBER"}, "labs": {"[sp + 0x0]": "long int NUMBER"}, "llabs": {"[sp + 0x0]": "long long int NUMBER"}, "imaxabs": {"[sp + 0x0]": "intmax_t NUMBER"}, "fabs": {"[sp + 0x0]": "double NUMBER"}, "fabsf": {"[sp + 0x0]": "float NUMBER"}, "fabsl": {"[sp + 0x0]": "long double NUMBER"}, "fabsfN": {"[sp + 0x0]": "_FloatN NUMBER"}, "fabsfNx": {"[sp + 0x0]": "_FloatNx NUMBER"}, "cabs": {"[sp + 0x0]": "complex double Z"}, "cabsf": {"[sp + 0x0]": "complex float Z"}, "cabsl": {"[sp + 0x0]": "complex long double Z"}, "cabsfN": {"[sp + 0x0]": "complex _FloatN Z"}, "cabsfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "frexp": {"[sp + 0x0]": "double VALUE", "[sp + 0x4]": "int *EXPONENT"}, "frexpf": {"[sp + 0x0]": "float VALUE", "[sp + 0x4]": "int *EXPONENT"}, "frexpl": {"[sp + 0x0]": "long double VALUE", "[sp + 0x4]": "int *EXPONENT"}, "frexpfN": {"[sp + 0x0]": "_FloatN VALUE", "[sp + 0x4]": "int *EXPONENT"}, "frexpfNx": {"[sp + 0x0]": "_FloatNx VALUE", "[sp + 0x4]": "int *EXPONENT"}, "ldexp": {"[sp + 0x0]": "double VALUE", "[sp + 0x4]": "int EXPONENT"}, "ldexpf": {"[sp + 0x0]": "float VALUE", "[sp + 0x4]": "int EXPONENT"}, "ldexpl": {"[sp + 0x0]": "long double VALUE", "[sp + 0x4]": "int EXPONENT"}, "ldexpfN": {"[sp + 0x0]": "_FloatN VALUE", "[sp + 0x4]": "int EXPONENT"}, "ldexpfNx": {"[sp + 0x0]": "_FloatNx VALUE", "[sp + 0x4]": "int EXPONENT"}, "scalb": {"[sp + 0x0]": "double VALUE", "[sp + 0x4]": "double EXPONENT"}, "scalbf": {"[sp + 0x0]": "float VALUE", "[sp + 0x4]": "float EXPONENT"}, "scalbl": {"[sp + 0x0]": "long double VALUE", "[sp + 0x4]": "long double EXPONENT"}, "scalbn": {"[sp + 0x0]": "double X", "[sp + 0x4]": "int N"}, "scalbnf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "int N"}, "scalbnl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "int N"}, "scalbnfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "int N"}, "scalbnfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "int N"}, "scalbln": {"[sp + 0x0]": "double X", "[sp + 0x4]": "long int N"}, "scalblnf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "long int N"}, "scalblnl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long int N"}, "scalblnfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "long int N"}, "scalblnfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "long int N"}, "significand": {"[sp + 0x0]": "double X"}, "significandf": {"[sp + 0x0]": "float X"}, "significandl": {"[sp + 0x0]": "long double X"}, "ceil": {"[sp + 0x0]": "double X"}, "ceilf": {"[sp + 0x0]": "float X"}, "ceill": {"[sp + 0x0]": "long double X"}, "ceilfN": {"[sp + 0x0]": "_FloatN X"}, "ceilfNx": {"[sp + 0x0]": "_FloatNx X"}, "floor": {"[sp + 0x0]": "double X"}, "floorf": {"[sp + 0x0]": "float X"}, "floorl": {"[sp + 0x0]": "long double X"}, "floorfN": {"[sp + 0x0]": "_FloatN X"}, "floorfNx": {"[sp + 0x0]": "_FloatNx X"}, "trunc": {"[sp + 0x0]": "double X"}, "truncf": {"[sp + 0x0]": "float X"}, "truncl": {"[sp + 0x0]": "long double X"}, "truncfN": {"[sp + 0x0]": "_FloatN X"}, "truncfNx": {"[sp + 0x0]": "_FloatNx X"}, "rint": {"[sp + 0x0]": "double X"}, "rintf": {"[sp + 0x0]": "float X"}, "rintl": {"[sp + 0x0]": "long double X"}, "rintfN": {"[sp + 0x0]": "_FloatN X"}, "rintfNx": {"[sp + 0x0]": "_FloatNx X"}, "nearbyint": {"[sp + 0x0]": "double X"}, "nearbyintf": {"[sp + 0x0]": "float X"}, "nearbyintl": {"[sp + 0x0]": "long double X"}, "nearbyintfN": {"[sp + 0x0]": "_FloatN X"}, "nearbyintfNx": {"[sp + 0x0]": "_FloatNx X"}, "round": {"[sp + 0x0]": "double X"}, "roundf": {"[sp + 0x0]": "float X"}, "roundl": {"[sp + 0x0]": "long double X"}, "roundfN": {"[sp + 0x0]": "_FloatN X"}, "roundfNx": {"[sp + 0x0]": "_FloatNx X"}, "roundeven": {"[sp + 0x0]": "double X"}, "roundevenf": {"[sp + 0x0]": "float X"}, "roundevenl": {"[sp + 0x0]": "long double X"}, "roundevenfN": {"[sp + 0x0]": "_FloatN X"}, "roundevenfNx": {"[sp + 0x0]": "_FloatNx X"}, "lrint": {"[sp + 0x0]": "double X"}, "lrintf": {"[sp + 0x0]": "float X"}, "lrintl": {"[sp + 0x0]": "long double X"}, "lrintfN": {"[sp + 0x0]": "_FloatN X"}, "lrintfNx": {"[sp + 0x0]": "_FloatNx X"}, "llrint": {"[sp + 0x0]": "double X"}, "llrintf": {"[sp + 0x0]": "float X"}, "llrintl": {"[sp + 0x0]": "long double X"}, "llrintfN": {"[sp + 0x0]": "_FloatN X"}, "llrintfNx": {"[sp + 0x0]": "_FloatNx X"}, "lround": {"[sp + 0x0]": "double X"}, "lroundf": {"[sp + 0x0]": "float X"}, "lroundl": {"[sp + 0x0]": "long double X"}, "lroundfN": {"[sp + 0x0]": "_FloatN X"}, "lroundfNx": {"[sp + 0x0]": "_FloatNx X"}, "llround": {"[sp + 0x0]": "double X"}, "llroundf": {"[sp + 0x0]": "float X"}, "llroundl": {"[sp + 0x0]": "long double X"}, "llroundfN": {"[sp + 0x0]": "_FloatN X"}, "llroundfNx": {"[sp + 0x0]": "_FloatNx X"}, "fromfp": {"[sp + 0x0]": "double X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "fromfpf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "fromfpl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "fromfpfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "fromfpfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "ufromfp": {"[sp + 0x0]": "double X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "ufromfpf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "ufromfpl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "ufromfpfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "ufromfpfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "fromfpx": {"[sp + 0x0]": "double X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "fromfpxf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "fromfpxl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "fromfpxfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "fromfpxfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "ufromfpx": {"[sp + 0x0]": "double X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "ufromfpxf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "ufromfpxl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "ufromfpxfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "ufromfpxfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "int ROUND", "[sp + 0x8]": "unsigned int WIDTH"}, "modf": {"[sp + 0x0]": "double VALUE", "[sp + 0x4]": "double *INTEGER-PART"}, "modff": {"[sp + 0x0]": "float VALUE", "[sp + 0x4]": "float *INTEGER-PART"}, "modfl": {"[sp + 0x0]": "long double VALUE", "[sp + 0x4]": "long double *INTEGER-PART"}, "modffN": {"[sp + 0x0]": "_FloatN VALUE", "[sp + 0x4]": "_FloatN *INTEGER-PART"}, "modffNx": {"[sp + 0x0]": "_FloatNx VALUE", "[sp + 0x4]": "_FloatNx *INTEGER-PART"}, "fmod": {"[sp + 0x0]": "double NUMERATOR", "[sp + 0x4]": "double DENOMINATOR"}, "fmodf": {"[sp + 0x0]": "float NUMERATOR", "[sp + 0x4]": "float DENOMINATOR"}, "fmodl": {"[sp + 0x0]": "long double NUMERATOR", "[sp + 0x4]": "long double DENOMINATOR"}, "fmodfN": {"[sp + 0x0]": "_FloatN NUMERATOR", "[sp + 0x4]": "_FloatN DENOMINATOR"}, "fmodfNx": {"[sp + 0x0]": "_FloatNx NUMERATOR", "[sp + 0x4]": "_FloatNx DENOMINATOR"}, "remainder": {"[sp + 0x0]": "double NUMERATOR", "[sp + 0x4]": "double DENOMINATOR"}, "remainderf": {"[sp + 0x0]": "float NUMERATOR", "[sp + 0x4]": "float DENOMINATOR"}, "remainderl": {"[sp + 0x0]": "long double NUMERATOR", "[sp + 0x4]": "long double DENOMINATOR"}, "remainderfN": {"[sp + 0x0]": "_FloatN NUMERATOR", "[sp + 0x4]": "_FloatN DENOMINATOR"}, "remainderfNx": {"[sp + 0x0]": "_FloatNx NUMERATOR", "[sp + 0x4]": "_FloatNx DENOMINATOR"}, "drem": {"[sp + 0x0]": "double NUMERATOR", "[sp + 0x4]": "double DENOMINATOR"}, "dremf": {"[sp + 0x0]": "float NUMERATOR", "[sp + 0x4]": "float DENOMINATOR"}, "dreml": {"[sp + 0x0]": "long double NUMERATOR", "[sp + 0x4]": "long double DENOMINATOR"}, "copysign": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "copysignf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "float Y"}, "copysignl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "copysignfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "copysignfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "signbit": {"[sp + 0x0]": "_float-type_ X"}, "nextafter": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "nextafterf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "float Y"}, "nextafterl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "nextafterfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "nextafterfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "nexttoward": {"[sp + 0x0]": "double X", "[sp + 0x4]": "long double Y"}, "nexttowardf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "long double Y"}, "nexttowardl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "nextup": {"[sp + 0x0]": "double X"}, "nextupf": {"[sp + 0x0]": "float X"}, "nextupl": {"[sp + 0x0]": "long double X"}, "nextupfN": {"[sp + 0x0]": "_FloatN X"}, "nextupfNx": {"[sp + 0x0]": "_FloatNx X"}, "nextdown": {"[sp + 0x0]": "double X"}, "nextdownf": {"[sp + 0x0]": "float X"}, "nextdownl": {"[sp + 0x0]": "long double X"}, "nextdownfN": {"[sp + 0x0]": "_FloatN X"}, "nextdownfNx": {"[sp + 0x0]": "_FloatNx X"}, "nan": {"[sp + 0x0]": "const char *TAGP"}, "nanf": {"[sp + 0x0]": "const char *TAGP"}, "nanl": {"[sp + 0x0]": "const char *TAGP"}, "nanfN": {"[sp + 0x0]": "const char *TAGP"}, "nanfNx": {"[sp + 0x0]": "const char *TAGP"}, "canonicalize": {"[sp + 0x0]": "double *CX", "[sp + 0x4]": "const double *X"}, "canonicalizef": {"[sp + 0x0]": "float *CX", "[sp + 0x4]": "const float *X"}, "canonicalizel": {"[sp + 0x0]": "long double *CX", "[sp + 0x4]": "const long double *X"}, "canonicalizefN": {"[sp + 0x0]": "_FloatN *CX", "[sp + 0x4]": "const _FloatN *X"}, "canonicalizefNx": {"[sp + 0x0]": "_FloatNx *CX", "[sp + 0x4]": "const _FloatNx *X"}, "getpayload": {"[sp + 0x0]": "const double *X"}, "getpayloadf": {"[sp + 0x0]": "const float *X"}, "getpayloadl": {"[sp + 0x0]": "const long double *X"}, "getpayloadfN": {"[sp + 0x0]": "const _FloatN *X"}, "getpayloadfNx": {"[sp + 0x0]": "const _FloatNx *X"}, "setpayload": {"[sp + 0x0]": "double *X", "[sp + 0x4]": "double PAYLOAD"}, "setpayloadf": {"[sp + 0x0]": "float *X", "[sp + 0x4]": "float PAYLOAD"}, "setpayloadl": {"[sp + 0x0]": "long double *X", "[sp + 0x4]": "long double PAYLOAD"}, "setpayloadfN": {"[sp + 0x0]": "_FloatN *X", "[sp + 0x4]": "_FloatN PAYLOAD"}, "setpayloadfNx": {"[sp + 0x0]": "_FloatNx *X", "[sp + 0x4]": "_FloatNx PAYLOAD"}, "setpayloadsig": {"[sp + 0x0]": "double *X", "[sp + 0x4]": "double PAYLOAD"}, "setpayloadsigf": {"[sp + 0x0]": "float *X", "[sp + 0x4]": "float PAYLOAD"}, "setpayloadsigl": {"[sp + 0x0]": "long double *X", "[sp + 0x4]": "long double PAYLOAD"}, "setpayloadsigfN": {"[sp + 0x0]": "_FloatN *X", "[sp + 0x4]": "_FloatN PAYLOAD"}, "setpayloadsigfNx": {"[sp + 0x0]": "_FloatNx *X", "[sp + 0x4]": "_FloatNx PAYLOAD"}, "totalorder": {"[sp + 0x0]": "const double *X", "[sp + 0x4]": "const double *Y"}, "totalorderf": {"[sp + 0x0]": "const float *X", "[sp + 0x4]": "const float *Y"}, "totalorderl": {"[sp + 0x0]": "const long double *X", "[sp + 0x4]": "const long double *Y"}, "totalorderfN": {"[sp + 0x0]": "const _FloatN *X", "[sp + 0x4]": "const _FloatN *Y"}, "totalorderfNx": {"[sp + 0x0]": "const _FloatNx *X", "[sp + 0x4]": "const _FloatNx *Y"}, "totalordermag": {"[sp + 0x0]": "const double *X", "[sp + 0x4]": "const double *Y"}, "totalordermagf": {"[sp + 0x0]": "const float *X", "[sp + 0x4]": "const float *Y"}, "totalordermagl": {"[sp + 0x0]": "const long double *X", "[sp + 0x4]": "const long double *Y"}, "totalordermagfN": {"[sp + 0x0]": "const _FloatN *X", "[sp + 0x4]": "const _FloatN *Y"}, "totalordermagfNx": {"[sp + 0x0]": "const _FloatNx *X", "[sp + 0x4]": "const _FloatNx *Y"}, "fmin": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "fminf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "float Y"}, "fminl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "fminfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fminfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fmax": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "fmaxf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "float Y"}, "fmaxl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "fmaxfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fmaxfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fminmag": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "fminmagf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "float Y"}, "fminmagl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "fminmagfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fminmagfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fmaxmag": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "fmaxmagf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "float Y"}, "fmaxmagl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "fmaxmagfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fmaxmagfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fdim": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "fdimf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "float Y"}, "fdiml": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "fdimfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fdimfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fma": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y", "[sp + 0x8]": "double Z"}, "fmaf": {"[sp + 0x0]": "float X", "[sp + 0x4]": "float Y", "[sp + 0x8]": "float Z"}, "fmal": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y", "[sp + 0x8]": "long double Z"}, "fmafN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y", "[sp + 0x8]": "_FloatN Z"}, "fmafNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y", "[sp + 0x8]": "_FloatNx Z"}, "fadd": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "faddl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "daddl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "fMaddfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fMaddfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fMxaddfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fMxaddfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fsub": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "fsubl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "dsubl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "fMsubfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fMsubfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fMxsubfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fMxsubfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fmul": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "fmull": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "dmull": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "fMmulfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fMmulfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fMxmulfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fMxmulfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fdiv": {"[sp + 0x0]": "double X", "[sp + 0x4]": "double Y"}, "fdivl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "ddivl": {"[sp + 0x0]": "long double X", "[sp + 0x4]": "long double Y"}, "fMdivfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fMdivfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "fMxdivfN": {"[sp + 0x0]": "_FloatN X", "[sp + 0x4]": "_FloatN Y"}, "fMxdivfNx": {"[sp + 0x0]": "_FloatNx X", "[sp + 0x4]": "_FloatNx Y"}, "creal": {"[sp + 0x0]": "complex double Z"}, "crealf": {"[sp + 0x0]": "complex float Z"}, "creall": {"[sp + 0x0]": "complex long double Z"}, "crealfN": {"[sp + 0x0]": "complex _FloatN Z"}, "crealfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "cimag": {"[sp + 0x0]": "complex double Z"}, "cimagf": {"[sp + 0x0]": "complex float Z"}, "cimagl": {"[sp + 0x0]": "complex long double Z"}, "cimagfN": {"[sp + 0x0]": "complex _FloatN Z"}, "cimagfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "conj": {"[sp + 0x0]": "complex double Z"}, "conjf": {"[sp + 0x0]": "complex float Z"}, "conjl": {"[sp + 0x0]": "complex long double Z"}, "conjfN": {"[sp + 0x0]": "complex _FloatN Z"}, "conjfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "carg": {"[sp + 0x0]": "complex double Z"}, "cargf": {"[sp + 0x0]": "complex float Z"}, "cargl": {"[sp + 0x0]": "complex long double Z"}, "cargfN": {"[sp + 0x0]": "complex _FloatN Z"}, "cargfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "cproj": {"[sp + 0x0]": "complex double Z"}, "cprojf": {"[sp + 0x0]": "complex float Z"}, "cprojl": {"[sp + 0x0]": "complex long double Z"}, "cprojfN": {"[sp + 0x0]": "complex _FloatN Z"}, "cprojfNx": {"[sp + 0x0]": "complex _FloatNx Z"}, "strtol": {"[sp + 0x0]": "const char *restrict STRING", "[sp + 0x4]": "char **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "wcstol": {"[sp + 0x0]": "const wchar_t *restrict STRING", "[sp + 0x4]": "wchar_t **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "strtoul": {"[sp + 0x0]": "const char *restrict STRING", "[sp + 0x4]": "char **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "wcstoul": {"[sp + 0x0]": "const wchar_t *restrict STRING", "[sp + 0x4]": "wchar_t **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "strtoll": {"[sp + 0x0]": "const char *restrict STRING", "[sp + 0x4]": "char **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "wcstoll": {"[sp + 0x0]": "const wchar_t *restrict STRING", "[sp + 0x4]": "wchar_t **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "strtoq": {"[sp + 0x0]": "const char *restrict STRING", "[sp + 0x4]": "char **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "wcstoq": {"[sp + 0x0]": "const wchar_t *restrict STRING", "[sp + 0x4]": "wchar_t **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "strtoull": {"[sp + 0x0]": "const char *restrict STRING", "[sp + 0x4]": "char **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "wcstoull": {"[sp + 0x0]": "const wchar_t *restrict STRING", "[sp + 0x4]": "wchar_t **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "strtouq": {"[sp + 0x0]": "const char *restrict STRING", "[sp + 0x4]": "char **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "wcstouq": {"[sp + 0x0]": "const wchar_t *restrict STRING", "[sp + 0x4]": "wchar_t **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "strtoimax": {"[sp + 0x0]": "const char *restrict STRING", "[sp + 0x4]": "char **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "wcstoimax": {"[sp + 0x0]": "const wchar_t *restrict STRING", "[sp + 0x4]": "wchar_t **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "strtoumax": {"[sp + 0x0]": "const char *restrict STRING", "[sp + 0x4]": "char **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "wcstoumax": {"[sp + 0x0]": "const wchar_t *restrict STRING", "[sp + 0x4]": "wchar_t **restrict TAILPTR", "[sp + 0x8]": "int BASE"}, "atol": {"[sp + 0x0]": "const char *STRING"}, "atoi": {"[sp + 0x0]": "const char *STRING"}, "atoll": {"[sp + 0x0]": "const char *STRING"}, "strtod": {"[sp + 0x0]": "const char *restrict STRING", "[sp + 0x4]": "char **restrict TAILPTR"}, "strtof": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "char **TAILPTR"}, "strtold": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "char **TAILPTR"}, "strtofN": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "char **TAILPTR"}, "strtofNx": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "char **TAILPTR"}, "wcstod": {"[sp + 0x0]": "const wchar_t *restrict STRING", "[sp + 0x4]": "wchar_t **restrict TAILPTR"}, "wcstof": {"[sp + 0x0]": "const wchar_t *STRING", "[sp + 0x4]": "wchar_t **TAILPTR"}, "wcstold": {"[sp + 0x0]": "const wchar_t *STRING", "[sp + 0x4]": "wchar_t **TAILPTR"}, "wcstofN": {"[sp + 0x0]": "const wchar_t *STRING", "[sp + 0x4]": "wchar_t **TAILPTR"}, "wcstofNx": {"[sp + 0x0]": "const wchar_t *STRING", "[sp + 0x4]": "wchar_t **TAILPTR"}, "atof": {"[sp + 0x0]": "const char *STRING"}, "strfromd": {"[sp + 0x0]": "char *restrict STRING", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const char *restrict FORMAT", "[sp + 0xc]": "double VALUE"}, "strfromf": {"[sp + 0x0]": "char *restrict STRING", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const char *restrict FORMAT", "[sp + 0xc]": "float VALUE"}, "strfroml": {"[sp + 0x0]": "char *restrict STRING", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const char *restrict FORMAT", "[sp + 0xc]": "long double VALUE"}, "strfromfN": {"[sp + 0x0]": "char *restrict STRING", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const char *restrict FORMAT", "[sp + 0xc]": "_FloatN VALUE"}, "strfromfNx": {"[sp + 0x0]": "char *restrict STRING", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const char *restrict FORMAT", "[sp + 0xc]": "_FloatNx VALUE"}, "ecvt": {"[sp + 0x0]": "double VALUE", "[sp + 0x4]": "int NDIGIT", "[sp + 0x8]": "int *DECPT", "[sp + 0xc]": "int *NEG"}, "fcvt": {"[sp + 0x0]": "double VALUE", "[sp + 0x4]": "int NDIGIT", "[sp + 0x8]": "int *DECPT", "[sp + 0xc]": "int *NEG"}, "gcvt": {"[sp + 0x0]": "double VALUE", "[sp + 0x4]": "int NDIGIT", "[sp + 0x8]": "char *BUF"}, "qecvt": {"[sp + 0x0]": "long double VALUE", "[sp + 0x4]": "int NDIGIT", "[sp + 0x8]": "int *DECPT", "[sp + 0xc]": "int *NEG"}, "qfcvt": {"[sp + 0x0]": "long double VALUE", "[sp + 0x4]": "int NDIGIT", "[sp + 0x8]": "int *DECPT", "[sp + 0xc]": "int *NEG"}, "qgcvt": {"[sp + 0x0]": "long double VALUE", "[sp + 0x4]": "int NDIGIT", "[sp + 0x8]": "char *BUF"}, "ecvt_r": {"[sp + 0x0]": "double VALUE", "[sp + 0x4]": "int NDIGIT", "[sp + 0x8]": "int *DECPT", "[sp + 0xc]": "int *NEG", "[sp + 0x10]": "char *BUF", "[sp + 0x14]": "size_t LEN"}, "fcvt_r": {"[sp + 0x0]": "double VALUE", "[sp + 0x4]": "int NDIGIT", "[sp + 0x8]": "int *DECPT", "[sp + 0xc]": "int *NEG", "[sp + 0x10]": "char *BUF", "[sp + 0x14]": "size_t LEN"}, "qecvt_r": {"[sp + 0x0]": "long double VALUE", "[sp + 0x4]": "int NDIGIT", "[sp + 0x8]": "int *DECPT", "[sp + 0xc]": "int *NEG", "[sp + 0x10]": "char *BUF", "[sp + 0x14]": "size_t LEN"}, "qfcvt_r": {"[sp + 0x0]": "long double VALUE", "[sp + 0x4]": "int NDIGIT", "[sp + 0x8]": "int *DECPT", "[sp + 0xc]": "int *NEG", "[sp + 0x10]": "char *BUF", "[sp + 0x14]": "size_t LEN"}, "difftime": {"[sp + 0x0]": "time_t END", "[sp + 0x4]": "time_t BEGIN"}, "clock": {"[sp + 0x0]": "void"}, "times": {"[sp + 0x0]": "struct tms *BUFFER"}, "time": {"[sp + 0x0]": "time_t *RESULT"}, "clock_gettime": {"[sp + 0x0]": "clockid_t CLOCK", "[sp + 0x4]": "struct timespec *TS"}, "clock_getres": {"[sp + 0x0]": "clockid_t CLOCK", "[sp + 0x4]": "struct timespec *RES"}, "gettimeofday": {"[sp + 0x0]": "struct timeval *TP", "[sp + 0x4]": "void *TZP"}, "clock_settime": {"[sp + 0x0]": "clockid_t CLOCK", "[sp + 0x4]": "const struct timespec *TS"}, "ntp_gettime": {"[sp + 0x0]": "struct ntptimeval *TPTR"}, "ntp_adjtime": {"[sp + 0x0]": "struct timex *TPTR"}, "adjtime": {"[sp + 0x0]": "const struct timeval *DELTA", "[sp + 0x4]": "struct timeval *OLDDELTA"}, "stime": {"[sp + 0x0]": "const time_t *NEWTIME"}, "adjtimex": {"[sp + 0x0]": "struct timex *TIMEX"}, "settimeofday": {"[sp + 0x0]": "const struct timeval *TP", "[sp + 0x4]": "const void *TZP"}, "localtime": {"[sp + 0x0]": "const time_t *TIME"}, "localtime_r": {"[sp + 0x0]": "const time_t *TIME", "[sp + 0x4]": "struct tm *RESULTP"}, "gmtime": {"[sp + 0x0]": "const time_t *TIME"}, "gmtime_r": {"[sp + 0x0]": "const time_t *TIME", "[sp + 0x4]": "struct tm *RESULTP"}, "mktime": {"[sp + 0x0]": "struct tm *BROKENTIME"}, "timelocal": {"[sp + 0x0]": "struct tm *BROKENTIME"}, "timegm": {"[sp + 0x0]": "struct tm *BROKENTIME"}, "asctime": {"[sp + 0x0]": "const struct tm *BROKENTIME"}, "asctime_r": {"[sp + 0x0]": "const struct tm *BROKENTIME", "[sp + 0x4]": "char *BUFFER"}, "ctime": {"[sp + 0x0]": "const time_t *TIME"}, "ctime_r": {"[sp + 0x0]": "const time_t *TIME", "[sp + 0x4]": "char *BUFFER"}, "strftime": {"[sp + 0x0]": "char *S", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const char *TEMPLATE", "[sp + 0xc]": "const struct tm *BROKENTIME"}, "wcsftime": {"[sp + 0x0]": "wchar_t *S", "[sp + 0x4]": "size_t SIZE", "[sp + 0x8]": "const wchar_t *TEMPLATE", "[sp + 0xc]": "const struct tm *BROKENTIME"}, "strptime": {"[sp + 0x0]": "const char *S", "[sp + 0x4]": "const char *FMT", "[sp + 0x8]": "struct tm *TP"}, "getdate": {"[sp + 0x0]": "const char *STRING"}, "getdate_r": {"[sp + 0x0]": "const char *STRING", "[sp + 0x4]": "struct tm *TP"}, "tzset": {"[sp + 0x0]": "void"}, "setitimer": {"[sp + 0x0]": "int WHICH", "[sp + 0x4]": "const struct itimerval *NEW", "[sp + 0x8]": "struct itimerval *OLD"}, "getitimer": {"[sp + 0x0]": "int WHICH", "[sp + 0x4]": "struct itimerval *OLD"}, "alarm": {"[sp + 0x0]": "unsigned int SECONDS"}, "sleep": {"[sp + 0x0]": "unsigned int SECONDS"}, "nanosleep": {"[sp + 0x0]": "const struct timespec *REQUESTED_TIME", "[sp + 0x4]": "struct timespec *REMAINING"}, "getrusage": {"[sp + 0x0]": "int PROCESSES", "[sp + 0x4]": "struct rusage *RUSAGE"}, "vtimes": {"[sp + 0x0]": "struct vtimes *CURRENT", "[sp + 0x4]": "struct vtimes *CHILD"}, "getrlimit": {"[sp + 0x0]": "int RESOURCE", "[sp + 0x4]": "struct rlimit *RLP"}, "getrlimit64": {"[sp + 0x0]": "int RESOURCE", "[sp + 0x4]": "struct rlimit64 *RLP"}, "setrlimit": {"[sp + 0x0]": "int RESOURCE", "[sp + 0x4]": "const struct rlimit *RLP"}, "setrlimit64": {"[sp + 0x0]": "int RESOURCE", "[sp + 0x4]": "const struct rlimit64 *RLP"}, "ulimit": {"[sp + 0x0]": "int CMD", "[sp + 0x4]": "..."}, "vlimit": {"[sp + 0x0]": "int RESOURCE", "[sp + 0x4]": "int LIMIT"}, "sched_setscheduler": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "int POLICY", "[sp + 0x8]": "const struct sched_param *PARAM"}, "sched_getscheduler": {"[sp + 0x0]": "pid_t PID"}, "sched_setparam": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "const struct sched_param *PARAM"}, "sched_getparam": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "struct sched_param *PARAM"}, "sched_get_priority_min": {"[sp + 0x0]": "int POLICY"}, "sched_get_priority_max": {"[sp + 0x0]": "int POLICY"}, "sched_rr_get_interval": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "struct timespec *INTERVAL"}, "sched_yield": {"[sp + 0x0]": "void"}, "getpriority": {"[sp + 0x0]": "int CLASS", "[sp + 0x4]": "int ID"}, "setpriority": {"[sp + 0x0]": "int CLASS", "[sp + 0x4]": "int ID", "[sp + 0x8]": "int NICEVAL"}, "nice": {"[sp + 0x0]": "int INCREMENT"}, "sched_getaffinity": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "size_t CPUSETSIZE", "[sp + 0x8]": "cpu_set_t *CPUSET"}, "sched_setaffinity": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "size_t CPUSETSIZE", "[sp + 0x8]": "const cpu_set_t *CPUSET"}, "getcpu": {"[sp + 0x0]": "unsigned int *cpu", "[sp + 0x4]": "unsigned int *node"}, "getpagesize": {"[sp + 0x0]": "void"}, "get_phys_pages": {"[sp + 0x0]": "void"}, "get_avphys_pages": {"[sp + 0x0]": "void"}, "get_nprocs_conf": {"[sp + 0x0]": "void"}, "get_nprocs": {"[sp + 0x0]": "void"}, "getloadavg": {"[sp + 0x0]": "double LOADAVG[]", "[sp + 0x4]": "int NELEM"}, "longjmp": {"[sp + 0x0]": "jmp_buf STATE", "[sp + 0x4]": "int VALUE"}, "sigsetjmp": {"[sp + 0x0]": "sigjmp_buf STATE", "[sp + 0x4]": "int SAVESIGS"}, "siglongjmp": {"[sp + 0x0]": "sigjmp_buf STATE", "[sp + 0x4]": "int VALUE"}, "getcontext": {"[sp + 0x0]": "ucontext_t *UCP"}, "makecontext": {"[sp + 0x0]": "ucontext_t *UCP", "[sp + 0x4]": "void (*FUNC) (void)", "[sp + 0x8]": "int ARGC", "[sp + 0xc]": "..."}, "setcontext": {"[sp + 0x0]": "const ucontext_t *UCP"}, "swapcontext": {"[sp + 0x0]": "ucontext_t *restrict OUCP", "[sp + 0x4]": "const ucontext_t *restrict UCP"}, "strsignal": {"[sp + 0x0]": "int SIGNUM"}, "psignal": {"[sp + 0x0]": "int SIGNUM", "[sp + 0x4]": "const char *MESSAGE"}, "sigdescr_np": {"[sp + 0x0]": "int SIGNUM"}, "sigabbrev_np": {"[sp + 0x0]": "int SIGNUM"}, "signal": {"[sp + 0x0]": "int SIGNUM", "[sp + 0x4]": "sighandler_t ACTION"}, "sysv_signal": {"[sp + 0x0]": "int SIGNUM", "[sp + 0x4]": "sighandler_t ACTION"}, "ssignal": {"[sp + 0x0]": "int SIGNUM", "[sp + 0x4]": "sighandler_t ACTION"}, "sigaction": {"[sp + 0x0]": "int SIGNUM", "[sp + 0x4]": "const struct sigaction *restrict ACTION", "[sp + 0x8]": "struct sigaction *restrict OLD-ACTION"}, "raise": {"[sp + 0x0]": "int SIGNUM"}, "gsignal": {"[sp + 0x0]": "int SIGNUM"}, "kill": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "int SIGNUM"}, "tgkill": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "pid_t TID", "[sp + 0x8]": "int SIGNUM"}, "killpg": {"[sp + 0x0]": "int PGID", "[sp + 0x4]": "int SIGNUM"}, "sigemptyset": {"[sp + 0x0]": "sigset_t *SET"}, "sigfillset": {"[sp + 0x0]": "sigset_t *SET"}, "sigaddset": {"[sp + 0x0]": "sigset_t *SET", "[sp + 0x4]": "int SIGNUM"}, "sigdelset": {"[sp + 0x0]": "sigset_t *SET", "[sp + 0x4]": "int SIGNUM"}, "sigismember": {"[sp + 0x0]": "const sigset_t *SET", "[sp + 0x4]": "int SIGNUM"}, "sigprocmask": {"[sp + 0x0]": "int HOW", "[sp + 0x4]": "const sigset_t *restrict SET", "[sp + 0x8]": "sigset_t *restrict OLDSET"}, "sigpending": {"[sp + 0x0]": "sigset_t *SET"}, "pause": {"[sp + 0x0]": "void"}, "sigsuspend": {"[sp + 0x0]": "const sigset_t *SET"}, "sigaltstack": {"[sp + 0x0]": "const stack_t *restrict STACK", "[sp + 0x4]": "stack_t *restrict OLDSTACK"}, "sigstack": {"[sp + 0x0]": "struct sigstack *STACK", "[sp + 0x4]": "struct sigstack *OLDSTACK"}, "siginterrupt": {"[sp + 0x0]": "int SIGNUM", "[sp + 0x4]": "int FAILFLAG"}, "sigblock": {"[sp + 0x0]": "int MASK"}, "sigsetmask": {"[sp + 0x0]": "int MASK"}, "sigpause": {"[sp + 0x0]": "int MASK"}, "getopt": {"[sp + 0x0]": "int ARGC", "[sp + 0x4]": "char *const *ARGV", "[sp + 0x8]": "const char *OPTIONS"}, "getopt_long": {"[sp + 0x0]": "int ARGC", "[sp + 0x4]": "char *const *ARGV", "[sp + 0x8]": "const char *SHORTOPTS", "[sp + 0xc]": "const struct option *LONGOPTS", "[sp + 0x10]": "int *INDEXPTR"}, "getopt_long_only": {"[sp + 0x0]": "int ARGC", "[sp + 0x4]": "char *const *ARGV", "[sp + 0x8]": "const char *SHORTOPTS", "[sp + 0xc]": "const struct option *LONGOPTS", "[sp + 0x10]": "int *INDEXPTR"}, "argp_parse": {"[sp + 0x0]": "const struct argp *ARGP", "[sp + 0x4]": "int ARGC", "[sp + 0x8]": "char **ARGV", "[sp + 0xc]": "unsigned FLAGS", "[sp + 0x10]": "int *ARG_INDEX", "[sp + 0x14]": "void *INPUT"}, "argp_usage": {"[sp + 0x0]": "const struct argp_state *STATE"}, "argp_error": {"[sp + 0x0]": "const struct argp_state *STATE", "[sp + 0x4]": "const char *FMT", "[sp + 0x8]": "..."}, "argp_failure": {"[sp + 0x0]": "const struct argp_state *STATE", "[sp + 0x4]": "int STATUS", "[sp + 0x8]": "int ERRNUM", "[sp + 0xc]": "const char *FMT", "[sp + 0x10]": "..."}, "argp_state_help": {"[sp + 0x0]": "const struct argp_state *STATE", "[sp + 0x4]": "FILE *STREAM", "[sp + 0x8]": "unsigned FLAGS"}, "argp_help": {"[sp + 0x0]": "const struct argp *ARGP", "[sp + 0x4]": "FILE *STREAM", "[sp + 0x8]": "unsigned FLAGS", "[sp + 0xc]": "char *NAME"}, "getsubopt": {"[sp + 0x0]": "char **OPTIONP", "[sp + 0x4]": "char *const *TOKENS", "[sp + 0x8]": "char **VALUEP"}, "getenv": {"[sp + 0x0]": "const char *NAME"}, "secure_getenv": {"[sp + 0x0]": "const char *NAME"}, "putenv": {"[sp + 0x0]": "char *STRING"}, "setenv": {"[sp + 0x0]": "const char *NAME", "[sp + 0x4]": "const char *VALUE", "[sp + 0x8]": "int REPLACE"}, "unsetenv": {"[sp + 0x0]": "const char *NAME"}, "clearenv": {"[sp + 0x0]": "void"}, "getauxval": {"[sp + 0x0]": "unsigned long int TYPE"}, "syscall": {"[sp + 0x0]": "long int SYSNO", "[sp + 0x4]": "..."}, "exit": {"[sp + 0x0]": "int STATUS"}, "atexit": {"[sp + 0x0]": "void (*FUNCTION) (void)"}, "on_exit": {"[sp + 0x0]": "void (*FUNCTION)(int STATUS", "[sp + 0x4]": "void *ARG)", "[sp + 0x8]": "void *ARG"}, "abort": {"[sp + 0x0]": "void"}, "_exit": {"[sp + 0x0]": "int STATUS"}, "_Exit": {"[sp + 0x0]": "int STATUS"}, "system": {"[sp + 0x0]": "const char *COMMAND"}, "getpid": {"[sp + 0x0]": "void"}, "getppid": {"[sp + 0x0]": "void"}, "gettid": {"[sp + 0x0]": "void"}, "fork": {"[sp + 0x0]": "void"}, "vfork": {"[sp + 0x0]": "void"}, "execv": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "char *const ARGV[]"}, "execl": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "const char *ARG0", "[sp + 0x8]": "..."}, "execve": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "char *const ARGV[]", "[sp + 0x8]": "char *const ENV[]"}, "fexecve": {"[sp + 0x0]": "int FD", "[sp + 0x4]": "char *const ARGV[]", "[sp + 0x8]": "char *const ENV[]"}, "execle": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "const char *ARG0", "[sp + 0x8]": "...", "[sp + 0xc]": "char *const ENV[]"}, "execvp": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "char *const ARGV[]"}, "execlp": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "const char *ARG0", "[sp + 0x8]": "..."}, "waitpid": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "int *STATUS-PTR", "[sp + 0x8]": "int OPTIONS"}, "wait": {"[sp + 0x0]": "int *STATUS-PTR"}, "wait4": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "int *STATUS-PTR", "[sp + 0x8]": "int OPTIONS", "[sp + 0xc]": "struct rusage *USAGE"}, "wait3": {"[sp + 0x0]": "int *STATUS-PTR", "[sp + 0x4]": "int OPTIONS", "[sp + 0x8]": "struct rusage *USAGE"}, "semctl": {"[sp + 0x0]": "int SEMID", "[sp + 0x4]": "int SEMNUM", "[sp + 0x8]": "int CMD"}, "semget": {"[sp + 0x0]": "key_t KEY", "[sp + 0x4]": "int NSEMS", "[sp + 0x8]": "int SEMFLG"}, "semop": {"[sp + 0x0]": "int SEMID", "[sp + 0x4]": "struct sembuf *SOPS", "[sp + 0x8]": "size_t NSOPS"}, "semtimedop": {"[sp + 0x0]": "int SEMID", "[sp + 0x4]": "struct sembuf *SOPS", "[sp + 0x8]": "size_t NSOPS", "[sp + 0xc]": "const struct timespec *TIMEOUT"}, "sem_init": {"[sp + 0x0]": "sem_t *SEM", "[sp + 0x4]": "int PSHARED", "[sp + 0x8]": "unsigned int VALUE"}, "sem_destroy": {"[sp + 0x0]": "sem_t *SEM"}, "*sem_open": {"[sp + 0x0]": "const char *NAME", "[sp + 0x4]": "int OFLAG", "[sp + 0x8]": "..."}, "sem_close": {"[sp + 0x0]": "sem_t *SEM"}, "sem_unlink": {"[sp + 0x0]": "const char *NAME"}, "sem_wait": {"[sp + 0x0]": "sem_t *SEM"}, "sem_timedwait": {"[sp + 0x0]": "sem_t *SEM", "[sp + 0x4]": "const struct timespec *ABSTIME"}, "sem_trywait": {"[sp + 0x0]": "sem_t *SEM"}, "sem_post": {"[sp + 0x0]": "sem_t *SEM"}, "sem_getvalue": {"[sp + 0x0]": "sem_t *SEM", "[sp + 0x4]": "int *SVAL"}, "ctermid": {"[sp + 0x0]": "char *STRING"}, "setsid": {"[sp + 0x0]": "void"}, "getsid": {"[sp + 0x0]": "pid_t PID"}, "getpgrp": {"[sp + 0x0]": "void"}, "getpgid": {"[sp + 0x0]": "pid_t PID"}, "setpgid": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "pid_t PGID"}, "setpgrp": {"[sp + 0x0]": "pid_t PID", "[sp + 0x4]": "pid_t PGID"}, "tcgetpgrp": {"[sp + 0x0]": "int FILEDES"}, "tcsetpgrp": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "pid_t PGID"}, "tcgetsid": {"[sp + 0x0]": "int FILDES"}, "getuid": {"[sp + 0x0]": "void"}, "getgid": {"[sp + 0x0]": "void"}, "geteuid": {"[sp + 0x0]": "void"}, "getegid": {"[sp + 0x0]": "void"}, "getgroups": {"[sp + 0x0]": "int COUNT", "[sp + 0x4]": "gid_t *GROUPS"}, "seteuid": {"[sp + 0x0]": "uid_t NEWEUID"}, "setuid": {"[sp + 0x0]": "uid_t NEWUID"}, "setreuid": {"[sp + 0x0]": "uid_t RUID", "[sp + 0x4]": "uid_t EUID"}, "setegid": {"[sp + 0x0]": "gid_t NEWGID"}, "setgid": {"[sp + 0x0]": "gid_t NEWGID"}, "setregid": {"[sp + 0x0]": "gid_t RGID", "[sp + 0x4]": "gid_t EGID"}, "setgroups": {"[sp + 0x0]": "size_t COUNT", "[sp + 0x4]": "const gid_t *GROUPS"}, "initgroups": {"[sp + 0x0]": "const char *USER", "[sp + 0x4]": "gid_t GROUP"}, "getgrouplist": {"[sp + 0x0]": "const char *USER", "[sp + 0x4]": "gid_t GROUP", "[sp + 0x8]": "gid_t *GROUPS", "[sp + 0xc]": "int *NGROUPS"}, "getlogin": {"[sp + 0x0]": "void"}, "cuserid": {"[sp + 0x0]": "char *STRING"}, "setutent": {"[sp + 0x0]": "void"}, "getutent": {"[sp + 0x0]": "void"}, "endutent": {"[sp + 0x0]": "void"}, "getutid": {"[sp + 0x0]": "const struct utmp *ID"}, "getutline": {"[sp + 0x0]": "const struct utmp *LINE"}, "pututline": {"[sp + 0x0]": "const struct utmp *UTMP"}, "getutent_r": {"[sp + 0x0]": "struct utmp *BUFFER", "[sp + 0x4]": "struct utmp **RESULT"}, "getutid_r": {"[sp + 0x0]": "const struct utmp *ID", "[sp + 0x4]": "struct utmp *BUFFER", "[sp + 0x8]": "struct utmp **RESULT"}, "getutline_r": {"[sp + 0x0]": "const struct utmp *LINE", "[sp + 0x4]": "struct utmp *BUFFER", "[sp + 0x8]": "struct utmp **RESULT"}, "utmpname": {"[sp + 0x0]": "const char *FILE"}, "updwtmp": {"[sp + 0x0]": "const char *WTMP_FILE", "[sp + 0x4]": "const struct utmp *UTMP"}, "setutxent": {"[sp + 0x0]": "void"}, "getutxent": {"[sp + 0x0]": "void"}, "endutxent": {"[sp + 0x0]": "void"}, "getutxid": {"[sp + 0x0]": "const struct utmpx *ID"}, "getutxline": {"[sp + 0x0]": "const struct utmpx *LINE"}, "pututxline": {"[sp + 0x0]": "const struct utmpx *UTMP"}, "utmpxname": {"[sp + 0x0]": "const char *FILE"}, "getutmp": {"[sp + 0x0]": "const struct utmpx *UTMPX", "[sp + 0x4]": "struct utmp *UTMP"}, "getutmpx": {"[sp + 0x0]": "const struct utmp *UTMP", "[sp + 0x4]": "struct utmpx *UTMPX"}, "login_tty": {"[sp + 0x0]": "int FILEDES"}, "login": {"[sp + 0x0]": "const struct utmp *ENTRY"}, "logout": {"[sp + 0x0]": "const char *UT_LINE"}, "logwtmp": {"[sp + 0x0]": "const char *UT_LINE", "[sp + 0x4]": "const char *UT_NAME", "[sp + 0x8]": "const char *UT_HOST"}, "getpwuid": {"[sp + 0x0]": "uid_t UID"}, "getpwuid_r": {"[sp + 0x0]": "uid_t UID", "[sp + 0x4]": "struct passwd *RESULT_BUF", "[sp + 0x8]": "char *BUFFER", "[sp + 0xc]": "size_t BUFLEN", "[sp + 0x10]": "struct passwd **RESULT"}, "getpwnam": {"[sp + 0x0]": "const char *NAME"}, "getpwnam_r": {"[sp + 0x0]": ""}, "fgetpwent": {"[sp + 0x0]": "FILE *STREAM"}, "fgetpwent_r": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "struct passwd *RESULT_BUF", "[sp + 0x8]": "char *BUFFER", "[sp + 0xc]": "size_t BUFLEN", "[sp + 0x10]": "struct passwd **RESULT"}, "setpwent": {"[sp + 0x0]": "void"}, "getpwent": {"[sp + 0x0]": "void"}, "getpwent_r": {"[sp + 0x0]": "struct passwd *RESULT_BUF", "[sp + 0x4]": "char *BUFFER", "[sp + 0x8]": "size_t BUFLEN", "[sp + 0xc]": "struct passwd **RESULT"}, "endpwent": {"[sp + 0x0]": "void"}, "putpwent": {"[sp + 0x0]": "const struct passwd *P", "[sp + 0x4]": "FILE *STREAM"}, "getgrgid": {"[sp + 0x0]": "gid_t GID"}, "getgrgid_r": {"[sp + 0x0]": "gid_t GID", "[sp + 0x4]": "struct group *RESULT_BUF", "[sp + 0x8]": "char *BUFFER", "[sp + 0xc]": "size_t BUFLEN", "[sp + 0x10]": "struct group **RESULT"}, "getgrnam": {"[sp + 0x0]": "const char *NAME"}, "getgrnam_r": {"[sp + 0x0]": ""}, "fgetgrent": {"[sp + 0x0]": "FILE *STREAM"}, "fgetgrent_r": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "struct group *RESULT_BUF", "[sp + 0x8]": "char *BUFFER", "[sp + 0xc]": "size_t BUFLEN", "[sp + 0x10]": "struct group **RESULT"}, "setgrent": {"[sp + 0x0]": "void"}, "getgrent": {"[sp + 0x0]": "void"}, "getgrent_r": {"[sp + 0x0]": "struct group *RESULT_BUF", "[sp + 0x4]": "char *BUFFER", "[sp + 0x8]": "size_t BUFLEN", "[sp + 0xc]": "struct group **RESULT"}, "endgrent": {"[sp + 0x0]": "void"}, "setnetgrent": {"[sp + 0x0]": "const char *NETGROUP"}, "getnetgrent": {"[sp + 0x0]": "char **HOSTP", "[sp + 0x4]": "char **USERP", "[sp + 0x8]": "char **DOMAINP"}, "getnetgrent_r": {"[sp + 0x0]": "char **HOSTP", "[sp + 0x4]": "char **USERP", "[sp + 0x8]": "char **DOMAINP", "[sp + 0xc]": "char *BUFFER", "[sp + 0x10]": "size_t BUFLEN"}, "endnetgrent": {"[sp + 0x0]": "void"}, "innetgr": {"[sp + 0x0]": "const char *NETGROUP", "[sp + 0x4]": "const char *HOST", "[sp + 0x8]": "const char *USER", "[sp + 0xc]": "const char *DOMAIN"}, "gethostname": {"[sp + 0x0]": "char *NAME", "[sp + 0x4]": "size_t SIZE"}, "sethostname": {"[sp + 0x0]": "const char *NAME", "[sp + 0x4]": "size_t LENGTH"}, "getdomainnname": {"[sp + 0x0]": "char *NAME", "[sp + 0x4]": "size_t LENGTH"}, "setdomainname": {"[sp + 0x0]": "const char *NAME", "[sp + 0x4]": "size_t LENGTH"}, "gethostid": {"[sp + 0x0]": "void"}, "sethostid": {"[sp + 0x0]": "long int ID"}, "uname": {"[sp + 0x0]": "struct utsname *INFO"}, "setfsent": {"[sp + 0x0]": "void"}, "endfsent": {"[sp + 0x0]": "void"}, "getfsent": {"[sp + 0x0]": "void"}, "getfsspec": {"[sp + 0x0]": "const char *NAME"}, "getfsfile": {"[sp + 0x0]": "const char *NAME"}, "setmntent": {"[sp + 0x0]": "const char *FILE", "[sp + 0x4]": "const char *MODE"}, "endmntent": {"[sp + 0x0]": "FILE *STREAM"}, "getmntent": {"[sp + 0x0]": "FILE *STREAM"}, "getmntent_r": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "struct mntent *RESULT", "[sp + 0x8]": "char *BUFFER", "[sp + 0xc]": "int BUFSIZE"}, "addmntent": {"[sp + 0x0]": "FILE *STREAM", "[sp + 0x4]": "const struct mntent *MNT"}, "hasmntopt": {"[sp + 0x0]": "const struct mntent *MNT", "[sp + 0x4]": "const char *OPT"}, "mount": {"[sp + 0x0]": ""}, "umount2": {"[sp + 0x0]": "const char *FILE", "[sp + 0x4]": "int FLAGS"}, "umount": {"[sp + 0x0]": "const char *FILE"}, "sysconf": {"[sp + 0x0]": "int PARAMETER"}, "pathconf": {"[sp + 0x0]": "const char *FILENAME", "[sp + 0x4]": "int PARAMETER"}, "fpathconf": {"[sp + 0x0]": "int FILEDES", "[sp + 0x4]": "int PARAMETER"}, "confstr": {"[sp + 0x0]": "int PARAMETER", "[sp + 0x4]": "char *BUF", "[sp + 0x8]": "size_t LEN"}, "crypt": {"[sp + 0x0]": "const char *PHRASE", "[sp + 0x4]": "const char *SALT"}, "crypt_r": {"[sp + 0x0]": "const char *PHRASE", "[sp + 0x4]": "const char *SALT", "[sp + 0x8]": "struct crypt_data *DATA"}, "getentropy": {"[sp + 0x0]": "void *BUFFER", "[sp + 0x4]": "size_t LENGTH"}, "getrandom": {"[sp + 0x0]": "void *BUFFER", "[sp + 0x4]": "size_t LENGTH", "[sp + 0x8]": "unsigned int FLAGS"}, "backtrace": {"[sp + 0x0]": "void **BUFFER", "[sp + 0x4]": "int SIZE"}, "backtrace_symbols": {"[sp + 0x0]": "void *const *BUFFER", "[sp + 0x4]": "int SIZE"}, "backtrace_symbols_fd": {"[sp + 0x0]": "void *const *BUFFER", "[sp + 0x4]": "int SIZE", "[sp + 0x8]": "int FD"}, "thrd_create": {"[sp + 0x0]": "thrd_t *THR", "[sp + 0x4]": "thrd_start_t FUNC", "[sp + 0x8]": "void *ARG"}, "thrd_current": {"[sp + 0x0]": "void"}, "thrd_equal": {"[sp + 0x0]": "thrd_t LHS", "[sp + 0x4]": "thrd_t RHS"}, "thrd_sleep": {"[sp + 0x0]": "const struct timespec *TIME_POINT", "[sp + 0x4]": "struct timespec *REMAINING"}, "thrd_yield": {"[sp + 0x0]": "void"}, "thrd_exit": {"[sp + 0x0]": "int RES"}, "thrd_detach": {"[sp + 0x0]": "thrd_t THR"}, "thrd_join": {"[sp + 0x0]": "thrd_t THR", "[sp + 0x4]": "int *RES"}, "call_once": {"[sp + 0x0]": "once_flag *FLAG", "[sp + 0x4]": "void (*FUNC) (void)"}, "mtx_init": {"[sp + 0x0]": "mtx_t *MUTEX", "[sp + 0x4]": "int TYPE"}, "mtx_lock": {"[sp + 0x0]": "mtx_t *MUTEX"}, "mtx_timedlock": {"[sp + 0x0]": "mtx_t *restrict MUTEX", "[sp + 0x4]": "const struct timespec *restrict TIME_POINT"}, "mtx_trylock": {"[sp + 0x0]": "mtx_t *MUTEX"}, "mtx_unlock": {"[sp + 0x0]": "mtx_t *MUTEX"}, "mtx_destroy": {"[sp + 0x0]": "mtx_t *MUTEX"}, "cnd_init": {"[sp + 0x0]": "cnd_t *COND"}, "cnd_signal": {"[sp + 0x0]": "cnd_t *COND"}, "cnd_broadcast": {"[sp + 0x0]": "cnd_t *COND"}, "cnd_wait": {"[sp + 0x0]": "cnd_t *COND", "[sp + 0x4]": "mtx_t *MUTEX"}, "cnd_timedwait": {"[sp + 0x0]": "cnd_t *restrict COND", "[sp + 0x4]": "mtx_t *restrict MUTEX", "[sp + 0x8]": "const struct timespec *restrict TIME_POINT"}, "cnd_destroy": {"[sp + 0x0]": "cnd_t *COND"}, "tss_create": {"[sp + 0x0]": "tss_t *TSS_KEY", "[sp + 0x4]": "tss_dtor_t DESTRUCTOR"}, "tss_set": {"[sp + 0x0]": "tss_t TSS_KEY", "[sp + 0x4]": "void *VAL"}, "tss_get": {"[sp + 0x0]": "tss_t TSS_KEY"}, "tss_delete": {"[sp + 0x0]": "tss_t TSS_KEY"}, "pthread_key_create": {"[sp + 0x0]": "pthread_key_t *KEY", "[sp + 0x4]": "void (*DESTRUCTOR)(void*)"}, "pthread_key_delete": {"[sp + 0x0]": "pthread_key_t KEY"}, "*pthread_getspecific": {"[sp + 0x0]": "pthread_key_t KEY"}, "pthread_setspecific": {"[sp + 0x0]": "pthread_key_t KEY", "[sp + 0x4]": "const void *VALUE"}, "pthread_getattr_default_np": {"[sp + 0x0]": "pthread_attr_t *ATTR"}, "pthread_setattr_default_np": {"[sp + 0x0]": "pthread_attr_t *ATTR"}, "pthread_attr_setsigmask_np": {"[sp + 0x0]": "pthread_attr_t *ATTR", "[sp + 0x4]": "const sigset_t *SIGMASK"}, "pthread_attr_getsigmask_np": {"[sp + 0x0]": "const pthread_attr_t *ATTR", "[sp + 0x4]": "sigset_t *SIGMASK"}, "sem_clockwait": {"[sp + 0x0]": "sem_t *SEM", "[sp + 0x4]": "clockid_t CLOCKID", "[sp + 0x8]": "const struct timespec *ABSTIME"}, "pthread_cond_clockwait": {"[sp + 0x0]": ""}, "pthread_rwlock_clockrdlock": {"[sp + 0x0]": "pthread_rwlock_t *RWLOCK", "[sp + 0x4]": "clockid_t CLOCKID", "[sp + 0x8]": "const struct timespec *ABSTIME"}, "pthread_rwlock_clockwrlock": {"[sp + 0x0]": "pthread_rwlock_t *RWLOCK", "[sp + 0x4]": "clockid_t CLOCKID", "[sp + 0x8]": "const struct timespec *ABSTIME"}, "pthread_tryjoin_np": {"[sp + 0x0]": "pthread_t *THREAD", "[sp + 0x4]": "void **THREAD_RETURN"}, "pthread_timedjoin_np": {"[sp + 0x0]": "pthread_t *THREAD", "[sp + 0x4]": "void **THREAD_RETURN", "[sp + 0x8]": "const struct timespec *ABSTIME"}, "pthread_clockjoin_np": {"[sp + 0x0]": ""}, "__ppc_get_timebase": {"[sp + 0x0]": "void"}, "__ppc_get_timebase_freq": {"[sp + 0x0]": "void"}, "__ppc_yield": {"[sp + 0x0]": "void"}, "__ppc_mdoio": {"[sp + 0x0]": "void"}, "__ppc_mdoom": {"[sp + 0x0]": "void"}, "__ppc_set_ppr_med": {"[sp + 0x0]": "void"}, "__ppc_set_ppr_low": {"[sp + 0x0]": "void"}, "__ppc_set_ppr_med_low": {"[sp + 0x0]": "void"}, "__ppc_set_ppr_very_low": {"[sp + 0x0]": "void"}, "__ppc_set_ppr_med_high": {"[sp + 0x0]": "void"}, "__riscv_flush_icache": {"[sp + 0x0]": "void *START", "[sp + 0x4]": "void *END", "[sp + 0x8]": "unsigned long int FLAGS"}}